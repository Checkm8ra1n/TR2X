# TYPES
typedef int16_t PHD_ANGLE;

typedef void* LPDIRECT3DTEXTURE2;
typedef DDSURFACEDESC DDSDESC, *LPDDSDESC;
typedef LPDIRECTDRAWSURFACE3 LPDDS;
typedef D3DTEXTUREHANDLE HWR_TEXHANDLE;

typedef enum VGA_MODE {
    VGA_NoVga,
    VGA_256Color,
    VGA_ModeX,
    VGA_Standard,
} VGA_MODE;

typedef struct __unaligned BITMAP_RESOURCE {
    LPBITMAPINFO bmp_info;
    void *bmp_data;
    HPALETTE hPalette;
    DWORD flags;
} BITMAP_RESOURCE;

typedef struct __unaligned POS_3D {
    int16_t x;
    int16_t y;
    int16_t z;
} POS_3D;

typedef struct __unaligned DISPLAY_MODE {
    int32_t width;
    int32_t height;
    int32_t bpp;
    VGA_MODE vga;
} DISPLAY_MODE;

typedef struct __unaligned DISPLAY_MODE_NODE {
    struct DISPLAY_MODE_NODE *next;
    struct DISPLAY_MODE_NODE *previous;
    struct DISPLAY_MODE body;
} DISPLAY_MODE_NODE;

typedef struct __unaligned DISPLAY_MODE_LIST {
    struct DISPLAY_MODE_NODE *head;
    struct DISPLAY_MODE_NODE *tail;
    DWORD count;
} DISPLAY_MODE_LIST;

typedef struct __unaligned STRING_FLAGGED {
    char *content;
    bool is_valid;
} STRING_FLAGGED;

typedef struct __unaligned DISPLAY_ADAPTER {
    LPGUID adapter_guid_ptr;
    GUID adapter_guid;
    STRING_FLAGGED driver_description;
    STRING_FLAGGED driver_name;
    DDCAPS driver_caps;
    DDCAPS hel_caps;
    GUID device_guid;
    D3DDEVICEDESC device_desc;
    DISPLAY_MODE_LIST hw_disp_mode_list;
    DISPLAY_MODE_LIST sw_disp_mode_list;
    DISPLAY_MODE vga_mode1;
    DISPLAY_MODE vga_mode2;
    DWORD screen_width;
    bool hw_render_supported;
    bool sw_windowed_supported;
    bool hw_windowed_supported;
    bool is_vga_mode1_presented;
    bool is_vga_mode2_presented;
    bool perspective_correct_supported;
    bool dither_supported;
    bool zbuffer_supported;
    bool linear_filter_supported;
    bool shade_restricted;
} DISPLAY_ADAPTER;

typedef struct __unaligned DISPLAY_ADAPTER_NODE {
    struct DISPLAY_ADAPTER_NODE *next;
    struct DISPLAY_ADAPTER_NODE *previous;
    struct DISPLAY_ADAPTER body;
} DISPLAY_ADAPTER_NODE;

typedef struct __unaligned DISPLAY_ADAPTER_LIST {
    struct DISPLAY_ADAPTER_NODE *head;
    struct DISPLAY_ADAPTER_NODE *tail;
    DWORD count;
} DISPLAY_ADAPTER_LIST;

typedef struct __unaligned SOUND_ADAPTER {
    GUID *adapter_guid_ptr;
    GUID adapter_guid;
    STRING_FLAGGED description;
    STRING_FLAGGED module;
} SOUND_ADAPTER;

typedef struct __unaligned SOUND_ADAPTER_NODE {
    struct SOUND_ADAPTER_NODE *next;
    struct SOUND_ADAPTER_NODE *previous;
    SOUND_ADAPTER body;
} SOUND_ADAPTER_NODE;

typedef struct __unaligned SOUND_ADAPTER_LIST {
    struct SOUND_ADAPTER_NODE *head;
    struct SOUND_ADAPTER_NODE *tail;
    DWORD count;
} SOUND_ADAPTER_LIST;

typedef struct __unaligned JOYSTICK {
    GUID *lpJoystickGuid;
    GUID joystickGuid;
    STRING_FLAGGED productName;
    STRING_FLAGGED instanceName;
} JOYSTICK;

typedef struct __unaligned JOYSTICK_NODE {
    struct JOYSTICK_NODE *next;
    struct JOYSTICK_NODE *previous;
    JOYSTICK body;
} JOYSTICK_NODE;

typedef struct __unaligned JOYSTICK_LIST {
    struct JOYSTICK_LIST *head;
    struct JOYSTICK_LIST *tail;
    DWORD count;
} JOYSTICK_LIST;

typedef enum RENDER_MODE {
    RM_UNKNOWN,
    RM_SOFTWARE,
    RM_HARDWARE,
} RENDER_MODE;

typedef enum ASPECT_MODE {
    AM_4_3,
    AM_16_9,
    AM_ANY,
} ASPECT_MODE;

typedef enum TEX_ADJUST_MODE {
    TAM_DISABLED,
    TAM_BILINEAR_ONLY,
    TAM_ALWAYS,
} TEX_ADJUST_MODE;

typedef struct __unaligned APP_SETTINGS {
    struct DISPLAY_ADAPTER_NODE *preferred_display_adapter;
    struct SOUND_ADAPTER_NODE *preferred_sound_adapter;
    struct JOYSTICK_NODE *preferred_joystick;
    struct DISPLAY_MODE_NODE *video_mode;
    enum RENDER_MODE render_mode;
    int32_t window_width;
    int32_t window_height;
    enum ASPECT_MODE aspect_mode;
    bool perspective_correct;
    bool dither;
    bool zbuffer;
    bool bilinear_filtering;
    bool triple_buffering;
    bool fullscreen;
    bool sound_enabled;
    bool lara_mic;
    bool joystick_enabled;
    bool disable_16bit_textures;
    bool dont_sort_primitives;
    bool flip_broken;
    bool disable_fmv;
    TEX_ADJUST_MODE texel_adjust_mode;
    int32_t nearest_adjustment;
    int32_t linear_adjustment;
} APP_SETTINGS;

typedef struct __unaligned TEXPAGE_DESC {
    LPDDS sysMemSurface;
    LPDDS vidMemSurface;
    LPDIRECTDRAWPALETTE palette;
    LPDIRECT3DTEXTURE2 texture3d;
    HWR_TEXHANDLE texHandle;
    int32_t width;
    int32_t height;
    int32_t status;
} TEXPAGE_DESC;

typedef struct __unaligned MATRIX {
    int32_t _00;
    int32_t _01;
    int32_t _02;
    int32_t _03;
    int32_t _10;
    int32_t _11;
    int32_t _12;
    int32_t _13;
    int32_t _20;
    int32_t _21;
    int32_t _22;
    int32_t _23;
} MATRIX;

typedef struct __unaligned RGB888 {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
} RGB888;

typedef struct __unaligned ColorBitMasks_t {
    DWORD dwRBitMask;
    DWORD dwGBitMask;
    DWORD dwBBitMask;
    DWORD dwRGBAlphaBitMask;
    DWORD dwRBitDepth;
    DWORD dwGBitDepth;
    DWORD dwBBitDepth;
    DWORD dwRGBAlphaBitDepth;
    DWORD dwRBitOffset;
    DWORD dwGBitOffset;
    DWORD dwBBitOffset;
    DWORD dwRGBAlphaBitOffset;
} COLOR_BIT_MASKS;

typedef struct __unaligned GOURAUD_FILL {
    D3DCOLOR clr[4][4];
} GOURAUD_FILL;

typedef struct __unaligned GOURAUD_OUTLINE {
    D3DCOLOR clr[9];
} GOURAUD_OUTLINE;

typedef struct __unaligned DEPTHQ_ENTRY {
    uint8_t index[256];
} DEPTHQ_ENTRY;

typedef struct __unaligned GOURAUD_ENTRY {
    uint8_t index[32];
} GOURAUD_ENTRY;

typedef struct __unaligned PHD_VECTOR {
    int32_t x;
    int32_t y;
    int32_t z;
} PHD_VECTOR;

typedef struct __unaligned PHD_3DPOS {
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t x_rot;
    int16_t y_rot;
    int16_t z_rot;
} PHD_3DPOS;

typedef struct __unaligned SPHERE {
    int32_t x;
    int32_t y;
    int32_t z;
    int32_t r;
} SPHERE;

typedef struct __unaligned TEXTSTRING {
    union {
        uint32_t all;
        struct {
            uint32_t active : 1;
            uint32_t flash : 1;
            uint32_t rotate_h : 1;
            uint32_t rotate_v : 1;
            uint32_t centre_h : 1;
            uint32_t centre_v : 1;
            uint32_t hide : 1;
            uint32_t right : 1;
            uint32_t bottom : 1;
            uint32_t background : 1;
            uint32_t outline : 1;
            uint32_t multiline : 1;
        };
    } flags;
    uint16_t text_flags;
    uint16_t bgnd_flags;
    uint16_t outl_flags;
    struct {
        int16_t x;
        int16_t y;
        int16_t z;
    } pos;
    int16_t letter_spacing;
    int16_t word_spacing;
    struct {
        int16_t rate;
        int16_t count;
    } flash;
    int16_t bgnd_colour;
    const uint16_t *bgnd_gour;
    int16_t outl_colour;
    const uint16_t *outl_gour;
    struct {
        int16_t x;
        int16_t y;
    } bgnd_size;
    struct {
        int16_t x;
        int16_t y;
        int16_t z;
    } bgnd_off;
    struct {
        int32_t h;
        int32_t v;
    } scale;
    char *text;
} TEXTSTRING;

typedef struct __unaligned PHD_VBUF {
    float xv;
    float yv;
    float zv;
    float rhw;
    float xs;
    float ys;
    int16_t clip;
    int16_t g;
    int16_t u;
    int16_t v;
} PHD_VBUF;

typedef struct __unaligned PHD_UV {
    uint16_t u;
    uint16_t v;
} PHD_UV;

typedef struct __unaligned PHD_TEXTURE {
    uint16_t draw_type;
    uint16_t tex_page;
    PHD_UV uv[4];
} PHD_TEXTURE;

typedef struct __unaligned POINT_INFO {
    float xv;
    float yv;
    float zv;
    float rhw;
    float xs;
    float ys;
    float u;
    float v;
    float g;
} POINT_INFO;

typedef struct __unaligned VERTEX_INFO {
    float x;
    float y;
    float rhw;
    float u;
    float v;
    float g;
} VERTEX_INFO;

typedef enum KEYMAP {
    KM_Forward,
    KM_Back,
    KM_Left,
    KM_Right,
    KM_StepLeft,
    KM_StepRight,
    KM_Slow,
    KM_Jump,
    KM_Action,
    KM_WeaponDraw,
    KM_Flare,
    KM_Look,
    KM_Roll,
    KM_Option,
} KEYMAP;

typedef struct __unaligned REQUEST_INFO {
    uint16_t req_flags;
    uint16_t items_count;
    uint16_t selected;
    uint16_t visible_count;
    uint16_t line_offset;
    uint16_t line_old_offset;
    uint16_t pix_width;
    uint16_t line_height;
    int16_t x_pos;
    int16_t y_pos;
    int16_t z_pos;
    uint16_t item_string_len;
    char *pitem_strings1;
    char *pitem_strings2;
    uint32_t *pitem_flags1;
    uint32_t *pitem_flags2;
    uint32_t heading_flags1;
    uint32_t heading_flags2;
    uint32_t background_flags;
    uint32_t moreup_flags;
    uint32_t moredown_flags;
    uint32_t item_flags1[24];
    uint32_t item_flags2[24];
    struct TEXTSTRING *heading_text1;
    struct TEXTSTRING *heading_text2;
    struct TEXTSTRING *background_text;
    struct TEXTSTRING *moreup_text;
    struct TEXTSTRING *moredown_text;
    struct TEXTSTRING *item_texts1[24];
    struct TEXTSTRING *item_texts2[24];
    char heading_string1[32];
    char heading_string2[32];
    uint32_t render_width;
    uint32_t render_height;
} REQUEST_INFO;

typedef struct SORT_ITEM {
    int32_t _0;
    int32_t _1;
} SORT_ITEM;

typedef enum SORT_TYPE {
    ST_AVG_Z,
    ST_MAX_Z,
    ST_FAR_Z,
} SORT_TYPE;

typedef struct __unaligned COLL_SIDE {
    int32_t floor;
    int32_t ceiling;
    int32_t type;
} COLL_SIDE;

typedef struct __unaligned COLL_INFO {
    struct COLL_SIDE side_mid;
    struct COLL_SIDE side_front;
    struct COLL_SIDE side_left;
    struct COLL_SIDE side_right;
    int32_t radius;
    int32_t bad_pos;
    int32_t bad_neg;
    int32_t bad_ceiling;
    struct PHD_VECTOR shift;
    struct PHD_VECTOR old;
    int16_t old_anim_state;
    int16_t old_anim_num;
    int16_t old_frame_num;
    int16_t facing;
    int16_t quadrant;
    int16_t coll_type;
    int16_t *trigger;
    int8_t x_tilt;
    int8_t z_tilt;
    int8_t hit_by_baddie;
    int8_t hit_static;
    uint16_t slopes_are_walls : 1;
    uint16_t slopes_are_pits : 1;
    uint16_t lava_is_pit : 1;
    uint16_t enable_baddie_push : 1;
    uint16_t enable_spaz : 1;
    uint16_t hit_ceiling : 1;
} COLL_INFO;

typedef struct __unaligned ITEM_INFO {
    int32_t floor;
    uint32_t touch_bits;
    uint32_t mesh_bits;
    int16_t object_num;
    int16_t current_anim_state;
    int16_t goal_anim_state;
    int16_t required_anim_state;
    int16_t anim_num;
    int16_t frame_num;
    int16_t room_num;
    int16_t next_item;
    int16_t next_active;
    int16_t speed;
    int16_t fall_speed;
    int16_t hit_points;
    int16_t box_num;
    int16_t timer;
    uint16_t flags;
    int16_t shade1;
    int16_t shade2;
    int16_t carried_item;
    void *data;
    struct PHD_3DPOS pos;
    uint16_t active:        1; // 0x0001
    uint16_t status:        2; // 0x0002…0x0004
    uint16_t gravity:       1; // 0x0008
    uint16_t hit_status:    1; // 0x0010
    uint16_t collidable:    1; // 0x0020
    uint16_t looked_at:     1; // 0x0040
    uint16_t dynamic_light: 1; // 0x0080
    uint16_t killed:        1; // 0x0100
    uint16_t pad:           7; // 0x0200…0x8000
} ITEM_INFO;

typedef struct __unaligned STATISTICS_INFO {
    uint32_t timer;
    uint32_t shots;
    uint32_t hits;
    uint32_t distance;
    uint16_t kills;
    uint8_t secrets;
    uint8_t medipacks;
} STATISTICS_INFO;

typedef struct __unaligned START_INFO {
    uint16_t pistol_ammo;
    uint16_t magnum_ammo;
    uint16_t uzi_ammo;
    uint16_t shotgun_ammo;
    uint16_t m16_ammo;
    uint16_t grenade_ammo;
    uint16_t harpoon_ammo;
    uint8_t small_medipacks;
    uint8_t large_medipacks;
    uint8_t reserved1;
    uint8_t flares;
    uint8_t gun_status;
    uint8_t gun_type;
    uint16_t available : 1;
    uint16_t has_pistols : 1;
    uint16_t has_magnums : 1;
    uint16_t has_uzis : 1;
    uint16_t has_shotgun : 1;
    uint16_t has_m16 : 1;
    uint16_t has_grenade : 1;
    uint16_t has_harpoon : 1;
    uint16_t pad : 8;
    uint16_t reserved2;
    struct STATISTICS_INFO statistics;
} START_INFO;

typedef struct __unaligned SAVEGAME_INFO {
    struct START_INFO start[24];
    struct STATISTICS_INFO statistics;
    int16_t current_level;
    bool bonus_flag;
    uint8_t num_pickup[2];
    uint8_t num_puzzle[4];
    uint8_t num_key[4];
    uint16_t reserved;
    uint8_t buffer[6272];
} SAVEGAME_INFO;

typedef struct __unaligned FLOOR_INFO {
    int16_t idx;
    int16_t box;
    int8_t pit_room;
    int8_t floor;
    int8_t sky_room;
    int8_t ceiling;
} FLOOR_INFO;

typedef struct __unaligned WEAPON_INFO {
    int16_t lock_angles[4];
    int16_t left_angles[4];
    int16_t right_angles[4];
    int16_t aim_speed;
    int16_t shot_accuracy;
    int32_t gun_height;
    int32_t damage;
    int32_t target_dist;
    int16_t recoil_frame;
    int16_t flash_time;
    int16_t sample_num;
} WEAPON_INFO;

typedef struct __unaligned FX_INFO {
    struct PHD_3DPOS pos;
    int16_t room_num;
    int16_t object_num;
    int16_t next_fx;
    int16_t next_active;
    int16_t speed;
    int16_t fall_speed;
    int16_t frame_num;
    int16_t counter;
    int16_t shade;
} FX_INFO;

typedef struct __unaligned AI_INFO {
    int16_t zone_num;
    int16_t enemy_zone;
    int32_t distance;
    int32_t ahead;
    int32_t bite;
    int16_t angle;
    int16_t enemy_facing;
} AI_INFO;

typedef struct __unaligned BOX_NODE {
    int16_t exit_box;
    uint16_t search_num;
    int16_t next_expansion;
    int16_t box_num;
} BOX_NODE;

typedef struct __unaligned LOT_INFO {
    struct BOX_NODE *node;
    int16_t head;
    int16_t tail;
    uint16_t search_num;
    uint16_t block_mask;
    int16_t step;
    int16_t drop;
    int16_t fly;
    int16_t zone_count;
    int16_t target_box;
    int16_t required_box;
    struct PHD_VECTOR target;
} LOT_INFO;

typedef enum GF_LEVEL_TYPE {
    GFL_NOLEVEL = -1,
    GFL_TITLE,
    GFL_NORMAL,
    GFL_SAVED,
    GFL_DEMO,
    GFL_CUTSCENE,
    GFL_STORY,
    GFL_QUIET,
    GFL_MIDSTORY,
} GF_LEVEL_TYPE;

typedef struct __unaligned INVENTORY_ITEM {
    char *string;
    int16_t obj_num;
    int16_t frames_total;
    int16_t current_frame;
    int16_t goal_frame;
    int16_t open_frame;
    int16_t anim_direction;
    int16_t anim_speed;
    int16_t anim_count;
    int16_t x_rot_pt_sel;
    int16_t x_rot_pt;
    int16_t x_rot_sel;
    int16_t x_rot;
    int16_t y_rot_sel;
    int16_t y_rot;
    int16_t z_rot;
    int32_t y_trans_sel;
    int32_t y_trans;
    int32_t z_trans_sel;
    int32_t z_trans;
    int32_t meshes_sel;
    int32_t meshes_drawn;
    int16_t inv_pos;
    void *sprites;
    uint32_t reserved1;
    uint32_t reserved2;
    uint32_t reserved3;
    uint32_t reserved4;
} INVENTORY_ITEM;

typedef enum GF_EVENTS {
    GFE_PICTURE,
    GFE_LIST_START,
    GFE_LIST_END,
    GFE_PLAYFMV,
    GFE_STARTLEVEL,
    GFE_CUTSCENE,
    GFE_LEVCOMPLETE,
    GFE_DEMOPLAY,
    GFE_JUMPTO_SEQ,
    GFE_END_SEQ,
    GFE_SETTRACK,
    GFE_SUNSET,
    GFE_LOADINGPIC,
    GFE_DEADLY_WATER,
    GFE_REMOVE_WEAPONS,
    GFE_GAMECOMPLETE,
    GFE_CUTANGLE,
    GFE_NOFLOOR,
    GFE_ADD2INV,
    GFE_STARTANIM,
    GFE_NUMSECRETS,
    GFE_KILL2COMPLETE,
    GFE_REMOVE_AMMO,
} GF_EVENTS;

typedef enum MOOD_TYPE {
    MOOD_BORED = 0,
    MOOD_ATTACK = 1,
    MOOD_ESCAPE = 2,
    MOOD_STALK = 3,
} MOOD_TYPE;

typedef enum TARGET_TYPE {
    TARGET_NONE = 0,
    TARGET_PRIMARY = 1,
    TARGET_SECONDARY = 2,
} TARGET_TYPE;

typedef struct __unaligned BITE_INFO {
    int32_t x;
    int32_t y;
    int32_t z;
    int32_t mesh_idx;
} BITE_INFO;

typedef struct __unaligned ANIM_STRUCT {
    int16_t *frame_ptr;
    int16_t interpolation;
    int16_t current_anim_state;
    int32_t velocity;
    int32_t acceleration;
    int16_t frame_base;
    int16_t frame_end;
    int16_t jump_anim_num;
    int16_t jump_frame_num;
    int16_t num_changes;
    int16_t change_idx;
    int16_t num_commands;
    int16_t command_idx;
} ANIM_STRUCT;

typedef struct __unaligned DOOR_INFO {
    int16_t room;
    int16_t x;
    int16_t y;
    int16_t z;
    struct POS_3D vertex[4];
} DOOR_INFO;

typedef struct __unaligned DOOR_INFOS {
    int16_t count;
    struct DOOR_INFO door[];
} DOOR_INFOS;

typedef struct __unaligned LIGHT_INFO {
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t intensity1;
    int16_t intensity2;
    int32_t falloff1;
    int32_t falloff2;
} LIGHT_INFO;

typedef struct __unaligned MESH_INFO {
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t y_rot;
    int16_t shade1;
    int16_t shade2;
    int16_t static_num;
} MESH_INFO;

typedef struct __unaligned ROOM_INFO {
    int16_t *data;
    struct DOOR_INFOS *doors;
    struct FLOOR_INFO *floor;
    struct LIGHT_INFO *light;
    struct MESH_INFO *mesh;
    int32_t x;
    int32_t y;
    int32_t z;
    int32_t min_floor;
    int32_t max_ceiling;
    int16_t x_size;
    int16_t y_size;
    int16_t ambient1;
    int16_t ambient2;
    int16_t light_mode;
    int16_t num_lights;
    int16_t num_meshes;
    int16_t bound_left;
    int16_t bound_right;
    int16_t bound_top;
    int16_t bound_bottom;
    uint16_t bound_active;
    int16_t left;
    int16_t right;
    int16_t top;
    int16_t bottom;
    int16_t item_num;
    int16_t fx_num;
    int16_t flipped_room;
    uint16_t flags;
} ROOM_INFO;

typedef struct __unaligned CREATURE_INFO {
    int16_t head_rotation;
    int16_t neck_rotation;
    int16_t maximum_turn;
    uint16_t flags;
    int16_t item_num;
    enum MOOD_TYPE mood;
    struct LOT_INFO lot;
    struct PHD_VECTOR target;
    struct ITEM_INFO *enemy;
} CREATURE_INFO;

typedef enum CAMERA_TYPE {
    CAM_CHASE = 0,
    CAM_FIXED = 1,
    CAM_LOOK = 2,
    CAM_COMBAT = 3,
    CAM_CINEMATIC = 4,
    CAM_HEAVY = 5,
} CAMERA_TYPE;

typedef struct __unaligned GAME_VECTOR {
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t room_num;
    int16_t box_num;
} GAME_VECTOR;

typedef struct __unaligned OBJECT_VECTOR {
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t data;
    int16_t flags;
} OBJECT_VECTOR;

typedef struct __unaligned BOX_INFO {
    uint8_t left;
    uint8_t right;
    uint8_t top;
    uint8_t bottom;
    uint16_t height;
    uint16_t overlap_index;
} BOX_INFO;

typedef struct __unaligned OBJECT_INFO {
    int16_t mesh_count;
    int16_t mesh_idx;
    int32_t bone_idx;
    int16_t *frame_base;

    void (*initialise)(int16_t item_number);
    void (*control)(int16_t item_number);
    void (*floor)(
        struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z,
        int32_t *height);
    void (*ceiling)(
        struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z,
        int32_t *height);
    void (*draw_routine)(struct ITEM_INFO *item);
    void (*collision)(
        int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);

    int16_t anim_idx;
    int16_t hit_points;
    int16_t pivot_length;
    int16_t radius;
    int16_t shadow_size;

    uint16_t loaded : 1;
    uint16_t intelligent : 1;
    uint16_t non_lot : 1;
    uint16_t save_position : 1;
    uint16_t save_hitpoints : 1;
    uint16_t save_flags : 1;
    uint16_t save_anim : 1;
    uint16_t semi_transparent : 1;
    uint16_t water_creature : 1;
} OBJECT_INFO;

typedef struct __unaligned CAMERA_INFO {
    struct GAME_VECTOR pos;
    struct GAME_VECTOR target;
    enum CAMERA_TYPE type;
    int32_t shift;
    uint32_t flags;
    int32_t fixed_camera;
    int32_t num_frames;
    int32_t bounce;
    int32_t underwater;
    int32_t target_distance;
    int32_t target_square;
    int16_t target_angle;
    int16_t actual_angle;
    int16_t target_elevation;
    int16_t box;
    int16_t num;
    int16_t last;
    int16_t timer;
    int16_t speed;
    struct ITEM_INFO *item;
    struct ITEM_INFO *last_item;
    struct OBJECT_VECTOR *fixed;
    int32_t is_lara_mic;
    struct PHD_VECTOR mic_pos;
} CAMERA_INFO;

typedef struct __unaligned LARA_ARM {
    int16_t *frame_base;
    int16_t frame_num;
    int16_t anim_num;
    int16_t lock;
    int16_t y_rot;
    int16_t x_rot;
    int16_t z_rot;
    int16_t flash_gun;
} LARA_ARM;

typedef struct __unaligned AMMO_INFO {
    int32_t ammo;
} AMMO_INFO;

typedef struct __unaligned LARA_INFO {
    int16_t item_num;
    int16_t gun_status;
    int16_t gun_type;
    int16_t request_gun_type;
    int16_t last_gun_type;
    int16_t calc_fallspeed;
    int16_t water_status;
    int16_t climb_status;
    int16_t pose_count;
    int16_t hit_frame;
    int16_t hit_direction;
    int16_t air;
    int16_t dive_count;
    int16_t death_count;
    int16_t current_active;
    int16_t spaz_effect_count;
    int16_t flare_age;
    int16_t skidoo;
    int16_t weapon_item;
    int16_t back_gun;
    int16_t flare_frame;
    uint16_t flare_control_left : 1;
    uint16_t flare_control_right : 1;
    uint16_t extra_anim : 1;
    uint16_t look : 1;
    uint16_t burn : 1;
    uint16_t keep_ducked : 1;
    uint16_t can_monkey_swing : 1;
    uint16_t pad : 9;
    int32_t water_surface_dist;
    struct PHD_VECTOR last_pos;
    struct FX_INFO *spaz_effect;
    uint32_t mesh_effects;
    int16_t *mesh_ptrs[15];
    struct ITEM_INFO *target;
    int16_t target_angles[2];
    int16_t turn_rate;
    int16_t move_angle;
    int16_t head_y_rot;
    int16_t head_x_rot;
    int16_t head_z_rot;
    int16_t torso_y_rot;
    int16_t torso_x_rot;
    int16_t torso_z_rot;
    struct LARA_ARM left_arm;
    struct LARA_ARM right_arm;
    struct AMMO_INFO pistol_ammo;
    struct AMMO_INFO magnum_ammo;
    struct AMMO_INFO uzi_ammo;
    struct AMMO_INFO shotgun_ammo;
    struct AMMO_INFO harpoon_ammo;
    struct AMMO_INFO grenade_ammo;
    struct AMMO_INFO m16_ammo;
    struct CREATURE_INFO *creature;
} LARA_INFO;

typedef struct __unaligned CINE_FRAME {
    int16_t tx;
    int16_t ty;
    int16_t tz;
    int16_t cx;
    int16_t cy;
    int16_t cz;
    int16_t fov;
    int16_t roll;
} CINE_FRAME;

typedef enum INPUT_STATE {
    IN_FORWARD = 0x00000001,
    IN_BACK = 0x00000002,
    IN_LEFT = 0x00000004,
    IN_RIGHT = 0x00000008,
    IN_JUMP = 0x00000010,
    IN_DRAW = 0x00000020,
    IN_ACTION = 0x00000040,
    IN_SLOW = 0x00000080,
    IN_OPTION = 0x00000100,
    IN_LOOK = 0x00000200,
    IN_STEP_LEFT = 0x00000400,
    IN_STEP_RIGHT = 0x00000800,
    IN_ROLL = 0x00001000,
    IN_PAUSE = 0x00002000,
    IN_RESERVED1 = 0x00004000,
    IN_RESERVED2 = 0x00008000,
    IN_DOZY_CHEAT = 0x00010000,
    IN_STUFF_CHEAT = 0x00020000,
    IN_DEBUG_INFO = 0x00040000,
    IN_FLARE = 0x00080000,
    IN_SELECT = 0x00100000,
    IN_DESELECT = 0x00200000,
    IN_SAVE = 0x00400000,
    IN_LOAD = 0x00800000,
} INPUT_STATE;

typedef enum LARA_WATER_STATE {
    LWS_ABOVE_WATER = 0,
    LWS_UNDERWATER = 1,
    LWS_SURFACE = 2,
    LWS_CHEAT = 3,
    LWS_WADE = 4,
} LARA_WATER_STATE;

typedef enum LARA_ANIMATION {
    LA_RUN                  = 0,
    LA_WALK_FORWARD         = 1,
    LA_STOP_LEFT            = 2,
    LA_STOP_RIGHT           = 3,
    LA_RUN_START            = 6,
    LA_STOP                 = 11,
    LA_FAST_FALL            = 23,
    LA_LAND_FAR             = 24,
    LA_STOP_HANG            = 28,
    LA_LAND                 = 31,
    LA_FAST_SPLAT           = 32,
    LA_FALL_DOWN            = 34,
    LA_WALK_BACK            = 40,
    LA_VAULT_34             = 42,
    LA_VAULT_12             = 50,
    LA_HIT_WALL_LEFT        = 53,
    LA_HIT_WALL_RIGHT       = 54,
    LA_RUN_STEP_UP_RIGHT    = 55,
    LA_RUN_STEP_UP_LEFT     = 56,
    LA_WALK_STEP_UP_LEFT    = 57,
    LA_WALK_STEP_UP_RIGHT   = 58,
    LA_WALK_STEP_DOWN_RIGHT = 59,
    LA_WALK_STEP_DOWN_LEFT  = 60,
    LA_BACK_STEP_DOWN_LEFT  = 61,
    LA_BACK_STEP_DOWN_RIGHT = 62,
    LA_WALL_SWITCH_DOWN     = 63,
    LA_WALL_SWITCH_UP       = 64,
    LA_SIDE_STEP_LEFT       = 65,
    LA_SIDE_STEP_RIGHT      = 67,
    LA_SLIDE                = 70,
    LA_COMPRESS             = 73,
    LA_SWIM_GLIDE           = 87,
    LA_FALL_BACK            = 93,
    LA_GRAB_LEDGE           = 96,
    LA_HANG                 = 96,
    LA_BREATH               = 103,
    LA_SLIDE_BACK           = 104,
    LA_TREAD                = 108,
    LA_SURF_CLIMB           = 111,
    LA_JUMP_IN              = 112,
    LA_SURF_TREAD           = 114,
    LA_SURF_SWIM            = 116,
    LA_SURF_DIVE            = 119,
    LA_SPAZ_FORWARD         = 125,
    LA_SPAZ_BACK            = 126,
    LA_SPAZ_RIGHT           = 127,
    LA_SPAZ_LEFT            = 128,
    LA_PICKUP_UW            = 130,
    LA_PICKUP               = 135,
    LA_ROLLING_BALL_DEATH   = 139,
    LA_SURF_TREAD_TO_BACK   = 140,
    LA_SURF_BACK            = 141,
    LA_SURF_LEFT            = 143,
    LA_SURF_RIGHT           = 144,
    LA_ROLL                 = 146,
    LA_SPIKE_DEATH          = 149,
    LA_GRAB_LEDGE_IN        = 150,
    LA_CLIMBING             = 161,
    LA_CLIMB_UP_LEFT_END    = 162,
    LA_CLIMB_UP_RIGHT_END   = 163,
    LA_CLIMB_STANCE         = 164,
    LA_CLIMB_DOWN_LEFT_END  = 166,
    LA_CLIMB_DOWN_RIGHT_END = 167,
    LA_CLIMB_DOWN           = 168,
    LA_CLIMB_RIGHT          = 170,
    LA_CLIMB_LEFT           = 171,
    LA_UW_TO_WADE           = 176,
    LA_WADE                 = 177,
    LA_HANG_UP              = 187,
    LA_HANG_DOWN            = 188,
    LA_THROW_FLARE          = 189,
    LA_SURF_TO_WADE         = 190,
    LA_SURF_TO_STAND        = 191,
    LA_SWIM_TO_QSTAND       = 192,
    LA_SURF_TO_QSTAND       = 193,
    LA_CLIMB_TO_HANG        = 194,
    LA_GRAB_RIGHT           = 201,
    LA_GRAB_LEFT            = 202,
    LA_UW_TWIST             = 203,
    LA_PICKUP_FLARE_UW      = 206,
} LARA_ANIMATION;

typedef enum LARA_STATE {
    LS_WALK         = 0,
    LS_RUN          = 1,
    LS_STOP         = 2,
    LS_FORWARD_JUMP = 3,
    LS_POSE         = 4,
    LS_FAST_BACK    = 5,
    LS_TURN_RIGHT   = 6,
    LS_TURN_LEFT    = 7,
    LS_DEATH        = 8,
    LS_FAST_FALL    = 9,
    LS_HANG         = 10,
    LS_REACH        = 11,
    LS_SPLAT        = 12,
    LS_TREAD        = 13,
    LS_LAND         = 14,
    LS_COMPRESS     = 15,
    LS_BACK         = 16,
    LS_SWIM         = 17,
    LS_GLIDE        = 18,
    LS_NULL         = 19,
    LS_FAST_TURN    = 20,
    LS_STEP_RIGHT   = 21,
    LS_STEP_LEFT    = 22,
    LS_HIT          = 23,
    LS_SLIDE        = 24,
    LS_BACK_JUMP    = 25,
    LS_RIGHT_JUMP   = 26,
    LS_LEFT_JUMP    = 27,
    LS_UP_JUMP      = 28,
    LS_FALL_BACK    = 29,
    LS_HANG_LEFT    = 30,
    LS_HANG_RIGHT   = 31,
    LS_SLIDE_BACK   = 32,
    LS_SURF_TREAD   = 33,
    LS_SURF_SWIM    = 34,
    LS_DIVE         = 35,
    LS_PUSH_BLOCK   = 36,
    LS_PULL_BLOCK   = 37,
    LS_PP_READY     = 38,
    LS_PICKUP       = 39,
    LS_SWITCH_ON    = 40,
    LS_SWITCH_OFF   = 41,
    LS_USE_KEY      = 42,
    LS_USE_PUZZLE   = 43,
    LS_UW_DEATH     = 44,
    LS_ROLL         = 45,
    LS_SPECIAL      = 46,
    LS_SURF_BACK    = 47,
    LS_SURF_LEFT    = 48,
    LS_SURF_RIGHT   = 49,
    LS_USE_MIDAS    = 50,
    LS_DIE_MIDAS    = 51,
    LS_SWAN_DIVE    = 52,
    LS_FAST_DIVE    = 53,
    LS_GYMNAST      = 54,
    LS_WATER_OUT    = 55,
    LS_CLIMB_STANCE = 56,
    LS_CLIMBING     = 57,
    LS_CLIMB_LEFT   = 58,
    LS_CLIMB_END    = 59,
    LS_CLIMB_RIGHT  = 60,
    LS_CLIMB_DOWN   = 61,
    LS_LARA_TEST1   = 62,
    LS_LARA_TEST2   = 63,
    LS_LARA_TEST3   = 64,
    LS_WADE         = 65,
    LS_WATER_ROLL   = 66,
    LS_FLARE_PICKUP = 67,
    LS_TWIST        = 68,
    LS_KICK         = 69,
    LS_DEATH_SLIDE  = 70,
    LS_DUCK         = 71,
    LS_DUCK_ROLL    = 72,
    LS_DASH         = 73,
    LS_DASH_DIVE    = 74,
    LS_MONKEY_SWING = 75,
    LS_MONKEYF      = 76,
    LS_LAST         = 77,
} LARA_STATE;

typedef enum LARA_GUN_STATE {
    LGS_ARMLESS = 0,
    LGS_HANDS_BUSY = 1,
    LGS_DRAW = 2,
    LGS_UNDRAW = 3,
    LGS_READY = 4,
    LGS_SPECIAL = 5,
} LARA_GUN_STATE;

typedef enum LARA_GUN_TYPE {
    LGT_UNARMED = 0,
    LGT_PISTOLS = 1,
    LGT_MAGNUMS = 2,
    LGT_UZIS = 3,
    LGT_SHOTGUN = 4,
    LGT_M16 = 5,
    LGT_ROCKET = 6,
    LGT_HARPOON = 7,
    LGT_FLARE = 8 ,
    LGT_SKIDOO = 9,
    NUM_WEAPONS = 10,
} LARA_GUN_TYPE;

typedef enum COLL_TYPE {
    COLL_NONE      = 0x00,
    COLL_FRONT     = 0x01,
    COLL_LEFT      = 0x02,
    COLL_RIGHT     = 0x04,
    COLL_TOP       = 0x08,
    COLL_TOP_FRONT = 0x10,
    COLL_CLAMP     = 0x20,
} COLL_TYPE;

typedef enum HEIGHT_TYPE {
    HT_WALL = 0,
    HT_SMALL_SLOPE = 1,
    HT_BIG_SLOPE = 2,
} HEIGHT_TYPE;

typedef enum DIRECTION {
    DIR_NORTH = 0,
    DIR_EAST = 1,
    DIR_SOUTH = 2,
    DIR_WEST = 3,
} DIRECTION;

typedef enum FRAME_BBOX_INFO {
    FBBOX_MIN_X = 0,
    FBBOX_MAX_X = 1,
    FBBOX_MIN_Y = 2,
    FBBOX_MAX_Y = 3,
    FBBOX_MIN_Z = 4,
    FBBOX_MAX_Z = 5,
    FBBOX_X = 6,
    FBBOX_Y = 7,
    FBBOX_Z = 8,
} FRAME_BBOX_INFO;

typedef enum LARA_MESH {
    LM_HIPS = 0,
    LM_THIGH_L = 1,
    LM_CALF_L = 2,
    LM_FOOT_L = 3,
    LM_THIGH_R = 4,
    LM_CALF_R = 5,
    LM_FOOT_R = 6,
    LM_TORSO = 7,
    LM_UARM_R = 8,
    LM_LARM_R = 9,
    LM_HAND_R = 10,
    LM_UARM_L = 11,
    LM_LARM_L = 12,
    LM_HAND_L = 13,
    LM_HEAD = 14,
    LM_NUMBER_OF = 15,
} LARA_MESH;

# FUNCTIONS
#   Flags:
#   - to do
#   * to do, called by TR2X
#   x unused
#   + fully decompiled
# Offset    Size        Flags   Declaration

# 3dsystem/3d_gen.c
00401000    000001D0    +       void __cdecl Matrix_GenerateW2V(struct PHD_3DPOS *viewpos);
004011D0    00000072    +       void __cdecl Matrix_LookAt(int32_t xsrc, int32_t ysrc, int32_t zsrc, int32_t xtar, int32_t ytar, int32_t ztar, int16_t roll);
00401250    00000078    +       void __cdecl Math_GetVectorAngles(int32_t x, int32_t y, int32_t z, int16_t *dest);
004012D0    000000AA    +       void __cdecl Matrix_RotX(int16_t rx);
00401380    000000A8    +       void __cdecl Matrix_RotY(int16_t ry);
00401430    000000A8    +       void __cdecl Matrix_RotZ(int16_t rz);
004014E0    000001DC    +       void __cdecl Matrix_RotYXZ(int16_t ry, int16_t rx, int16_t rz);
004016C0    000001E7    +       void __cdecl Matrix_RotYXZpack(uint32_t rpack);
004018B0    000000AB    +       bool __cdecl Matrix_TranslateRel(int32_t x, int32_t y, int32_t z);
00401960    0000007A    +       void __cdecl Matrix_TranslateAbs(int32_t x, int32_t y, int32_t z);
004019E0    000000F3    +       void __cdecl Output_InsertPolygons(const int16_t *obj_ptr, int32_t clip);
00401AE0    000000EA    +       void __cdecl Output_InsertRoom(const int16_t *obj_ptr, int32_t is_outside);
00401BD0    00000032    +       const int16_t *__cdecl Output_CalcSkyboxLight(const int16_t *obj_ptr);
00401C10    00000134    +       void __cdecl Output_InsertSkybox(const int16_t *obj_ptr);
00401D50    00000001    x       void __cdecl Output_InsertInventoryBackground(const int16_t *obj_ptr);
00401D60    000001D5    +       const int16_t *__cdecl Output_CalcObjectVertices(const int16_t *obj_ptr);
00401F40    0000016D    +       const int16_t *__cdecl Output_CalcVerticeLight(const int16_t *obj_ptr);
004020B0    0000027D    +       const int16_t *__cdecl Output_CalcRoomVertices(const int16_t *obj_ptr, int32_t far_clip);
00402330    000000C7    +       void __cdecl Output_RotateLight(int16_t pitch, int16_t yaw);
00402400    00000039    +       void __cdecl Output_InitPolyList(void);
00402430    00000033    +       void __cdecl Output_SortPolyList(void);
00402470    000000C5    +       void __cdecl Output_QuickSort(int32_t left, int32_t right);
00402540    00000036    +       void __cdecl Output_PrintPolyList(uint8_t *surface_ptr);
00402580    000000A1    +       void __cdecl Output_AlterFOV(int16_t fov);
00402690    00000095    +       void __cdecl Output_SetNearZ(int32_t near_z);
004026E0    0000006B    +       void __cdecl Output_SetFarZ(int32_t far_z);
00402700    00000266    +       void __cdecl Output_Init(int16_t x, int16_t y, int32_t width, int32_t height, int32_t near_z, int32_t far_z, int16_t view_angle, int32_t screen_width, int32_t screen_height);

# 3dsystem/3d_out.c
00402970    0000019F    +       void __cdecl Output_DrawPolyLine(const int16_t *obj_ptr);
00402B10    00000035    +       void __cdecl Output_DrawPolyFlat(const int16_t *obj_ptr);
00402B50    00000035    +       void __cdecl Output_DrawPolyTrans(const int16_t *obj_ptr);
00402B90    00000035    +       void __cdecl Output_DrawPolyGouraud(const int16_t *obj_ptr);
00402BD0    0000003C    +       void __cdecl Output_DrawPolyGTMap(const int16_t *obj_ptr);
00402C10    0000003C    +       void __cdecl Output_DrawPolyWGTMap(const int16_t *obj_ptr);
00402C50    000000D2    +       int32_t __cdecl Output_XGenX(const int16_t *obj_ptr);
00402D30    00000146    +       int32_t __cdecl Output_XGenXG(const int16_t *obj_ptr);
00402E80    00000219    +       int32_t __cdecl Output_XGenXGUV(const int16_t *obj_ptr);
004030A0    00000284    +       int32_t __cdecl Output_XGenXGUVPerspFP(const int16_t *obj_ptr);
00403330    00000FC6    +       void __cdecl Output_GTMapPersp32FP(int32_t y1, int32_t y2, uint8_t *tex_page);
00404300    000014C4    +       void __cdecl Output_WGTMapPersp32FP(int32_t y1, int32_t y2, uint8_t *tex_page);
004057D0    00000037    +       void __cdecl Output_DrawPolyGTMapPersp(const int16_t *obj_ptr);
00405810    00000037    +       void __cdecl Output_DrawPolyWGTMapPersp(const int16_t *obj_ptr);

# 3dsystem/3dinsert.c
00405850    0000006C    +       int32_t __cdecl Output_VisibleZClip(const struct PHD_VBUF *vtx0, const struct PHD_VBUF *vtx1, const struct PHD_VBUF *vtx2);
004058C0    00000140    +       int32_t __cdecl Output_ZedClipper(int32_t vtx_count, struct POINT_INFO *pts, struct VERTEX_INFO *vtx);
00405A00    00000511    +       int32_t __cdecl Output_XYGUVClipper(int32_t vtx_count, struct VERTEX_INFO *vtx);
00405F20    00000A5C    +       const int16_t *__cdecl Output_InsertObjectGT4(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00406980    00000872    +       const int16_t *__cdecl Output_InsertObjectGT3(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00407200    00000422    +       int32_t __cdecl Output_XYGClipper(int32_t vtx_count, struct VERTEX_INFO *vtx);
00407630    000003D1    +       const int16_t *__cdecl Output_InsertObjectG4(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00407A10    0000031B    +       const int16_t *__cdecl Output_InsertObjectG3(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00407D30    000002D0    +       int32_t __cdecl Output_XYClipper(int32_t vtx_count, struct VERTEX_INFO *vtx);
00408000    000004A4    +       void __cdecl Output_InsertTrans8(const struct PHD_VBUF *vbuf, int16_t shade);
004084B0    000000D3    +       void __cdecl Output_InsertTransQuad(int32_t x, int32_t y, int32_t width, int32_t height, int32_t z);
00408590    000000CB    +       void __cdecl Output_InsertFlatRect(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t z, uint8_t color_idx);
00408660    000000B5    +       void __cdecl Output_InsertLine(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t z, uint8_t color_idx);
00408720    00000642    -       void __cdecl Output_InsertGT3_ZBuffered(const struct PHD_VBUF *vtx0, const struct PHD_VBUF *vtx1, const struct PHD_VBUF *vtx2, const struct PHD_TEXTURE *texture, const struct PHD_UV *uv0, const struct PHD_UV *uv1, const struct PHD_UV *uv2);
00408D70    00000140    -       void __cdecl Output_DrawClippedPoly_Textured(int32_t vtx_count);
00408EB0    00000444    -       void __cdecl Output_InsertGT4_ZBuffered(const struct PHD_VBUF *vtx0, const struct PHD_VBUF *vtx1, const struct PHD_VBUF *vtx2, const struct PHD_VBUF *vtx3, const struct PHD_TEXTURE *texture);
00409300    00000091    +       const int16_t *__cdecl Output_InsertObjectGT4_ZBuffered(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
004093A0    000000AA    +       const int16_t *__cdecl Output_InsertObjectGT3_ZBuffered(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00409450    0000039C    +       const int16_t *__cdecl Output_InsertObjectG4_ZBuffered(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
004097F0    000000F7    -       void __cdecl Output_DrawPoly_Gouraud(int32_t vtx_count, int32_t red, int32_t green, int32_t blue);
004098F0    000002D3    +       const int16_t *__cdecl Output_InsertObjectG3_ZBuffered(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00409BD0    000001C9    -       void __cdecl Output_InsertFlatRect_ZBuffered(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t z, uint8_t color_idx);
00409DA0    00000133    -       void __cdecl Output_InsertLine_ZBuffered(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t z, uint8_t color_idx);
00409EE0    00000706    -       void __cdecl Output_InsertGT3_Sorted(const struct PHD_VBUF *vtx0, const struct PHD_VBUF *vtx1, const struct PHD_VBUF *vtx2, const struct PHD_TEXTURE *texture, const struct PHD_UV *uv0, const struct PHD_UV *uv1, const struct PHD_UV *uv2, enum SORT_TYPE sort_type);
0040A5F0    000001AC    -       void __cdecl Output_InsertClippedPoly_Textured(int32_t vtx_count, float z, int16_t poly_type, int16_t tex_page);
0040A7A0    000004D7    -       void __cdecl Output_InsertGT4_Sorted(const struct PHD_VBUF *vtx0, const struct PHD_VBUF *vtx1, const struct PHD_VBUF *vtx2, const struct PHD_VBUF *vtx3, const struct PHD_TEXTURE *texture, enum SORT_TYPE sort_type);
0040AC80    0000008C    -       const int16_t *__cdecl Output_InsertObjectGT4_Sorted(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
0040AD10    0000009F    -       const int16_t *__cdecl Output_InsertObjectGT3_Sorted(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
0040ADB0    0000043B    -       const int16_t *__cdecl Output_InsertObjectG4_Sorted(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
0040B1F0    00000175    -       void __cdecl Output_InsertPoly_Gouraud(int32_t vtx_count, float z, int32_t red, int32_t green, int32_t blue, int16_t poly_type);
0040B370    00000343    -       const int16_t *__cdecl Output_InsertObjectG3_Sorted(const int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
0040B6C0    00000347    -       void __cdecl Output_InsertSprite_Sorted(int32_t z, int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t sprite_idx, int16_t shade);
0040BA10    0000017F    -       void __cdecl Output_InsertFlatRect_Sorted(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t z, uint8_t color_idx);
0040BB90    0000012B    -       void __cdecl Output_InsertLine_Sorted(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t z, uint8_t color_idx);
0040BCC0    00000195    -       void __cdecl Output_InsertTrans8_Sorted(const struct PHD_VBUF *vbuf, int16_t shade);
0040BE60    0000013D    -       void __cdecl Output_InsertTransQuad_Sorted(int32_t x, int32_t y, int32_t width, int32_t height, int32_t z);
0040BFA0    000000A7    -       void __cdecl Output_InsertSprite(int32_t z, int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t sprite_idx, int16_t shade);

# 3dsystem/scalespr.c
0040C050    000002C7    -       void __cdecl Output_DrawSprite(uint32_t flags, int32_t x, int32_t y, int32_t z, int16_t sprite_idx, int16_t shade, int16_t scale);
0040C320    00000085    -       void __cdecl Output_DrawPickup(int32_t sx, int32_t sy, int32_t scale, int16_t sprite_idx, int16_t shade);
0040C3B0    00000152    -       const int16_t *__cdecl Output_InsertRoomSprite(const int16_t *obj_ptr, int32_t vtx_count);
0040C510    00000096    -       void __cdecl Output_DrawScreenSprite2D(int32_t sx, int32_t sy, int32_t sz, int32_t scale_h, int32_t scale_v, int16_t sprite_idx, int16_t shade, uint16_t flags);
0040C5B0    0000009D    -       void __cdecl Output_DrawScreenSprite(int32_t sx, int32_t sy, int32_t sz, int32_t scale_h, int32_t scale_v, int16_t sprite_idx, int16_t shade, uint16_t flags);
0040C650    00000223    -       void __cdecl Output_DrawScaledSpriteC(const int16_t *obj_ptr);

# game/bird.c
0040C880    00000089    -       void __cdecl Eagle_Initialise(int16_t item_num);
0040C910    00000200    -       void __cdecl Eagle_Control(int16_t item_num);

# game/boat.c
0040CB30    0000003C    -       void __cdecl Boat_Initialise(int16_t item_num);
0040CB70    00000170    -       int32_t __cdecl Boat_CheckGeton(int16_t item_num, struct COLL_INFO *coll);
0040CCE0    0000015E    -       void __cdecl Boat_Collision(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
0040CE40    000000F8    -       int32_t __cdecl Boat_TestWaterHeight(struct ITEM_INFO *item, int32_t z_off, int32_t x_off, struct PHD_VECTOR *pos);
0040CF40    000001C1    -       void __cdecl Boat_DoShift(int32_t boat_num);
0040D110    00000174    -       void __cdecl Boat_DoWakeEffect(struct ITEM_INFO *boat);
0040D290    0000004B    -       int32_t __cdecl Boat_DoDynamics(int32_t height, int32_t fall_speed, int32_t *y);
0040D2E0    000004DD    -       int32_t __cdecl Boat_Dynamics(int16_t boat_num);
0040D7C0    00000187    -       int32_t __cdecl Boat_UserControl(struct ITEM_INFO *boat);
0040D950    00000169    -       void __cdecl Boat_Animation(struct ITEM_INFO *boat, int32_t collide);
0040DAC0    0000062A    -       void __cdecl Boat_Control(int16_t item_num);
0040E0F0    000000B3    -       void __cdecl Gondola_Control(int16_t item_num);

# game/box.c
0040E1B0    0000002F    -       void __cdecl Creature_Initialise(int16_t item_num);
0040E1E0    00000047    -       int32_t __cdecl Creature_Activate(int16_t item_num);
0040E230    00000242    -       void __cdecl Creature_AIInfo(struct ITEM_INFO *item, struct AI_INFO *info);
0040E490    000001F3    -       int32_t __cdecl Box_SearchLOT(struct LOT_INFO *lot, int32_t expansion);
0040E690    0000006F    -       int32_t __cdecl Box_UpdateLOT(struct LOT_INFO *lot, int32_t expansion);
0040E700    00000095    -       void __cdecl Box_TargetBox(struct LOT_INFO *lot, int16_t box_num);
0040E7A0    000000F2    -       int32_t __cdecl Box_StalkBox(struct ITEM_INFO *item, struct ITEM_INFO *enemy, int16_t box_num);
0040E8A0    000000A4    -       int32_t __cdecl Box_EscapeBox(struct ITEM_INFO *item, struct ITEM_INFO *enemy, int16_t box_num);
0040E950    000000A7    -       int32_t __cdecl Box_ValidBox(struct ITEM_INFO *item, int16_t zone_num, int16_t box_num);
0040EA00    0000043F    -       void __cdecl CreatureMood(struct ITEM_INFO *item, struct AI_INFO *info, int32_t violent);
0040EE70    00000459    -       enum TARGET_TYPE __cdecl Box_CalculateTarget(struct PHD_VECTOR *target, struct ITEM_INFO *item, struct LOT_INFO *lot);
0040F2D0    000000F8    -       int32_t __cdecl Creature_CheckBaddieOverlap(int16_t item_num);
0040F3D0    0000008B    -       int32_t __cdecl Box_BadFloor(int32_t x, int32_t y, int32_t z, int32_t box_height, int32_t next_height, int16_t room_num, struct LOT_INFO *lot);
0040F460    000000B8    -       void __cdecl Creature_Die(int16_t item_num, int32_t explode);
0040F520    000008CC    -       int32_t __cdecl Creature_Animate(int16_t item_num, int16_t angle, int16_t tilt);
0040FDF0    000000D5    -       int16_t __cdecl Creature_Turn(struct ITEM_INFO *item, int16_t maximum_turn);
0040FED0    00000035    -       void __cdecl Creature_Tilt(struct ITEM_INFO *item, int16_t angle);
0040FF10    00000049    -       void __cdecl Creature_Head(struct ITEM_INFO *item, int16_t required);
0040FF60    0000004E    -       void __cdecl Creature_Neck(struct ITEM_INFO *item, int16_t required);
0040FFB0    000000A8    -       void __cdecl Creature_Float(int16_t item_num);
00410060    00000050    -       void __cdecl Creature_Underwater(struct ITEM_INFO *item, int32_t depth);
004100B0    0000005C    -       int16_t __cdecl Creature_Effect(struct ITEM_INFO *item, struct BITE_INFO *bite, int16_t (*spawn)(int32_t x, int32_t y, int32_t z, int16_t speed, int16_t y_rot, int16_t room_num));
00410110    00000131    -       int32_t __cdecl Creature_Vault(int16_t item_num, int16_t angle, int32_t vault, int32_t shift);
00410250    0000016F    -       void __cdecl Creature_Kill(struct ITEM_INFO *item, int32_t kill_anim, int32_t kill_state, int32_t lara_kill_state);
004103C0    000001DB    -       void __cdecl Creature_GetBaddieTarget(int16_t item_num, int32_t goody);

# game/camera.c
004105A0    000000B0    +       void __cdecl Camera_Initialise(void);
00410650    00000372    +       void __cdecl Camera_Move(const struct GAME_VECTOR *target, int32_t speed);
004109D0    000000D7    +       void __cdecl Camera_Clip(int32_t *x, int32_t *y, int32_t *h, int32_t target_x, int32_t target_y, int32_t target_h, int32_t left, int32_t top, int32_t right, int32_t bottom);
00410AB0    00000154    +       void __cdecl Camera_Shift(int32_t *x, int32_t *y, int32_t *h, int32_t target_x, int32_t target_y, int32_t target_h, int32_t left, int32_t top, int32_t right, int32_t bottom);
00410C10    00000050    +       const struct FLOOR_INFO *__cdecl Camera_GoodPosition(int32_t x, int32_t y, int32_t z, int16_t room_num);
00410C60    00000781    +       void __cdecl Camera_SmartShift(struct GAME_VECTOR *target, void (*__cdecl shift)(int32_t *x, int32_t *y, int32_t *h, int32_t target_x, int32_t target_y, int32_t target_h, int32_t left, int32_t top, int32_t right, int32_t bottom));
004113F0    000000ED    +       void __cdecl Camera_Chase(const struct ITEM_INFO *item);
004114E0    0000019E    +       int32_t __cdecl Camera_ShiftClamp(struct GAME_VECTOR *pos, int32_t clamp);
00411680    0000018E    +       void __cdecl Camera_Combat(const struct ITEM_INFO *item);
00411810    000001E2    +       void __cdecl Camera_Look(const struct ITEM_INFO *item);
00411A00    00000099    +       void __cdecl Camera_Fixed(void);
00411AA0    000004A9    +       void __cdecl Camera_Update(void);

# game/cinema.c
00411F50    0000000A    -       void __cdecl Game_SetCutsceneTrack(int32_t track);
00411F60    00000112    -       int32_t __cdecl Game_Cutscene_Start(int32_t level_num);
00412080    00000093    -R      void __cdecl Misc_InitCinematicRooms(void);
00412120    0000016F    -       int32_t __cdecl Game_Cutscene_Control(int32_t nframes);
00412290    00000138    +       void __cdecl Camera_UpdateCutscene(void);
004123D0    0000007F    -R      int32_t __cdecl Room_FindByPos(int32_t x, int32_t y, int32_t z);
00412450    000000DC    -       void __cdecl CutscenePlayer_Control(int16_t item_num);
00412530    00000096    -       void __cdecl Lara_Control_Cutscene(int16_t item_num);
004125D0    0000008F    -R      void __cdecl CutscenePlayer1_Initialise(int16_t item_num);
00412660    00000033    -R      void __cdecl CutscenePlayerGen_Initialise(int16_t item_num);
004126A0    00000245    +       void __cdecl Camera_LoadCutsceneFrame(void);

# game/collide.c
004128F0    0000067C    -       void __cdecl Collide_GetCollisionInfo(struct COLL_INFO *coll, int32_t xpos, int32_t ypos, int32_t zpos, int16_t room_num, int32_t obj_height);
00412FB0    0000002F    -       int32_t __cdecl Room_FindGridShift(int32_t src, int32_t dst);
00412FE0    000003D2    -       int32_t __cdecl Collide_CollideStaticObjects(struct COLL_INFO *coll, int32_t x, int32_t y, int32_t z, int16_t room_num, int32_t hite);
004133D0    000000C8    -       void __cdecl Room_GetNearbyRooms(int32_t x, int32_t y, int32_t z, int32_t r, int32_t h, int16_t room_num);
004134A0    00000055    -       void __cdecl Room_GetNewRoom(int32_t x, int32_t y, int32_t z, int16_t room_num);
00413500    00000037    -       void __cdecl Item_ShiftCol(struct ITEM_INFO *item, struct COLL_INFO *coll);
00413540    0000005D    -       void __cdecl Item_UpdateRoom(struct ITEM_INFO *item, int32_t height);
004135A0    00000099    -       int16_t __cdecl Room_GetTiltType(struct FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
00413640    00000195    -       void __cdecl Lara_BaddieCollision(struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
004137E0    00000079    -R      void __cdecl Misc_EffectSpaz(struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
00413860    00000078    -       void __cdecl Creature_Collision(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
004138E0    00000055    -       void __cdecl Object_Collision(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
00413940    00000077    -       void __cdecl Door_Collision(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
004139C0    00000067    -       void __cdecl Object_CollisionTrap(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
00413A30    00000306    -       void __cdecl Lara_Push(struct ITEM_INFO *item, struct ITEM_INFO *lara_item, struct COLL_INFO *coll, int32_t spaz_on, int32_t big_push);
00413D40    000000CB    -       int32_t __cdecl Item_TestBoundsCollide(struct ITEM_INFO *src_item, struct ITEM_INFO *dst_item, int32_t radius);
00413E10    00000137    -       int32_t __cdecl Item_TestPosition(int16_t *bounds, struct ITEM_INFO *src_item, struct ITEM_INFO *dst_item);
00413F50    0000013B    -       void __cdecl Item_AlignPosition(struct PHD_VECTOR *vec, struct ITEM_INFO *src_item, struct ITEM_INFO *dst_item);
00414090    00000187    -       int32_t __cdecl Lara_MovePosition(struct PHD_VECTOR *vec, struct ITEM_INFO *item, struct ITEM_INFO *lara_item);
00414220    0000016E    -R      int32_t __cdecl Misc_Move3DPosTo3DPos(struct PHD_3DPOS *src_pos, struct PHD_3DPOS *dest_pos, int32_t velocity, PHD_ANGLE ang_add);

# game/control.c
00414390    00000356    -       int32_t __cdecl Game_Control(int32_t nframes, int32_t demo_mode);
004146F0    00000338    -       void __cdecl Item_Animate(struct ITEM_INFO *item);
00414A60    000000AB    -       int32_t __cdecl Item_GetAnimChange(struct ITEM_INFO *item, struct ANIM_STRUCT *anim);
00414B10    0000005F    -       void __cdecl Item_Translate(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z);
00414B70    00000198    *       struct FLOOR_INFO *__cdecl Room_GetFloor(int32_t x, int32_t y, int32_t z, int16_t *room_num);
00414D10    00000168    -       int32_t __cdecl Room_GetWaterHeight(int32_t x, int32_t y, int32_t z, int16_t room_num);
00414E80    00000265    *       int32_t __cdecl Room_GetHeight(const struct FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
00415100    000000E7    -       void __cdecl Camera_RefreshFromTrigger(int16_t type, int16_t *data);
004151F0    00000690    -       void __cdecl Room_TestTriggers(int16_t *data, int32_t heavy);
004158D0    00000055    -       int32_t __cdecl Item_IsTriggerActive(struct ITEM_INFO *item);
00415930    0000023D    *       int32_t __cdecl Room_GetCeiling(const struct FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
00415B90    0000004E    -       int16_t __cdecl Room_GetDoor(struct FLOOR_INFO *floor);
00415BE0    000000A0    +       int32_t __cdecl LOS_Check(const struct GAME_VECTOR *start, struct GAME_VECTOR *target);
00415C80    000002EB    +       int32_t __cdecl LOS_CheckZ(const struct GAME_VECTOR *start, struct GAME_VECTOR *target);
00415F70    000002EC    +       int32_t __cdecl LOS_CheckX(const struct GAME_VECTOR *start, struct GAME_VECTOR *target);
00416260    000000DA    +       int32_t __cdecl LOS_ClipTarget(const struct GAME_VECTOR *start, struct GAME_VECTOR *target, const FLOOR_INFO *floor);
00416340    000002FE    +       int32_t __cdecl LOS_CheckSmashable(const struct GAME_VECTOR *start, struct GAME_VECTOR *target);
00416640    000000B3    -       void __cdecl Room_FlipMap(void);
00416700    00000096    -       void __cdecl Room_RemoveFlipItems(struct ROOM_INFO *r);
004167A0    0000005C    -       void __cdecl Room_AddFlipItems(struct ROOM_INFO *r);
00416800    00000024    -       void __cdecl Control_TriggerMusicTrack(int16_t value, int16_t flags, int16_t type);
00416830    000000DA    -       void __cdecl Control_TriggerMusicNormalTrack(int16_t value, int16_t flags, int16_t type);

# game/demo.c
00416910    00000059    -       int32_t __cdecl Demo_Control(int32_t level_num);
00416970    000001B0    -       int32_t __cdecl Demo_Start(int32_t level_num);
00416B20    000000CD    -       void __cdecl Demo_LoadLaraPos(void);
00416BF0    0000002D    -       void __cdecl Demo_GetInput(void);

# game/diver.c
00416C20    0000007A    -       int16_t __cdecl Diver_Harpoon(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE y_rot, int16_t room_num);
00416CA0    00000106    -       int32_t __cdecl Diver_GetWaterSurface(int32_t x, int32_t y, int32_t z, int16_t room_num);
00416DB0    00000389    -       void __cdecl Diver_Control(int16_t item_num);

# game/dog.c
00417160    00000387    -       void __cdecl Dog_Control(int16_t item_num);
00417510    0000027E    -       void __cdecl Tiger_Control(int16_t item_num);

# game/dragon.c
004177B0    0000017F    -R      void __cdecl ControlTwinkle(int16_t fx_num);
00417930    000000D9    -R      void __cdecl CreateBartoliLight(int16_t item_num);
00417A10    000000AB    -R      int16_t __cdecl DragonFire(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
00417AC0    000002ED    -R      void __cdecl DragonCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00417DB0    000000D9    -R      void __cdecl DragonBones(int16_t item_num);
00417E90    00000519    -R      void __cdecl DragonControl(int16_t back_num);
004183E0    00000114    -R      void __cdecl InitialiseBartoli(int16_t item_num);
00418500    00000193    -R      void __cdecl BartoliControl(int16_t item_num);
004186A0    00000287    -R      void __cdecl DinoControl(int16_t item_num);

# game/draw.c
00418950    00000037    -       int32_t __cdecl Game_DrawCinematic(void);
00418990    00000037    -       int32_t __cdecl Game_Draw(void);
004189D0    000002B0    -       void __cdecl Room_DrawAllRooms(int16_t current_room);
00418C80    000001C6    -       void __cdecl Room_GetBounds(void);
00418E50    0000037F    -       void __cdecl Room_SetBounds(int16_t *objptr, int32_t room_num, ROOM_INFO *parent);
004191D0    000003D2    -       void __cdecl Room_Clip(struct ROOM_INFO *r);
004195B0    000000B4    -       void __cdecl Room_DrawSingleRoomGeometry(int16_t room_num);
00419670    00000218    -       void __cdecl Room_DrawSingleRoomObjects(int16_t room_num);
00419890    00000147    -       void __cdecl Effect_Draw(int16_t fx_num);
004199E0    00000083    -       void __cdecl Object_DrawSpriteItem(struct ITEM_INFO *item);
00419A70    00000378    -       void __cdecl Object_DrawAnimatingItem(struct ITEM_INFO *item);
00419DF0    00000D02    -       void __cdecl Lara_Draw(struct ITEM_INFO *item);
0041AB20    00000BC6    -       void __cdecl Lara_Draw_I(struct ITEM_INFO *item, int16_t *frame1, int16_t *frame2, int32_t frac, int32_t rate);
0041B710    00000034    +       void __cdecl Matrix_InitInterpolate(int32_t frac, int32_t rate);
0041B750    00000022    +       void __cdecl Matrix_Pop_I(void);
0041B780    00000027    +       void __cdecl Matrix_Push_I(void);
0041B7B0    00000031    +       void __cdecl Matrix_RotY_I(int16_t ang);
0041B7F0    00000031    +       void __cdecl Matrix_RotX_I(int16_t ang);
0041B830    00000031    +       void __cdecl Matrix_RotZ_I(int16_t ang);
0041B870    00000041    +       void __cdecl Matrix_TranslateRel_I(int32_t x, int32_t y, int32_t z);
0041B8C0    00000047    +       void __cdecl Matrix_TranslateRel_ID(int32_t x, int32_t y, int32_t z, int32_t x2, int32_t y2, int32_t z2);
0041B910    00000041    +       void __cdecl Matrix_RotYXZ_I(int16_t y, int16_t x, int16_t z);
0041B960    0000003D    +       void __cdecl Matrix_RotYXZsuperpack_I(int16_t **pprot1, int16_t **pprot2, int32_t skip);
0041B9A0    000000A1    +       void __cdecl Matrix_RotYXZsuperpack(int16_t **pprot, int32_t skip);
0041BA50    0000002A    -       void __cdecl Output_InsertPolygons_I(int16_t *ptr, int32_t clip);
0041BA80    000001A5    +       void __cdecl Matrix_Interpolate(void);
0041BC30    000000FC    +       void __cdecl Matrix_InterpolateArm(void);
0041BD30    0000014B    -       void __cdecl Gun_DrawFlash(int32_t weapon_type, int32_t clip);
0041BEA0    000000E8    -       void __cdecl Output_CalculateObjectLighting(struct ITEM_INFO *item, int16_t *frame);
0041BF90    00000092    *       int32_t __cdecl Item_GetFrames(struct ITEM_INFO *item, int16_t *frmptr[], int32_t *rate);
0041C030    0000007C    *       int16_t *__cdecl Item_GetBoundsAccurate(const struct ITEM_INFO *item);
0041C0B0    00000035    -       int16_t *__cdecl Item_GetBestFrame(struct ITEM_INFO *item);
0041C0F0    00000048    -R      void __cdecl AddDynamicLight(int32_t x, int32_t y, int32_t z, int32_t intensity, int32_t falloff);

# game/eel.c
0041C140    0000019D    -R      void __cdecl BigEelControl(int16_t item_num);
0041C2E0    000001E1    -R      void __cdecl EelControl(int16_t item_num);

# game/effects.c
0041C4D0    0000008C    -R      int32_t __cdecl ItemNearLara(struct PHD_3DPOS *pos, int32_t distance);
0041C560    00000068    -       void __cdecl Sound_Update(void);
0041C5D0    00000059    -R      int16_t __cdecl DoBloodSplat(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE direction, int16_t room_num);
0041C630    000000A4    -R      void __cdecl DoLotsOfBlood(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE direction, int16_t room_num, int32_t num);
0041C6E0    00000082    -R      void __cdecl ControlBlood1(int16_t fx_num);
0041C770    0000007F    -R      void __cdecl ControlExplosion1(int16_t fx_num);
0041C7F0    00000072    -R      void __cdecl Richochet(struct GAME_VECTOR *pos);
0041C870    00000030    -R      void __cdecl ControlRichochet1(int16_t fx_num);
0041C8A0    00000064    -R      void __cdecl CreateBubble(struct PHD_3DPOS *pos, int16_t room_num);
0041C910    00000078    -R      void __cdecl LaraBubbles(struct ITEM_INFO *item);
0041C990    000000F3    -R      void __cdecl ControlBubble1(int16_t fx_num);
0041CA90    000000C2    -R      void __cdecl Splash(struct ITEM_INFO *item);
0041CB60    00000071    -R      void __cdecl ControlSplash1(int16_t fx_num);
0041CBE0    000000AE    -R      void __cdecl ControlWaterSprite(int16_t fx_num);
0041CD20    000000DE    -R      void __cdecl ControlHotLiquid(int16_t fx_num);
0041CF40    0000000B    -R      void __cdecl finish_level_effect(struct ITEM_INFO *item);
0041CF50    00000016    -R      void __cdecl turn180_effect(struct ITEM_INFO *item);
0041CF70    00000096    -R      void __cdecl floor_shake_effect(struct ITEM_INFO *item);
0041D010    00000040    -R      void __cdecl lara_normal_effect(struct ITEM_INFO *item);
0041D050    0000001C    -R      void __cdecl BoilerFX(struct ITEM_INFO *item);
0041D070    0000008F    -R      void __cdecl FloodFX(struct ITEM_INFO *item);
0041D100    00000023    -R      void __cdecl RubbleFX(struct ITEM_INFO *item);
0041D130    0000002C    -R      void __cdecl ChandelierFX(struct ITEM_INFO *item);
0041D160    00000023    -R      void __cdecl ExplosionFX(struct ITEM_INFO *item);
0041D190    0000001C    -R      void __cdecl PistonFX(struct ITEM_INFO *item);
0041D1B0    0000001C    -R      void __cdecl CurtainFX(struct ITEM_INFO *item);
0041D1D0    0000001C    -R      void __cdecl StatueFX(struct ITEM_INFO *item);
0041D1F0    0000001C    -R      void __cdecl SetChangeFX(struct ITEM_INFO *item);
0041D290    00000067    -R      void __cdecl ControlAlarmSound(int16_t item_num);
0041D300    0000005D    -R      void __cdecl ControlBirdTweeter(int16_t item_num);
0041D360    00000059    -R      void __cdecl DoChimeSound(struct ITEM_INFO *item);
0041D3C0    00000068    -R      void __cdecl ControlClockChimes(int16_t item_num);
0041D430    00000128    -R      void __cdecl SphereOfDoomCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
0041D560    000000F0    -R      void __cdecl SphereOfDoom(int16_t item_num);
0041D650    0000012D    -R      void __cdecl DrawSphereOfDoom(struct ITEM_INFO *item);
0041D780    0000000A    -R      void __cdecl lara_hands_free(struct ITEM_INFO *item);
0041D790    00000005    -R      void __cdecl flip_map_effect(struct ITEM_INFO *item);
0041D7A0    00000043    -R      void __cdecl draw_right_gun(struct ITEM_INFO *item);
0041D7F0    00000043    -R      void __cdecl draw_left_gun(struct ITEM_INFO *item);
0041D840    00000063    -R      void __cdecl swap_meshes_with_meshswap1(struct ITEM_INFO *item);
0041D8B0    00000063    -R      void __cdecl swap_meshes_with_meshswap2(struct ITEM_INFO *item);
0041D920    0000009A    -R      void __cdecl swap_meshes_with_meshswap3(struct ITEM_INFO *item);
0041D9C0    00000009    -R      void __cdecl invisibility_on(struct ITEM_INFO *item);
0041D9D0    00000016    -R      void __cdecl invisibility_off(struct ITEM_INFO *item);
0041D9F0    00000009    -R      void __cdecl dynamic_light_on(struct ITEM_INFO *item);
0041DA00    0000000B    -R      void __cdecl dynamic_light_off(struct ITEM_INFO *item);
0041DA10    00000005    -R      void __cdecl reset_hair(struct ITEM_INFO *item);
0041DA20    00000024    -R      void __cdecl AssaultStart(struct ITEM_INFO *item);
0041DA50    0000001F    -R      void __cdecl AssaultStop(struct ITEM_INFO *item);
0041DA70    00000017    -R      void __cdecl AssaultReset(struct ITEM_INFO *item);
0041DA90    000000B2    -R      void __cdecl AssaultFinished(struct ITEM_INFO *item);

# game/enemies.c
0041DB50    00000076    -R      int16_t __cdecl Knife(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
0041DBD0    0000040B    -R      void __cdecl Cult2Control(int16_t item_num);
0041E000    000004A1    -R      void __cdecl MonkControl(int16_t item_num);
0041E4D0    000005BD    -R      void __cdecl Worker3Control(int16_t item_num);
0041EAE0    000003F7    -R      void __cdecl DrawXianLord(struct ITEM_INFO *item);
0041EEE0    000000A8    -R      void __cdecl XianDamage(struct ITEM_INFO *item, CREATURE_INFO *xian, int32_t damage);
0041EF90    00000058    -R      void __cdecl InitialiseXianLord(int16_t item_num);
0041EFF0    00000590    -R      void __cdecl XianLordControl(int16_t item_num);
0041F5D0    00000098    -R      void __cdecl WarriorSparkleTrail(struct ITEM_INFO *item);
0041F670    000003BA    -R      void __cdecl WarriorControl(int16_t item_num);

# game/gameflow.c
0041FA60    000001E9    -R      int32_t __cdecl GF_LoadScriptFile(char *fname);
0041FC50    0000001F    -R      int32_t __cdecl GF_DoFrontEndSequence(void);
0041FC70    00000066    -R      int32_t __cdecl GF_DoLevelSequence(int32_t level, int32_t type);
0041FCE0    0000047C    -R      int32_t __cdecl GF_InterpretSequence(int16_t *ptr, int32_t type, int32_t seq_type);
004201C0    00000CD3    -R      void __cdecl GF_ModifyInventory(int32_t level, int32_t type);

# game/hair.c
00420EA0    00000074    -R      void __cdecl InitialiseHair(void);
00420F20    000009E5    -R      void __cdecl HairControl(int32_t in_cutscene);
00421920    00000076    -R      void __cdecl DrawHair(void);

# game/health.c
004219A0    0000002D    -R      int32_t __cdecl FlashIt(void);
004219D0    00000145    -R      void __cdecl DrawAssaultTimer(void);
00421B20    00000045    -R      void __cdecl DrawGameInfo(int32_t timed);
00421B70    000000AB    -R      void __cdecl DrawHealthBar(int32_t flash_state);
00421C20    00000097    -R      void __cdecl DrawAirBar(int32_t flash_state);
00421CC0    00000028    -R      void __cdecl MakeAmmoString(char *string);
00421CF0    00000132    -R      void __cdecl DrawAmmoInfo(void);
00421E40    00000015    -R      void __cdecl InitialisePickUpDisplay(void);
00421E60    000000FD    -R      void __cdecl DrawPickups(int32_t timed);
00421F60    0000006C    -R      void __cdecl AddDisplayPickup(int16_t obj_num);
00421FD0    0000007A    *R      void __cdecl DisplayModeInfo(char* string);
00422050    0000002C    -R      void __cdecl DrawModeInfo(void);

# game/inventory.c
00422080    0000119E    -R      int32_t __cdecl Display_Inventory(int32_t inventory_mode);
00423310    00000156    -R      void __cdecl Construct_Inventory(void);
00423470    00000089    -R      void __cdecl SelectMeshes(struct INVENTORY_ITEM *inv_item);
00423500    00000081    -R      int32_t __cdecl AnimateInventoryItem(struct INVENTORY_ITEM *inv_item);
00423590    0000041D    -R      void __cdecl DrawInventoryItem(struct INVENTORY_ITEM *inv_item);
004239C0    00000019    -R      int32_t __cdecl GetDebouncedInput(int32_t input);
004239E0    00000005    -R      void __cdecl DoInventoryPicture(void);
004239F0    00000132    -R      void __cdecl DoInventoryBackground(void);

# game/invfunc.c
00423B30    0000010A    -R      void __cdecl InitColours(void);
00423C40    00000167    -R      void __cdecl RingIsOpen(struct RING_INFO *ring);
00423DB0    00000081    -R      void __cdecl RingIsNotOpen(struct RING_INFO *ring);
00423E40    00000369    -R      void __cdecl RingNotActive(struct INVENTORY_ITEM *inv_item);
004242B0    00000032    -R      void __cdecl RingActive(void);
004242F0    000006BE    -R      int32_t __cdecl Inv_AddItem(int32_t itemNum);
00424B00    00000129    -R      void __cdecl Inv_InsertItem(struct INVENTORY_ITEM *inv_item);
00424C30    00000077    -R      int32_t __cdecl Inv_RequestItem(int32_t itemNum);
00424CB0    0000001B    -R      void __cdecl Inv_RemoveAllItems(void);
00424CD0    00000110    -R      int32_t __cdecl Inv_RemoveItem(int32_t itemNum);
00424DE0    000000C1    -R      int32_t __cdecl Inv_GetItemOption(int32_t itemNum);
00424FD0    00000024    -R      void __cdecl RemoveInventoryText(void);
00425000    0000010F    -R      void __cdecl Inv_RingInit(struct RING_INFO *ring, int16_t type, struct INVENTORY_ITEM **list, int16_t qty, int16_t current, struct IMOTION_INFO *imo);
00425110    00000060    -R      void __cdecl Inv_RingGetView(struct RING_INFO *ring, struct PHD_3DPOS *viewer);
00425170    00000040    -R      void __cdecl Inv_RingLight(struct RING_INFO *ring);
004251B0    0000002C    -R      void __cdecl Inv_RingCalcAdders(struct RING_INFO *ring, int16_t rotation_duration);
004251E0    0000013E    -R      void __cdecl Inv_RingDoMotions(struct RING_INFO *ring);
00425320    0000002F    -R      void __cdecl Inv_RingRotateLeft(struct RING_INFO *ring);
00425350    0000002F    -R      void __cdecl Inv_RingRotateRight(struct RING_INFO *ring);
00425380    00000063    -R      void __cdecl Inv_RingMotionInit(struct RING_INFO *ring, int16_t frames, int16_t status, int16_t status_target);
004253F0    0000002C    -R      void __cdecl Inv_RingMotionSetup(struct RING_INFO *ring, int16_t status, int16_t status_target, int16_t frames);
00425420    00000026    -R      void __cdecl Inv_RingMotionRadius(struct RING_INFO *ring, int16_t target);
00425450    00000022    -R      void __cdecl Inv_RingMotionRotation(struct RING_INFO *ring, int16_t rotation, int16_t target);
00425480    00000025    -R      void __cdecl Inv_RingMotionCameraPos(struct RING_INFO *ring, int16_t target);
004254B0    00000020    -R      void __cdecl Inv_RingMotionCameraPitch(struct RING_INFO *ring, int16_t target);
004254D0    0000005D    -R      void __cdecl Inv_RingMotionItemSelect(struct RING_INFO *ring, struct INVENTORY_ITEM *inv_item);
00425530    00000063    -R      void __cdecl Inv_RingMotionItemDeselect(struct RING_INFO *ring, struct INVENTORY_ITEM *inv_item);

# game/invtext.c
004255A0    00000082    -R      void __cdecl Init_Requester(struct REQUEST_INFO *req);
00425630    000000A3    -R      void __cdecl Remove_Requester(struct REQUEST_INFO *req);
004256E0    0000001B    -R      void __cdecl ReqItemCentreAlign(struct REQUEST_INFO *req, struct TEXTSTRING *txt);
00425700    00000054    -R      void __cdecl ReqItemLeftalign(struct REQUEST_INFO *req, struct TEXTSTRING *txt);
00425760    00000056    -R      void __cdecl ReqItemRightalign(struct REQUEST_INFO *req, struct TEXTSTRING *txt);
004257C0    00000866    -R      int32_t __cdecl Display_Requester(struct REQUEST_INFO *req, int32_t des, int32_t backgrounds);
00426030    000000AA    -R      void __cdecl SetRequesterHeading(struct REQUEST_INFO *req, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
004260E0    00000013    -R      void __cdecl RemoveAllReqItems(struct REQUEST_INFO *req);
00426100    000000C0    -R      void __cdecl ChangeRequesterItem(struct REQUEST_INFO *req, int32_t item, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
004261C0    000000AC    -R      void __cdecl AddRequesterItem(struct REQUEST_INFO *req, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
00426270    00000039    -R      void __cdecl SetPCRequesterSize(struct REQUEST_INFO *req, int32_t maxlines, int32_t ypos);
004262B0    00000081    -R      int32_t __cdecl AddAssaultTime(uint32_t time);
00426340    000001D6    -R      void __cdecl ShowGymStatsText(char *time_str, int32_t type);
00426520    00000397    -R      void __cdecl ShowStatsText(char *time_str, int32_t type);
004268C0    00000425    -R      void __cdecl ShowEndStatsText(void);

# game/items.c
00426CF0    00000052    +       void __cdecl Item_InitialiseArray(int32_t num_items);
00426D50    0000011E    +       void __cdecl Item_Kill(int16_t item_num);
00426E70    00000039    +       int16_t __cdecl Item_Create(void);
00426EB0    000001B3    +       void __cdecl Item_Initialise(int16_t item_num);
00427070    0000008A    +       void __cdecl Item_RemoveActive(int16_t item_num);
00427100    0000006F    +       void __cdecl Item_RemoveDrawn(int16_t item_num);
00427170    0000005A    +       void __cdecl Item_AddActive(int16_t item_num);
004271D0    0000009C    +       void __cdecl Item_NewRoom(int16_t item_num, int16_t room_num);
00427270    0000007C    +       int32_t __cdecl Item_GlobalReplace(int32_t src_object_num, int32_t dst_object_num);
004272F0    00000030    +       void __cdecl Effect_InitialiseArray(void);
00427320    0000006C    +       int16_t __cdecl Effect_Create(int16_t room_num);
00427390    000000E3    +       void __cdecl Effect_Kill(int16_t fx_num);
00427480    00000093    +       void __cdecl Effect_NewRoom(int16_t fx_num, int16_t room_num);
00427520    00000058    +       void __cdecl Item_ClearKilled(void);

# game/lara.c
00427580    00000195    +       void __cdecl Lara_HandleAboveWater(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427720    00000066    +       void __cdecl Lara_LookUpDown(void);
00427790    00000072    +       void __cdecl Lara_LookLeftRight(void);
00427810    00000089    +       void __cdecl Lara_ResetLook(void);
004278A0    0000008B    +       void __cdecl Lara_State_Walk(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427930    00000143    +       void __cdecl Lara_State_Run(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427A80    00000148    +       void __cdecl Lara_State_Stop(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427BD0    000000D3    +       void __cdecl Lara_State_ForwardJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427CB0    00000057    +       void __cdecl Lara_State_FastBack(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427D10    0000008A    +       void __cdecl Lara_State_TurnRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427DA0    00000089    +       void __cdecl Lara_State_TurnLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427E30    00000014    +       void __cdecl Lara_State_Death(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427E50    00000040    +       void __cdecl Lara_State_FastFall(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427E90    00000058    +       void __cdecl Lara_State_Hang(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427EF0    0000001C    +       void __cdecl Lara_State_Reach(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427F10    0000000A    +       void __cdecl Lara_State_Splat(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427F20    0000010C    +       void __cdecl Lara_State_Compress(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428030    00000084    +       void __cdecl Lara_State_Back(struct ITEM_INFO *item, struct COLL_INFO *coll);
004280C0    0000000B    +       void __cdecl Lara_State_Null(struct ITEM_INFO *item, struct COLL_INFO *coll);
004280D0    0000004B    +       void __cdecl Lara_State_FastTurn(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428120    0000007C    +       void __cdecl Lara_State_StepRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
004281A0    0000007C    +       void __cdecl Lara_State_StepLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428220    0000002B    +       void __cdecl Lara_State_Slide(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428250    0000004A    +       void __cdecl Lara_State_BackJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
004282A0    00000033    +       void __cdecl Lara_State_RightJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
004282E0    00000033    +       void __cdecl Lara_State_LeftJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428320    00000013    +       void __cdecl Lara_State_UpJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428340    0000002C    +       void __cdecl Lara_State_Fallback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428370    00000035    +       void __cdecl Lara_State_HangLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
004283B0    00000035    +       void __cdecl Lara_State_HangRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
004283F0    00000018    +       void __cdecl Lara_State_SlideBack(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428410    00000030    +       void __cdecl Lara_State_PushBlock(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428440    00000027    +       void __cdecl Lara_State_PPReady(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428470    00000030    +       void __cdecl Lara_State_Pickup(struct ITEM_INFO *item, struct COLL_INFO *coll);
004284A0    00000058    +       void __cdecl Lara_State_PickupFlare(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428500    00000039    +       void __cdecl Lara_State_SwitchOn(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428540    00000030    +       void __cdecl Lara_State_UseKey(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428570    0000001D    +       void __cdecl Lara_State_Special(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428590    0000002F    +       void __cdecl Lara_State_SwanDive(struct ITEM_INFO *item, struct COLL_INFO *coll);
004285C0    00000054    +       void __cdecl Lara_State_FastDive(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428620    00000015    +       void __cdecl Lara_State_WaterOut(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428640    000000CA    +       void __cdecl Lara_State_Wade(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428710    00000096    +       void __cdecl Lara_State_DeathSlide(struct ITEM_INFO *item, struct COLL_INFO *coll);
004287B0    0000004C    +       void __cdecl Lara_State_Extra_Breath(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428800    00000047    +       void __cdecl Lara_State_Extra_YetiKill(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428850    00000091    +       void __cdecl Lara_State_Extra_SharkKill(struct ITEM_INFO *item, struct COLL_INFO *coll);
004288F0    00000013    +       void __cdecl Lara_State_Extra_Airlock(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428910    0000001D    +       void __cdecl Lara_State_Extra_GongBong(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428930    00000051    +       void __cdecl Lara_State_Extra_DinoKill(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428990    000000BC    +       void __cdecl Lara_State_Extra_PullDagger(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428A50    0000004D    +       void __cdecl Lara_State_Extra_StartAnim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428AA0    000000A5    +       void __cdecl Lara_State_Extra_StartHouse(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428B50    000000A3    +       void __cdecl Lara_State_Extra_FinalAnim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428C00    00000051    +       int32_t __cdecl Lara_Fallen(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428C60    0000009B    *       void __cdecl Lara_CollideStop(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428D20    00000191    +       void __cdecl Lara_Col_Walk(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428EC0    00000176    +       void __cdecl Lara_Col_Run(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429040    00000081    +       void __cdecl Lara_Col_Stop(struct ITEM_INFO *item, struct COLL_INFO *coll);
004290D0    000000D7    +       void __cdecl Lara_Col_ForwardJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
004291B0    000000B3    +       void __cdecl Lara_Col_FastBack(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429270    00000095    +       void __cdecl Lara_Col_TurnRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429310    00000013    +       void __cdecl Lara_Col_TurnLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429330    00000068    +       void __cdecl Lara_Col_Death(struct ITEM_INFO *item, struct COLL_INFO *coll);
004293A0    00000099    +       void __cdecl Lara_Col_FastFall(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429440    00000127    +       void __cdecl Lara_Col_Hang(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429570    00000090    +       void __cdecl Lara_Col_Reach(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429600    00000059    +       void __cdecl Lara_Col_Splat(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429660    00000013    +       void __cdecl Lara_Col_Land(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429680    00000096    +       void __cdecl Lara_Col_Compress( ITEM_INFO *item, COLL_INFO *coll );
00429720    000000FB    +       void __cdecl Lara_Col_Back(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429820    000000BE    +       void __cdecl Lara_Col_StepRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
004298E0    00000013    +       void __cdecl Lara_Col_StepLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429900    0000001E    +       void __cdecl Lara_Col_Slide(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429920    00000023    +       void __cdecl Lara_Col_BackJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429950    00000023    +       void __cdecl Lara_Col_RightJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429980    00000023    +       void __cdecl Lara_Col_LeftJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
004299B0    0000011B    +       void __cdecl Lara_Col_UpJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429AD0    00000083    +       void __cdecl Lara_Col_Fallback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429B60    00000033    +       void __cdecl Lara_Col_HangLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429BA0    00000033    +       void __cdecl Lara_Col_HangRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429BE0    00000023    +       void __cdecl Lara_Col_SlideBack(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429C10    00000013    +       void __cdecl Lara_Col_Null(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429C30    00000081    +       void __cdecl Lara_Col_Roll(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429CC0    000000B3    +       void __cdecl Lara_Col_Roll2(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429D80    00000069    +       void __cdecl Lara_Col_SwanDive(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429DF0    00000079    +       void __cdecl Lara_Col_FastDive(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429E70    00000162    +       void __cdecl Lara_Col_Wade(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429FE0    00000036    +       void __cdecl Lara_Col_Default(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A020    00000074    +       void __cdecl Lara_Col_Jumper(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A0A0    00000032    +       void __cdecl Lara_GetCollisionInfo(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A0E0    000000E2    +       void __cdecl Lara_SlideSlope(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A1D0    00000067    +       int32_t __cdecl Lara_HitCeiling(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A240    0000007F    +       int32_t __cdecl Lara_DeflectEdge(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A2C0    00000136    +       void __cdecl Lara_DeflectEdgeJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A440    000000AB    +       void __cdecl Lara_SlideEdgeJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A530    000000E1    +       int32_t __cdecl Lara_TestWall(struct ITEM_INFO *item, int32_t front, int32_t right, int32_t down);
0042A640    000000F5    +       int32_t __cdecl Lara_TestHangOnClimbWall(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A750    000000BE    +       int32_t __cdecl Lara_TestClimbStance(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A810    0000033E    +       void __cdecl Lara_HangTest(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042AB70    000000AD    +       int32_t __cdecl Lara_TestEdgeCatch(struct ITEM_INFO *item, struct COLL_INFO *coll, int32_t *edge);
0042AC20    0000016D    +       int32_t __cdecl Lara_TestHangJumpUp(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042AD90    0000019E    +       int32_t __cdecl Lara_TestHangJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042AF30    000000B1    +       int32_t __cdecl Lara_TestHangSwingIn(struct ITEM_INFO *item, PHD_ANGLE angle);
0042AFF0    000002E7    +       int32_t __cdecl Lara_TestVault(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042B2E0    00000130    +       int32_t __cdecl Lara_TestSlide(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042B410    00000075    +       int16_t __cdecl Lara_FloorFront(struct ITEM_INFO *item, PHD_ANGLE ang, int32_t dist);
0042B490    000000BB    +       int32_t __cdecl Lara_LandedBad(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042B550    0000038F    +       void __cdecl Lara_GetJointAbsPosition(struct PHD_VECTOR *vec, int32_t joint);
0042B8E0    0000031A    +       void __cdecl Lara_GetJointAbsPosition_I(struct ITEM_INFO *item, struct PHD_VECTOR *vec, int16_t *frame1, int16_t *frame2, int32_t frac, int32_t rate);

# game/lara1gun.c
0042BC00    00000033    -R      void __cdecl draw_shotgun_meshes(int32_t weapon_type);
0042BC40    0000002B    -R      void __cdecl undraw_shotgun_meshes(int32_t weapon_type);
0042BC70    00000070    -R      void __cdecl ready_shotgun(int32_t weapon_type);
0042BCE0    000000F5    -R      void __cdecl RifleHandler(int32_t weapon_type);
0042BDE0    000000F2    -R      void __cdecl FireShotgun(void);
0042BEE0    0000007B    -R      void __cdecl FireM16(int32_t running);
0042BF60    00000187    -R      void __cdecl FireHarpoon(void);
0042C0F0    00000344    -R      void __cdecl ControlHarpoonBolt(int16_t item_num);
0042C440    000000F0    -R      void __cdecl FireRocket(void);
0042C530    000003FD    -R      void __cdecl ControlRocket(int16_t item_num);
0042C930    00000166    -R      void __cdecl draw_shotgun(int32_t weapon_type);
0042CAA0    00000104    -R      void __cdecl undraw_shotgun(int32_t weapon_type);
0042CBB0    0000037E    -R      void __cdecl AnimateShotgun(int32_t weapon_type);

# game/lara2gun.c
0042CF60    0000004F    -R      void __cdecl set_arm_info(struct LARA_ARM *arm, int32_t frame);
0042CFB0    0000007C    -R      void __cdecl draw_pistols(int32_t weapon_type);
0042D030    00000225    -R      void __cdecl undraw_pistols(int32_t weapon_type);
0042D260    0000005C    -R      void __cdecl ready_pistols(int32_t weapon_type);
0042D2C0    0000004E    -R      void __cdecl draw_pistol_meshes(int32_t weapon_type);
0042D310    0000003A    -R      void __cdecl undraw_pistol_mesh_left(int32_t weapon_type);
0042D350    0000003A    -R      void __cdecl undraw_pistol_mesh_right(int32_t weapon_type);
0042D390    0000018C    -R      void __cdecl PistolHandler(int32_t weapon_type);
0042D520    00000330    -R      void __cdecl AnimatePistols(int32_t weapon_type);

# game/laraclimb.c
0042D850    00000035    +       void __cdecl Lara_State_ClimbLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D890    00000035    +       void __cdecl Lara_State_ClimbRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D8D0    00000075    +       void __cdecl Lara_State_ClimbStance(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D950    00000014    +       void __cdecl Lara_State_Climbing(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D970    0000001E    +       void __cdecl Lara_State_ClimbEnd(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D990    00000014    +       void __cdecl Lara_State_ClimbDown(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D9B0    0000005D    +       void __cdecl Lara_Col_ClimbLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DA10    00000059    +       void __cdecl Lara_Col_ClimbRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DA70    0000020D    +       void __cdecl Lara_Col_ClimbStance(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DC80    0000014D    +       void __cdecl Lara_Col_Climbing(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DDD0    0000019C    +       void __cdecl Lara_Col_ClimbDown(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DF70    000000AA    +       int32_t __cdecl Lara_CheckForLetGo(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042E020    00000263    -       int32_t __cdecl Lara_TestClimb(int32_t x, int32_t y, int32_t z, int32_t xfront, int32_t zfront, int32_t item_height, int16_t item_room, int32_t *shift);
0042E290    000000BC    -       int32_t __cdecl Lara_TestClimbPos(struct ITEM_INFO *item, int32_t front, int32_t right, int32_t origin, int32_t height, int32_t *shift);
0042E360    000000EF    -       void __cdecl Lara_DoClimbLeftRight(struct ITEM_INFO *item, struct COLL_INFO *coll, int32_t result, int32_t shift);
0042E450    00000235    -       int32_t __cdecl Lara_TestClimbUpPos(struct ITEM_INFO *item, int32_t front, int32_t right, int32_t *shift, int32_t *ledge);

# game/larafire.c
0042E6A0    000004E8    -R      void __cdecl LaraGun(void);
0042EC10    0000003B    -R      int32_t __cdecl CheckForHoldingState(int32_t state);
0042EC50    0000011C    -R      void __cdecl InitialiseNewWeapon(void);
0042ED90    00000194    -R      void __cdecl LaraTargetInfo(struct WEAPON_INFO *winfo);
0042EF30    0000021C    -R      void __cdecl LaraGetNewTarget(struct WEAPON_INFO *winfo);
0042F150    000000AA    -R      void __cdecl find_target_point(struct ITEM_INFO *item, struct GAME_VECTOR *target);
0042F200    000000C1    -R      void __cdecl AimWeapon(struct WEAPON_INFO *winfo, struct LARA_ARM *arm);
0042F2D0    00000360    -R      int32_t __cdecl FireWeapon(int32_t weapon_type, struct ITEM_INFO *target, struct ITEM_INFO *src, PHD_ANGLE *angles);
0042F640    00000096    -R      void __cdecl HitTarget(struct ITEM_INFO *item, struct GAME_VECTOR *hitpos, int32_t damage);
0042F6E0    00000051    -R      void __cdecl SmashItem(int16_t item_num, int32_t weapon_type);
0042F740    0000003B    -R      int32_t __cdecl WeaponObject(int32_t weapon_type);

# game/laraflare.c
0042F7A0    0000009D    -R      int32_t __cdecl DoFlareLight(struct PHD_VECTOR *pos, int32_t flare_age);
0042F840    000000D3    -R      void __cdecl DoFlareInHand(int32_t flare_age);
0042F920    000000F8    -R      void __cdecl DrawFlareInAir(struct ITEM_INFO *item);
0042FA20    000001D7    -R      void __cdecl CreateFlare(int32_t thrown);
0042FC00    0000004B    -R      void __cdecl set_flare_arm(int32_t frame);
0042FC50    00000169    -R      void __cdecl draw_flare(void);
0042FDC0    00000221    -R      void __cdecl undraw_flare(void);
0042FFF0    00000018    -R      void __cdecl draw_flare_meshes(void);
00430010    00000018    -R      void __cdecl undraw_flare_meshes(void);
00430030    0000003E    -R      void __cdecl ready_flare(void);

# game/laramisc.c
004302E0    00000668    -       void __cdecl Lara_Control(int16_t item_num);
00430970    000002CD    -       void __cdecl Lara_Animate(struct ITEM_INFO *item);
00430C70    0000013F    -       void __cdecl Lara_UseItem(int16_t object_num);
00430E30    000000BA    -       void __cdecl Lara_CheatGetStuff(void);
00430EF0    0000001B    -       void __cdecl Lara_ControlExtra(int16_t item_num);
00430F10    00000021    -       void __cdecl Lara_InitialiseLoad(int16_t item_num);
00430F40    000002BD    -       void __cdecl Lara_Initialise(int32_t type);
00431200    0000036C    -       void __cdecl Lara_InitialiseInventory(int32_t level_num);
00431570    000000FA    -       void __cdecl Lara_InitialiseMeshes(int32_t level_num);

# game/larasurf.c
00431670    00000158    +       void __cdecl Lara_HandleSurface(struct ITEM_INFO *item, struct COLL_INFO *coll);
004317D0    00000070    +       void __cdecl Lara_State_SurfSwim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431840    0000005E    +       void __cdecl Lara_State_SurfBack(struct ITEM_INFO *item, struct COLL_INFO *coll);
004318A0    00000060    +       void __cdecl Lara_State_SurfLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431900    00000060    +       void __cdecl Lara_State_SurfRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431960    000000EB    +       void __cdecl Lara_State_SurfTread(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431A50    00000032    +       void __cdecl Lara_Col_SurfSwim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431A90    00000023    +       void __cdecl Lara_Col_SurfBack(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431AC0    00000023    +       void __cdecl Lara_Col_SurfLeft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431AF0    00000023    +       void __cdecl Lara_Col_SurfRight(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431B20    0000001E    +       void __cdecl Lara_Col_SurfTread(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431B40    000000F3    +       void __cdecl Lara_SurfaceCollision(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431C40    000000E7    +       int32_t __cdecl Lara_TestWaterStepOut(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431D30    0000021C    +       int32_t __cdecl Lara_TestWaterClimbOut(struct ITEM_INFO *item, struct COLL_INFO *coll);

# game/laraswim.c
00431F50    00000223    +       void __cdecl Lara_HandleUnderwater(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432180    00000086    +       void __cdecl Lara_SwimTurn(struct ITEM_INFO *item);
00432210    0000006B    +       void __cdecl Lara_State_Swim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432280    00000076    +       void __cdecl Lara_State_Glide(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432300    00000085    +       void __cdecl Lara_State_Tread(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432390    00000014    +       void __cdecl Lara_State_Dive(struct ITEM_INFO *item, struct COLL_INFO *coll);
004323B0    00000053    +       void __cdecl Lara_State_UWDeath(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432410    0000000B    +       void __cdecl Lara_State_UWTwist(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432420    00000013    +       void __cdecl Lara_Col_Swim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432440    0000005B    +       void __cdecl Lara_Col_UWDeath(struct ITEM_INFO *item, struct COLL_INFO *coll);
004324A0    00000192    -       int32_t __cdecl Lara_GetWaterDepth(int32_t x, int32_t y, int32_t z, int16_t room_num);
00432640    000000CE    -       void __cdecl Lara_TestWaterDepth(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432710    0000015C    -       void __cdecl Lara_SwimCollision(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432870    000001EC    -       void __cdecl Lara_WaterCurrent(struct COLL_INFO *coll);

# game/lot.c
00432A60    00000053    -R      void __cdecl InitialiseLOTarray(void);
00432AC0    0000004F    -R      void __cdecl DisableBaddieAI(int16_t item_num);
00432B10    000001B0    -       int32_t __cdecl LOT_EnableBaddieAI(int16_t item_num, int32_t always);
00432CC0    00000106    -R      void __cdecl InitialiseSlot(int16_t item_num, int32_t slot);
00432ED0    000000B8    -R      void __cdecl CreateZone(struct ITEM_INFO *item);
00432F90    00000049    -R      void __cdecl ClearLOT(struct LOT_INFO *LOT);

# game/missile.c
00432FE0    000002D0    -R      void __cdecl ControlMissile(int16_t fx_num);
004332B0    000000A7    -R      void __cdecl ShootAtLara(struct FX_INFO *fx);
00433360    00000386    -       int32_t __cdecl Effect_ExplodingDeath(int16_t item_num, int32_t mesh_bits, int16_t damage);
004336F0    00000200    -R      void __cdecl ControlBodyPart(int16_t fx_num);

# game/moveblock.c
004338F0    0000002C    -R      void __cdecl InitialiseMovingBlock(int16_t item_num);
00433920    00000148    -R      void __cdecl MovableBlock(int16_t item_num);
00433A70    00000239    -R      void __cdecl MovableBlockCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00433CD0    0000004E    -R      int32_t __cdecl TestBlockMovable(struct ITEM_INFO *item, int32_t blokhite);
00433D20    00000137    -R      int32_t __cdecl TestBlockPush(struct ITEM_INFO *item, int32_t blokhite, uint16_t quadrant);
00433E70    00000225    -R      int32_t __cdecl TestBlockPull(struct ITEM_INFO *item, int32_t blokhite, uint16_t quadrant);
004340B0    000000BB    -R      void __cdecl AlterFloorHeight(struct ITEM_INFO *item, int32_t height);
00434170    00000022    -R      void __cdecl DrawMovableBlock(struct ITEM_INFO *item);
004341A0    0000006B    -R      void __cdecl DrawUnclippedItem(struct ITEM_INFO *item);

# game/objects.c
00434210    000000DB    -R      void __cdecl EarthQuake(int16_t item_num);
004342F0    0000003C    -R      void __cdecl ControlCutShotgun(int16_t item_num);
00434330    0000009D    -R      void __cdecl InitialiseFinalLevel(void);
00434400    0000020F    -R      void __cdecl FinalLevelCounter(int16_t item_num);
00434610    000000D9    -R      void __cdecl MiniCopterControl(int16_t item_num);
004346F0    0000007C    -R      void __cdecl InitialiseDyingMonk(int16_t item_num);
00434800    000000BD    -R      void __cdecl ControlGongBonger(int16_t item_num);
00434980    0000028F    -R      void __cdecl ControlDeathSlide(int16_t item_num);
00434C10    000000E3    -R      void __cdecl BigBowlControl(int16_t item_num);
00434D00    0000007E    -R      void __cdecl BellControl(int16_t item_num);
00434E00    000000C4    -R      void __cdecl SmashWindow(int16_t item_num);
00434ED0    00000096    -R      void __cdecl WindowControl(int16_t item_num);
00434F70    000000DC    -R      void __cdecl SmashIceControl(int16_t item_num);
00435050    00000042    -R      void __cdecl ShutThatDoor(struct DOORPOS_DATA *d);
004350A0    00000032    -R      void __cdecl OpenThatDoor(struct DOORPOS_DATA *d);
004350E0    000003DC    -R      void __cdecl InitialiseDoor(int16_t item_num);
00435590    000000B1    -R      int32_t __cdecl OnDrawBridge(struct ITEM_INFO *item, int32_t x, int32_t y);
00435650    00000036    -R      void __cdecl DrawBridgeFloor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435690    0000003B    -R      void __cdecl DrawBridgeCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
004356D0    0000002C    -R      void __cdecl DrawBridgeCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00435740    000000D4    -R      void __cdecl LiftControl(int16_t item_num);
00435820    00000179    -R      void __cdecl LiftFloorCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *floor, int32_t *ceiling);
004359A0    00000035    -R      void __cdecl LiftFloor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
004359E0    00000035    -R      void __cdecl LiftCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435A20    00000016    -R      void __cdecl BridgeFlatFloor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435A40    0000001B    -R      void __cdecl BridgeFlatCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435A60    0000003B    -R      int32_t __cdecl GetOffset(struct ITEM_INFO *item, int32_t x, int32_t z);
00435AA0    00000030    -R      void __cdecl BridgeTilt1Floor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435AD0    00000035    -R      void __cdecl BridgeTilt1Ceiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435B10    0000002F    -R      void __cdecl BridgeTilt2Floor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435B80    0000010C    -R      void __cdecl CopterControl(int16_t item_num);
00435C90    000000D2    -R      void __cdecl GeneralControl(int16_t item_num);
00435D70    0000008D    -R      void __cdecl DetonatorControl(int16_t item_num);

# game/people.c
00435E00    00000085    -R      int32_t __cdecl Targetable(struct ITEM_INFO *item, AI_INFO *info);
00435E90    0000003B    -R      void __cdecl ControlGlow(int16_t nFX);
00435ED0    0000004E    -R      void __cdecl ControlGunShot(int16_t fx_num);
00435F20    00000066    -R      int16_t __cdecl GunShot(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
00435F90    000000B9    -R      int16_t __cdecl GunHit(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
00436050    000000A7    -R      int16_t __cdecl GunMiss(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
00436100    000001C4    -R      int32_t __cdecl ShotLara(struct ITEM_INFO *item, AI_INFO *info, struct BITE_INFO *gun, int16_t extra_rotation, int32_t damage);
004362D0    00000043    -R      void __cdecl InitialiseCult1(int16_t item_num);
00436320    00000401    -R      void __cdecl Cult1Control(int16_t item_num);
00436750    00000050    -R      void __cdecl InitialiseCult3(int16_t item_num);
004367A0    0000053C    -R      void __cdecl Cult3Control(int16_t item_num);
00436D10    000003CA    -R      void __cdecl Worker1Control(int16_t item_num);
00437110    0000042A    -R      void __cdecl Worker2Control(int16_t item_num);
00437570    0000030B    -R      void __cdecl BanditControl(int16_t item_num);
004378B0    00000408    -R      void __cdecl Bandit2Control(int16_t item_num);
00437CF0    00000172    -R      void __cdecl WinstonControl(int16_t item_num);

# game/pickup.c
00437E70    00000480    -R      void __cdecl PickUpCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
004382F0    0000020A    -R      void __cdecl SwitchCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00438500    000000FC    -R      void __cdecl SwitchCollision2(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00438840    00000223    -R      void __cdecl KeyHoleCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00438A80    00000294    -R      void __cdecl PuzzleHoleCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00438D40    00000039    -R      void __cdecl SwitchControl(int16_t item_num);
00438D80    000000BD    -R      int32_t __cdecl SwitchTrigger(int16_t item_num, int16_t timer);
00438E40    0000003D    -R      int32_t __cdecl KeyTrigger(int16_t item_num);
00438E80    00000033    -R      int32_t __cdecl PickupTrigger(int16_t item_num);
00438EC0    00000023    -R      void __cdecl SecretControl(int16_t item_num);

# game/rat.c
00438EF0    000001DC    -R      void __cdecl MouseControl(int16_t item_num);

# game/savegame.c
004390E0    00000062    -R      void __cdecl InitialiseStartInfo(void);
00439150    000000DB    -R      void __cdecl ModifyStartInfo(int32_t level_num);
00439230    00000201    -R      void __cdecl CreateStartInfo(int32_t level_num);
00439440    0000052B    -R      void __cdecl CreateSaveGameInfo(void);
00439970    0000085C    -R      void __cdecl ExtractSaveGameInfo(void);
0043A1D0    00000015    -R      void __cdecl ResetSG(void);
0043A1F0    0000004C    -R      void __cdecl WriteSG(void *pointer, int32_t size);
0043A240    00000035    -R      void __cdecl ReadSG(void *pointer, int32_t size);

# game/setup.c
0043A280    0000015F    -       int32_t __cdecl Level_Initialise(int32_t level_num, int32_t level_type);
0043A3E0    00000061    -R      void __cdecl InitialiseGameFlags(void);
0043A450    00000027    -R      void __cdecl InitialiseLevelFlags(void);
0043A480    0000103B    -R      void __cdecl BaddyObjects(void);
0043B4C0    000005FD    -R      void __cdecl TrapObjects(void);
0043BAC0    00000C4C    -R      void __cdecl ObjectObjects(void);
0043C710    00000068    -R      void __cdecl InitialiseObjects(void);
0043C780    000000CE    -R      void __cdecl GetCarriedItems(void);

# game/shark.c
0043C850    00000116    -R      void __cdecl JellyControl(int16_t item_num);
0043C970    0000021B    -R      void __cdecl BaracuddaControl(int16_t item_num);
0043CBA0    0000027C    -R      void __cdecl SharkControl(int16_t item_num);

# game/skidoo.c
0043CE30    00000040    -R      void __cdecl InitialiseSkidoo(int16_t item_num);
0043CE70    000000E1    -R      int32_t __cdecl SkidooCheckGeton(int16_t item_num, struct COLL_INFO *coll);
0043CF60    000000F8    -R      void __cdecl SkidooCollision(int16_t item_num, struct ITEM_INFO *litem, struct COLL_INFO *coll);
0043D060    000001F9    -R      void __cdecl SkidooBaddieCollision(struct ITEM_INFO *skidoo);
0043D260    000000B2    -R      int32_t __cdecl TestHeight(struct ITEM_INFO *item, int32_t z_off, int32_t x_off, struct PHD_VECTOR *pos);
0043D320    0000027C    -R      int32_t __cdecl DoShift(struct ITEM_INFO *skidoo, struct PHD_VECTOR *pos, struct PHD_VECTOR *old);
0043D5A0    00000054    -R      int32_t __cdecl DoDynamics(int32_t height, int32_t fall_speed, int32_t *y);
0043D600    00000090    -R      int32_t __cdecl GetCollisionAnim(struct ITEM_INFO *skidoo, struct PHD_VECTOR *moved);
0043D690    00000140    -R      void __cdecl DoSnowEffect(struct ITEM_INFO *skidoo);
0043D7D0    0000049E    -R      int32_t __cdecl SkidooDynamics(struct ITEM_INFO *skidoo);
0043DC70    000001B6    -R      int32_t __cdecl SkidooUserControl(struct ITEM_INFO *skidoo, int32_t height, int32_t *pitch);
0043DE30    00000106    -R      int32_t __cdecl SkidooCheckGetOffOK(int32_t direction);
0043DF40    000002B9    -R      void __cdecl SkidooAnimation(struct ITEM_INFO *skidoo, int32_t collide, int32_t dead);
0043E220    0000007C    -R      void __cdecl SkidooExplode(struct ITEM_INFO *skidoo);
0043E2A0    00000233    -R      int32_t __cdecl SkidooCheckGetOff(void);
0043E4E0    0000011B    -R      void __cdecl SkidooGuns(void);
0043E600    00000440    -R      int32_t __cdecl SkidooControl(void);
0043EA60    000002D5    -R      void __cdecl DrawSkidoo(struct ITEM_INFO *item);
0043ED40    0000007F    -R      void __cdecl InitialiseSkidman(int16_t item_num);
0043EDD0    000003E2    -R      void __cdecl SkidManControl(int16_t rider_num);
0043F1D0    00000119    -R      void __cdecl SkidmanPush(struct ITEM_INFO *item, struct ITEM_INFO *laraitem, int32_t radius);
0043F2F0    00000081    -R      void __cdecl SkidmanCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);

# game/sound.c
0043F380    00000031    *       int32_t __cdecl Music_GetRealTrack(int32_t track);
0043F3C0    00000484    -       void __cdecl Sound_Effect(int32_t sample_id, const struct PHD_3DPOS *pos, uint32_t flags);
0043F860    0000005E    -       void __cdecl Sound_StopEffect(int32_t sample_id);
0043F8C0    00000086    -       void __cdecl Sound_UpdateContinued(void);
0043F950    00000024    -       void __cdecl Sound_Shutdown(void);
0043F980    0000002A    -       void __cdecl Sound_Init(void);

# game/sphere.c
0043F9B0    00000128    -R      int32_t __cdecl TestCollision(struct ITEM_INFO *item, struct ITEM_INFO *laraitem);
0043FAE0    000002D8    -R      int32_t __cdecl GetSpheres(struct ITEM_INFO *item, struct SPHERE *ptr, int32_t WorldSpace);
0043FDC0    0000019A    -       void __cdecl Collide_GetJointAbsPosition(struct ITEM_INFO *item, struct PHD_VECTOR *vec, int32_t joint);
0043FF60    0000005D    -R      void __cdecl BaddieBiteEffect(struct ITEM_INFO *item, struct BITE_INFO *bite);

# game/spider.c
0043FFC0    000000AC    -R      void __cdecl SpiderLeap(int16_t item_num, int16_t angle);
00440070    00000206    -R      void __cdecl SpiderControl(int16_t item_num);
00440290    000001A5    -R      void __cdecl BigSpiderControl(int16_t item_num);

# game/text.c
00440450    0000002C    +       void __cdecl Text_Init(void);
00440480    00000105    +       TEXTSTRING *__cdecl Text_Create(int32_t x, int32_t y, int32_t z, const char *text);
00440590    00000037    +       void __cdecl Text_ChangeText(struct TEXTSTRING *string, const char *text);
004405D0    00000017    +       void __cdecl Text_SetScale(struct TEXTSTRING *string, int32_t scale_h, int32_t scale_v);
004405F0    0000002B    +       void __cdecl Text_Flash(struct TEXTSTRING *string, int16_t enable, int16_t rate);
00440620    0000008C    +       void __cdecl Text_AddBackground(struct TEXTSTRING *string, int16_t x_size, int16_t y_size, int16_t x_off, int16_t y_off, int16_t z_off, int16_t colour, uint16_t *gour_ptr, uint16_t flags);
004406B0    00000010    +       void __cdecl Text_RemoveBackground(struct TEXTSTRING *string);
004406C0    00000029    +       void __cdecl Text_AddOutline(struct TEXTSTRING *string, int16_t enable, int16_t colour, uint16_t *gour_ptr, uint16_t flags);
004406F0    00000010    +       void __cdecl Text_RemoveOutline(struct TEXTSTRING *string);
00440700    0000001E    +       void __cdecl Text_CentreH(struct TEXTSTRING *string, int16_t enable);
00440720    0000001E    +       void __cdecl Text_CentreV(struct TEXTSTRING *string, int16_t enable);
00440740    0000001E    +       void __cdecl Text_AlignRight(struct TEXTSTRING *string, int16_t enable);
00440760    0000001E    +       void __cdecl Text_AlignBottom(struct TEXTSTRING *string, int16_t enable);
00440780    00000107    +       int32_t __cdecl Text_GetWidth(struct TEXTSTRING *string);
00440890    00000025    +       int32_t __cdecl Text_Remove(struct TEXTSTRING *string);
004408C0    00000024    +       int16_t __cdecl Text_GetTextLength(const char *text);
004408F0    00000027    +       void __cdecl Text_Draw(void);
00440920    00000189    +       void __cdecl Text_DrawBorder(int32_t x, int32_t y, int32_t z, int32_t width, int32_t height);
00440AB0    000003D2    +       void __cdecl Text_DrawText(const struct TEXTSTRING *string);
00440E90    00000037    +       uint32_t __cdecl Text_GetScaleH(uint32_t value);
00440ED0    00000039    +       uint32_t __cdecl Text_GetScaleV(uint32_t value);

# game/traps.c
00440F10    000001F4    -R      void __cdecl MineControl(int16_t mine_num);
00441110    00000138    -R      void __cdecl ControlSpikeWall(int16_t item_num);
00441250    00000115    -R      void __cdecl ControlCeilingSpikes(int16_t item_num);
00441370    00000086    -R      void __cdecl HookControl(int16_t item_num);
00441400    00000190    -R      void __cdecl PropellerControl(int16_t item_num);
00441590    0000017B    -R      void __cdecl SpinningBlade(int16_t item_num);
00441710    000000FE    -R      void __cdecl IcicleControl(int16_t item_num);
004418F0    00000046    -R      void __cdecl InitialiseKillerStatue(int16_t item_num);
00441940    00000109    -R      void __cdecl KillerStatueControl(int16_t item_num);
00441A50    000000DB    -R      void __cdecl SpringBoardControl(int16_t item_num);
00441B30    0000003C    -R      void __cdecl InitialiseRollingBall(int16_t item_num);
00441B70    00000347    -R      void __cdecl RollingBallControl(int16_t item_num);
00441EC0    0000024A    -R      void __cdecl RollingBallCollision(int16_t item_num, struct ITEM_INFO *litem, struct COLL_INFO *coll);
00442110    00000155    -R      void __cdecl SpikeCollision(int16_t item_num, struct ITEM_INFO *litem, struct COLL_INFO *coll);
00442270    0000004F    -R      void __cdecl TrapDoorControl(int16_t item_num);
00442300    0000003F    -R      void __cdecl TrapDoorCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00442340    000000A3    -R      int32_t __cdecl OnTrapDoor(struct ITEM_INFO *item, int32_t x, int32_t z);
004423F0    0000010A    -R      void __cdecl Pendulum(int16_t item_num);
00442500    00000105    -R      void __cdecl FallingBlock(int16_t item_num);
00442610    0000003E    -R      void __cdecl FallingBlockFloor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
004426A0    000000BD    -R      void __cdecl TeethTrap(int16_t item_num);
00442980    00000155    -R      void __cdecl DartsControl(int16_t item_num);
00442AE0    0000004B    -R      void __cdecl DartEffectControl(int16_t fx_num);
00442B30    00000090    -R      void __cdecl FlameEmitterControl(int16_t item_num);
00442BC0    00000164    -R      void __cdecl FlameControl(int16_t fx_num);
00442D30    00000049    -R      void __cdecl LaraBurn(void);
00442D80    000000E6    -R      void __cdecl LavaBurn(struct ITEM_INFO *item);
00442E70    000000C5    -R      void __cdecl LavaSpray(int16_t item_num);
00442F40    0000010B    -R      void __cdecl ControlLavaBlob(int16_t fx_num);

# game/yeti.c
00443050    000002CA    -R      void __cdecl GiantYetiControl(int16_t item_num);
00443350    000005ED    -R      void __cdecl YetiControl(int16_t item_num);

00443990    000001B8    -R      void __cdecl BGND_Make640x480(uint8_t *bitmap, struct RGB888 *palette);
00443B50    000000B9    -R      int32_t __cdecl BGND_AddTexture(int32_t tileIndex, BYTE *bitmap, int32_t pal_index, struct RGB888 *bmp_pal);
00443C10    00000032    -R      void __cdecl BGND_GetPageHandles(void);
00443C50    0000005F    -R      void __cdecl BGND_DrawInGameBlack(void);
00443CB0    000000DC    -R      void __cdecl DrawQuad(float sx, float sy, float width, float height, D3DCOLOR color);
00443D90    00000220    -R      void __cdecl BGND_DrawInGameBackground(void);
00443FB0    00000251    -R      void __cdecl DrawTextureTile(int32_t sx, int32_t sy, int32_t width, int32_t height, HWR_TEXHANDLE texSource, int32_t tu, int32_t tv, int32_t t_width, int32_t t_height, D3DCOLOR color0, D3DCOLOR color1, D3DCOLOR color2, D3DCOLOR color3);
00444210    0000008B    -R      D3DCOLOR __cdecl BGND_CenterLighting(int32_t x, int32_t y, int32_t width, int32_t height);
004444C0    0000004D    -R      void __cdecl BGND_Free(void);
00444510    00000030    -R      bool __cdecl BGND_Init(void);
00444540    0000003E    -R      void __cdecl Enumerate3DDevices(struct DISPLAY_ADAPTER *adapter);
00444570    0000001F    -R      bool __cdecl D3DCreate(void);
004445B0    000000BD    -R      HRESULT __stdcall Enum3DDevicesCallback(GUID *lpGuid, LPTSTR lpDeviceDescription, LPTSTR lpDeviceName, LPD3DDEVICEDESC lpD3DHWDeviceDesc, LPD3DDEVICEDESC lpD3DHELDeviceDesc, LPVOID lpContext);
00444670    00000037    -R      bool __cdecl D3DIsSupported(LPD3DDEVICEDESC desc);
004446B0    000000B9    -R      bool __cdecl D3DSetViewport(void);
00444770    000001B8    -R      void __cdecl D3DDeviceCreate(LPDDS lpBackBuffer);
00444930    0000006A    -R      void __cdecl Direct3DRelease(void);
00444980    00000006    -R      bool __cdecl Direct3DInit(void);
00444990    00000018    x       sub_444990
004449A0    00000012    x       sub_4449A0
004449D0    000000C6    x       sub_4449D0
00444AA0    00000018    x       sub_444AA0
00444AB0    0000005F    x       sub_444AB0
00444B20    0000008C    x       sub_444B20
00444BB0    00000005    x       sub_444BB0
00444BC0    00000001    x       sub_444BC0
00444BD0    00000054    -R      bool __cdecl DDrawCreate(LPGUID lpGUID);
00444C30    00000033    -R      void __cdecl DDrawRelease(void);
00444C70    00000073    -R      void __cdecl GameWindowCalculateSizeFromClient(int32_t *width, int32_t *height);
00444CF0    0000006A    -R      void __cdecl GameWindowCalculateSizeFromClientByZero(int32_t *width, int32_t *height);
00444D60    00000041    -R      void __cdecl WinVidSetMinWindowSize(int32_t width, int32_t height);
00444DB0    00000008    -R      void __cdecl WinVidClearMinWindowSize(void);
00444DC0    00000041    -R      void __cdecl WinVidSetMaxWindowSize(int32_t width, int32_t height);
00444E10    00000008    -R      void __cdecl WinVidClearMaxWindowSize(void);
00444E20    00000048    -R      int32_t __cdecl CalculateWindowWidth(int32_t width, int32_t height);
00444E70    00000028    -R      int32_t __cdecl CalculateWindowHeight(int32_t width, int32_t height);
00444EA0    00000104    -R      bool __cdecl WinVidGetMinMaxInfo(LPMINMAXINFO info);
00444FB0    00000011    -R      HWND __cdecl WinVidFindGameWindow(void);
00444FD0    000000E2    -R      bool __cdecl WinVidSpinMessageLoop(bool needWait);
004450C0    00000043    -R      void __cdecl WinVidShowGameWindow(int32_t nCmdShow);
00445110    0000003A    -R      void __cdecl WinVidHideGameWindow(void);
00445150    00000035    -R      void __cdecl WinVidSetGameWindowSize(int32_t width, int32_t height);
00445190    000000A7    -R      bool __cdecl ShowDDrawGameWindow(bool active);
00445240    00000087    -R      bool __cdecl HideDDrawGameWindow(void);
004452D0    00000044    -R      HRESULT __cdecl DDrawSurfaceCreate(LPDDSDESC dsp, LPDDS *surface);
00445320    00000046    -R      HRESULT __cdecl DDrawSurfaceRestoreLost(LPDDS surface1, LPDDS surface2, bool blank);
00445370    0000004D    -R      bool __cdecl WinVidClearBuffer(LPDDS surface, LPRECT rect, DWORD fillColor);
004453C0    0000003D    -R      HRESULT __cdecl WinVidBufferLock(LPDDS surface, LPDDSDESC desc, DWORD flags);
00445400    00000025    -R      HRESULT __cdecl WinVidBufferUnlock(LPDDS surface, LPDDSDESC desc);
00445430    00000090    -R      bool __cdecl WinVidCopyBitmapToBuffer(LPDDS surface, BYTE *bitmap);
004454C0    00000046    -R      DWORD __cdecl GetRenderBitDepth(DWORD dwRGBBitCount);
00445550    00000071    -R      void __thiscall WinVidGetColorBitMasks(COLOR_BIT_MASKS *bm, LPDDPIXELFORMAT pixelFormat);
004455D0    00000044    -R      void __cdecl BitMaskGetNumberOfBits(DWORD bitMask, DWORD *bitDepth, DWORD *bitOffset);
00445620    00000061    -R      DWORD __cdecl CalculateCompatibleColor(COLOR_BIT_MASKS *mask, int32_t red, int32_t green, int32_t blue, int32_t alpha);
00445690    0000008C    -R      bool __cdecl WinVidGetDisplayMode(DISPLAY_MODE *dispMode);
00445720    00000088    -R      bool __cdecl WinVidGoFullScreen(DISPLAY_MODE *dispMode);
004457B0    0000010B    -R      bool __cdecl WinVidGoWindowed(int32_t width, int32_t height, DISPLAY_MODE *dispMode);
004458C0    000000D5    -R      void __cdecl WinVidSetDisplayAdapter(DISPLAY_ADAPTER *dispAdapter);
004459A0    00000045    -R      bool __thiscall CompareVideoModes(DISPLAY_MODE *mode1, DISPLAY_MODE *mode2);
004459F0    00000053    -R      bool __cdecl WinVidGetDisplayModes(void);
00445A50    000003B1    -R      HRESULT __stdcall EnumDisplayModesCallback(LPDDSDESC lpDDSurfaceDesc, LPVOID lpContext);
00445E10    00000040    -R      bool __cdecl WinVidInit(void);
00445E50    000000AF    -R      bool __cdecl WinVidGetDisplayAdapters(void);
00445F00    00000013    +       void __thiscall S_FlaggedString_Delete(struct STRING_FLAGGED *string);
00445F20    0000001A    -R      bool __cdecl EnumerateDisplayAdapters(struct DISPLAY_ADAPTER_LIST *displayAdapterList);
00445F40    000001BE    -R      BOOL __stdcall EnumDisplayAdaptersCallback(GUID *lpGUID, LPTSTR lpDriverDescription, LPTSTR lpDriverName, LPVOID lpContext);
00446100    00000035    +       void __thiscall S_FlaggedString_InitAdapter(struct DISPLAY_ADAPTER *adapter);
00446140    0000006A    -R      bool __cdecl WinVidRegisterGameWindowClass(void);
004461B0    0000049F    -R      LRESULT __stdcall WinVidGameWindowProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
004467C0    000001C0    -R      void __cdecl WinVidResizeGameWindow(HWND hWnd, int32_t edge, LPRECT rect);
004469A0    000000BC    -R      bool __cdecl WinVidCheckGameWindowPalette(HWND hWnd);
00446A60    000000C6    -R      bool __cdecl WinVidCreateGameWindow(void);
00446B30    00000022    -R      void __cdecl WinVidFreeWindow(void);
00446B60    0000004D    -R      void __cdecl WinVidExitMessage(void);
00446BB0    00000048    -R      DISPLAY_ADAPTER_NODE *__cdecl WinVidGetDisplayAdapter(GUID *lpGuid);
00446C00    00000374    -R      void __cdecl WinVidStart(void);
00446F80    00000013    -R      void __cdecl WinVidFinish(void);
00446FA0    0000000D    -R      void __thiscall DisplayModeListInit(DISPLAY_MODE_LIST *pList);
00446FB0    00000032    -R      void __thiscall DisplayModeListDelete(DISPLAY_MODE_LIST *pList);
00446FF0    00000012    -R      DISPLAY_MODE *__thiscall InsertDisplayMode(DISPLAY_MODE_LIST *modeList, DISPLAY_MODE_NODE *before);
00447010    00000048    -R      DISPLAY_MODE *__thiscall InsertDisplayModeInListHead(DISPLAY_MODE_LIST *modeList);
00447060    0000004A    -R      DISPLAY_MODE *__thiscall InsertDisplayModeInListTail(DISPLAY_MODE_LIST *modeList);
004470B0    00000018    x       sub_4470B0
004470C0    00000012    x       sub_4470C0
004470F0    00000068    x       sub_4470F0
00447160    00000018    x       sub_447160
00447170    00000039    x       sub_447170
004471C0    0000002F    x       sub_4471C0
004471F0    00000022    -R      bool __cdecl DInputCreate(void);
00447220    0000001A    -R      void __cdecl DInputRelease(void);
00447240    0000005A    -R      void __cdecl WinInReadKeyboard(LPVOID lpInputData);
004472A0    000000F3    -R      DWORD __cdecl WinInReadJoystick(int32_t *x, int32_t *y);
004473A0    00000005    -R      sub_4473A0
004473B0    0000007F    -R      bool __cdecl WinInputInit(void);
00447430    00000024    -R      bool __cdecl DInputEnumDevices(JOYSTICK_LIST *joystickList);
00447460    000000E8    -R      BOOL __stdcall DInputEnumDevicesCallback(LPCDIDEVICEINSTANCE lpddi, LPVOID pvRef);
00447550    0000001F    +       void __thiscall S_FlaggedString_Create(struct STRING_FLAGGED *string, int32_t size);
00447570    0000004E    -R      JOYSTICK_NODE *__cdecl GetJoystick(GUID *lpGuid);
004475C0    000000C9    -R      void __cdecl DInputKeyboardCreate(void);
00447690    00000029    -R      void __cdecl DInputKeyboardRelease(void);
004476C0    000000E4    -R      bool __cdecl DInputJoystickCreate(void);
004477B0    0000002D    -R      void __cdecl WinInStart(void);
004477E0    0000000F    -R      void __cdecl WinInFinish(void);
004477F0    00000017    -R      void __cdecl WinInRunControlPanel(HWND hWnd);
00447810    00000062    -R      void __cdecl IncreaseScreenSize(void);
00447880    00000062    -R      void __cdecl DecreaseScreenSize(void);
004478F0    0000009F    -R      void __cdecl setup_screen_size(void);
00447990    00000034    -R      void __cdecl TempVideoAdjust(int32_t hires, double sizer);
004479D0    00000039    -R      void __cdecl TempVideoRemove(void);
00447A10    00000035    -R      void __cdecl S_FadeInInventory(BOOL isFade);
00447A50    00000027    -R      void __cdecl S_FadeOutInventory(BOOL isFade);
00447A80    00000018    x       sub_447A80
00447A90    00000012    x       sub_447A90
00447AC0    00000068    x       sub_447AC0
00447B30    00000018    x       sub_447B30
00447B40    00000039    x       sub_447B40
00447B90    0000002F    x       sub_447B90
00447BC0    00000048    +       const struct SOUND_ADAPTER_NODE *__cdecl S_Audio_Sample_GetAdapter(GUID *guid);
00447C10    0000002E    +       void __cdecl S_Audio_Sample_CloseAllTracks(void);
00447C40    0000010E    +       bool __cdecl S_Audio_Sample_Load(int32_t sample_id, LPWAVEFORMATEX format, const void *data, int32_t data_size);
00447D50    00000045    +       bool __cdecl S_Audio_Sample_IsTrackPlaying(int32_t track_id);
00447DA0    000000E7    +       int32_t __cdecl S_Audio_Sample_Play(int32_t sample_id, int32_t volume, int32_t pitch, int32_t pan, int32_t flags);
00447E90    00000039    +       int32_t __cdecl S_Audio_Sample_GetFreeTrackIndex(void);
00447ED0    0000002C    +       void __cdecl S_Audio_Sample_AdjustTrackVolumeAndPan(int32_t track_id, int32_t volume, int32_t pan);
00447F00    00000031    +       void __cdecl S_Audio_Sample_AdjustTrackPitch(int32_t track_id, int32_t pitch);
00447F40    0000002F    +       void __cdecl S_Audio_Sample_CloseTrack(int32_t track_id);
00447FA0    00000005    -R      sub_447FA0
00447FB0    0000009C    +       bool __cdecl S_Audio_Sample_Init(void);
00448050    0000001A    +       bool __cdecl S_Audio_Sample_DSoundEnumerate(struct SOUND_ADAPTER_LIST *adapter_list);
00448070    000000E2    +       BOOL __stdcall S_Audio_Sample_DSoundEnumCallback(LPGUID guid, LPCTSTR description, LPCTSTR module, LPVOID context);
00448160    0000017C    +       void __cdecl S_Audio_Sample_Init2(HWND hwnd);
004482E0    0000001C    +       bool __cdecl S_Audio_Sample_DSoundCreate(GUID *guid);
00448300    000000C4    +       bool __cdecl S_Audio_Sample_DSoundBufferTest(void);
004483D0    0000002A    +       void __cdecl S_Audio_Sample_Shutdown(void);
00448400    00000006    +       bool __cdecl S_Audio_Sample_IsEnabled(void);
00448410    00000005    -R      sub_448410
00448420    00000001    -R      sub_448420
00448430    0000013B    -R      void __cdecl CreateScreenBuffers(void);
00448570    00000094    -R      void __cdecl CreatePrimarySurface(void);
00448610    00000098    -R      void __cdecl CreateBackBuffer(void);
004486B0    0000009D    -R      void __cdecl CreateClipper(void);
00448750    000000D3    -R      void __cdecl CreateWindowPalette(void);
00448830    000000BC    -R      void __cdecl CreateZBuffer(void);
004488F0    0000002B    -R      DWORD __cdecl GetZBufferDepth(void);
00448920    000000A1    -R      void __cdecl CreateRenderBuffer(void);
004489D0    00000070    -R      void __cdecl CreatePictureBuffer(void);
00448A40    000001A4    -R      void __cdecl ClearBuffers(DWORD flags, DWORD fillColor);
00448BF0    0000013C    -R      void __cdecl RestoreLostBuffers(void);
00448D30    000000CF    -R      void __cdecl UpdateFrame(bool needRunMessageLoop, LPRECT rect);
00448E00    0000003B    -R      void __cdecl WaitPrimaryBufferFlip(void);
00448E40    00000003    -R      bool __cdecl RenderInit(void);
00448E50    000003A5    -R      void __cdecl RenderStart(bool isReset);
00449200    000000E6    -R      void __cdecl RenderFinish(bool needToClearTextures);
004492F0    00000204    -R      bool __cdecl ApplySettings(struct APP_SETTINGS *newSettings);
00449500    00000105    -R      void __cdecl FmvBackToGame(void);
00449610    0000023A    -R      void __cdecl GameApplySettings(struct APP_SETTINGS *newSettings);
00449850    00000067    -R      void __cdecl UpdateGameResolution(void);
004498C0    0000000C    -R      LPCTSTR __cdecl DecodeErrorMessage(DWORD errorCode);
004498D0    00000049    -R      BOOL __cdecl ReadFileSync(HANDLE hFile, LPVOID lpBuffer, DWORD nBytesToRead, LPDWORD lpnBytesRead, LPOVERLAPPED lpOverlapped);
00449920    00000188    -R      BOOL __cdecl LoadTexturePages(HANDLE hFile);
00449AB0    000003A0    -R      BOOL __cdecl LoadRooms(HANDLE hFile);
00449E50    00000097    -R      void __cdecl AdjustTextureUVs(bool resetUvAdd);
00449EF0    0000057E    -R      BOOL __cdecl LoadObjects(HANDLE hFile);
0044A470    00000135    -R      BOOL __cdecl LoadSprites(HANDLE hFile);
0044A5B0    000001D6    -R      BOOL __cdecl LoadItems(HANDLE hFile);
0044A790    00000188    -R      BOOL __cdecl LoadDepthQ(HANDLE hFile);
0044A920    00000071    -R      BOOL __cdecl LoadPalettes(HANDLE hFile);
0044A9A0    00000060    -R      BOOL __cdecl LoadCameras(HANDLE hFile);
0044AA00    00000060    -R      BOOL __cdecl LoadSoundEffects(HANDLE hFile);
0044AA60    00000221    -R      BOOL __cdecl LoadBoxes(HANDLE hFile);
0044AC90    00000055    -R      BOOL __cdecl LoadAnimatedTextures(HANDLE hFile);
0044ACF0    00000079    -R      BOOL __cdecl LoadCinematic(HANDLE hFile);
0044AD70    0000008A    -R      BOOL __cdecl LoadDemo(HANDLE hFile);
0044AE00    0000009A    -R      void __cdecl LoadDemoExternal(LPCTSTR levelName);
0044AEA0    00000265    -R      BOOL __cdecl LoadSamples(HANDLE hFile);
0044B110    00000036    -R      void __cdecl ChangeFileNameExtension(char *fileName, const char *fileExt);
0044B150    00000026    -R      LPCTSTR __cdecl GetFullPath(LPCTSTR fileName);
0044B180    000000E0    -R      BOOL __cdecl SelectDrive(void);
0044B260    0000024A    -R      BOOL __cdecl LoadLevel(LPCTSTR fileName, int32_t levelID);
0044B4B0    00000018    -R      BOOL __cdecl S_LoadLevelFile(LPCTSTR fileName, int32_t levelID, GF_LEVEL_TYPE levelType);
0044B4D0    0000002A    -R      void __cdecl S_UnloadLevelFile(void);
0044B500    00000014    -R      void __cdecl S_AdjustTexelCoordinates(void);
0044B520    000000C4    -R      BOOL __cdecl S_ReloadLevelGraphics(BOOL reloadPalettes, BOOL reloadTexPages);
0044B5F0    000000C6    -R      BOOL __cdecl Read_Strings(DWORD dwCount, char **stringTable, char **stringBuffer, LPDWORD lpBufferSize, HANDLE hFile);
0044B6C0    000006D1    -R      BOOL __cdecl S_LoadGameFlow(LPCTSTR fileName);
0044BDA0    0000006B    -R      bool __cdecl PlayFMV(LPCTSTR fileName);
0044BE10    000002E0    -R      void __cdecl WinPlayFMV(LPCTSTR fileName, bool isPlayback);
0044C0F0    00000048    -R      void __cdecl WinStopFMV(bool isPlayback);
0044C140    00000088    -R      bool __cdecl IntroFMV(LPCTSTR fileName1, LPCTSTR fileName2);
0044C1D0    00000023    -R      uint16_t __cdecl S_COLOUR(int32_t red, int32_t green, int32_t blue);
0044C200    00000035    -R      void __cdecl S_DrawScreenLine(int32_t x, int32_t y, int32_t z, int32_t x_len, int32_t y_len, BYTE color_idx, D3DCOLOR *gour, uint16_t flags);
0044C240    00000116    -R      void __cdecl S_DrawScreenBox(int32_t sx, int32_t sy, int32_t z, int32_t width, int32_t height, BYTE color_idx, const struct GOURAUD_OUTLINE *gour, uint16_t flags);
0044C360    0000002E    -R      void __cdecl S_DrawScreenFBox(int32_t sx, int32_t sy, int32_t z, int32_t width, int32_t height, BYTE color_idx, const struct GOURAUD_FILL *gour, uint16_t flags);
0044C390    0000000F    -R      void __cdecl S_FinishInventory(void);
0044C3A0    00000043    -R      void __cdecl S_FadeToBlack(void);
0044C3F0    00000057    -R      void __cdecl S_Wait(int32_t timeout, BOOL inputCheck);
0044C450    0000000E    -R      bool __cdecl S_PlayFMV(LPCTSTR fileName);
0044C460    00000013    -R      bool __cdecl S_IntroFMV(LPCTSTR fileName1, LPCTSTR fileName2);
0044C480    00000144    -R      int16_t __cdecl StartGame(int32_t levelID, GF_LEVEL_TYPE levelType);
0044C5D0    0000009A    -R      int32_t __cdecl GameLoop(BOOL demoMode);
0044C670    00000006    -R      int32_t __cdecl LevelCompleteSequence(void);
0044C680    000001C2    -R      int32_t __cdecl LevelStats(int32_t levelID);
0044C850    00000113    -R      int32_t __cdecl GameStats(int32_t levelID);
0044C970    0000001E    *       int32_t __cdecl Random_GetControl(void);
0044C990    0000000A    -R      void __cdecl SeedRandomControl(int32_t seed);
0044C9A0    0000001E    -R      int32_t __cdecl GetRandomDraw(void);
0044C9C0    0000000A    -R      void __cdecl SeedRandomDraw(int32_t seed);
0044C9D0    00000044    -R      void __cdecl GetValidLevelsList(REQUEST_INFO *req);
0044CA20    0000004C    -R      void __cdecl GetSavedGamesList(REQUEST_INFO *req);
0044CA70    00000233    -R      void __cdecl DisplayCredits(void);
0044CCB0    00000165    -R      BOOL __cdecl S_FrontEndCheck(void);
0044CE20    00000114    -R      int32_t __cdecl S_SaveGame(const void *save_data, uint32_t save_size, int32_t slot_num);
0044CF40    00000096    -R      int32_t __cdecl S_LoadGame(void *save_data, uint32_t save_size, int32_t slot_num);
0044CFE0    00000128    -R      void __cdecl HWR_InitState(void);
0044D110    00000029    -R      void __cdecl HWR_ResetTexSource(void);
0044D140    0000002B    -R      void __cdecl HWR_ResetColorKey(void);
0044D170    00000059    -R      void __cdecl HWR_ResetZBuffer(void);
0044D1D0    00000024    -R      void __cdecl HWR_TexSource(HWR_TEXHANDLE texSource);
0044D200    0000004A    -R      void __cdecl HWR_EnableColorKey(bool state);
0044D250    00000082    *R      void __cdecl HWR_EnableZBuffer(bool z_write_enable, bool z_enable);
0044D2E0    00000016    -R      void __cdecl HWR_BeginScene(void);
0044D310    0000016C    -R      void __cdecl HWR_DrawPolyList(void);
0044D490    0000008E    -R      void __cdecl HWR_LoadTexturePages(int32_t pagesCount, LPVOID pagesBuffer, RGB888 *palette);
0044D520    0000004A    -R      void __cdecl HWR_FreeTexturePages(void);
0044D570    00000035    -R      void __cdecl HWR_GetPageHandles(void);
0044D5B0    00000019    -R      bool __cdecl HWR_VertexBufferFull(void);
0044D5E0    00000022    -R      bool __cdecl HWR_Init(void);
0044D610    0000005C    -R      BOOL __cdecl S_InitialiseSystem(void);
0044D670    00000011    *       void __cdecl GameBuf_Shutdown(void);
0044D690    00000021    -R      void __cdecl init_game_malloc(void);
0044D6C0    0000006C    -R      void *__cdecl game_malloc(DWORD allocSize, DWORD bufIndex);
0044D740    00000034    -R      void __cdecl game_free(DWORD freeSize);
0044D780    000000E8    -R      void __cdecl CalculateWibbleTable(void);
0044D870    0000007F    -R      void __cdecl S_SeedRandom(void);
0044D8F0    00000120    -R      BOOL __cdecl Key(KEYMAP keyMap);
0044DA10    00000AC4    -R      bool __cdecl S_UpdateInput(void);
0044E4E0    0000003C    -R      int32_t __cdecl RenderErrorBox(int32_t errorCode);
0044E520    000001D6    -R      int32_t __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int32_t nShowCmd);
0044E6F0    00000001    x       sub_44E6F0
0044E700    00000064    -R      int32_t __cdecl GameInit(bool skipCDInit);
0044E770    00000055    *       void __cdecl Shell_Cleanup(void);
0044E7A0    0000007C    -R      int32_t __cdecl WinGameStart(void);
0044E820    00000039    *       void __cdecl Shell_Shutdown(void);
0044E860    00000017    -R      sub_44E860
0044E880    00000010    -R      sub_44E880
0044E890    0000003C    +       void __cdecl Shell_ExitSystem(const char *message);
0044E8E0    0000010F    -R      void __cdecl ScreenShotPCX(void);
0044E9F0    000000AE    -R      DWORD __cdecl CompPCX(BYTE *bitmap, DWORD width, DWORD height, RGB888 *palette, BYTE **pcxData);
0044EAA0    000000D2    -R      DWORD __cdecl EncodeLinePCX(BYTE *src, DWORD width, BYTE *dst);
0044EB80    0000003E    -R      DWORD __cdecl EncodePutPCX(BYTE value, BYTE num, BYTE *buffer);
0044EBC0    000001F5    -R      void __cdecl ScreenShot(LPDDS screen);
0044EDC0    0000007F    -R      void __cdecl do_inventory_options(INVENTORY_ITEM *item);
0044EED0    00000648    -R      void __cdecl do_passport_option(INVENTORY_ITEM *item);
0044F520    000002DA    -R      void __cdecl do_detail_option(INVENTORY_ITEM *item);
0044F800    0000049D    -R      void __cdecl do_sound_option(INVENTORY_ITEM *item);
0044FCA0    000000C0    -R      void __cdecl do_compass_option(INVENTORY_ITEM *item);
0044FD60    0000007E    -R      void __cdecl FlashConflicts(void);
0044FDE0    00000040    -R      void __cdecl DefaultConflict(void);
0044FE20    000006F4    -R      void __cdecl do_control_option(INVENTORY_ITEM *item);
00450530    000004D0    -R      void __cdecl S_ShowControls(void);
00450A00    00000096    -R      void __cdecl S_ChangeCtrlText(void);
00450AA0    0000003B    -R      void __cdecl S_RemoveCtrlText(void);
00450AE0    00000006    -R      int32_t __cdecl GetRenderHeight(void);
00450AF0    00000006    -R      int32_t __cdecl GetRenderWidth(void);
00450B00    000000E4    -R      void __cdecl S_InitialisePolyList(BOOL clearBackBuffer);
00450BF0    00000036    -R      DWORD __cdecl S_DumpScreen(void);
00450C30    0000000B    -R      void __cdecl S_ClearScreen(void);
00450C40    00000037    -R      void __cdecl S_InitialiseScreen(GF_LEVEL_TYPE levelType);
00450C80    00000089    -R      void __cdecl S_OutputPolyList(void);
00450CC0    00000270    -R      int32_t __cdecl S_GetObjectBounds(int16_t *bPtr);
00450F30    00000046    -R      void __cdecl S_InsertBackPolygon(int32_t x1, int32_t y1, int32_t x2, int32_t y2);
00450F80    000001F1    -R      void __cdecl S_PrintShadow(int16_t radius, int16_t *bPtr, ITEM_INFO *item);
00451180    000002F6    -R      void __cdecl S_CalculateLight(int32_t x, int32_t y, int32_t z, int16_t room_num);
00451480    00000031    -R      void __cdecl S_CalculateStaticLight(int16_t adder);
004514C0    00000124    -R      void __cdecl S_CalculateStaticMeshLight(int32_t x, int32_t y, int32_t z, int32_t shade1, int32_t shade2, ROOM_INFO *room);
004515F0    00000206    -R      void __cdecl S_LightRoom(ROOM_INFO *room);
00451800    000001CC    -R      void __cdecl S_DrawHealthBar(int32_t percent);
004519D0    000001F6    -R      void __cdecl S_DrawAirBar(int32_t percent);
00451BD0    000000C0    -R      void __cdecl AnimateTextures(int32_t nTicks);
00451C90    00000051    -R      void __cdecl S_SetupBelowWater(BOOL underwater);
00451CF0    00000021    -R      void __cdecl S_SetupAboveWater(BOOL underwater);
00451D20    000000B1    -R      void __cdecl S_AnimateTextures(int32_t nTicks);
00451DE0    00000105    -R      void __cdecl S_DisplayPicture(LPCTSTR fileName, BOOL isTitle);
00451EF0    0000007E    -R      void __cdecl S_SyncPictureBufferPalette(void);
00451F70    0000001C    -R      void __cdecl S_DontDisplayPicture(void);
00451F80    0000000D    -R      void __cdecl ScreenDump(void);
00451F90    00000010    -R      void __cdecl ScreenPartialDump(void);
00451FA0    000001C9    -R      void __cdecl FadeToPal(int32_t fadeValue, RGB888 *palette);
00452170    00000026    -R      void __cdecl ScreenClear(bool isPhdWinSize);
004521A0    000000AB    -R      void __cdecl S_CopyScreenToBuffer(void);
00452250    00000254    -R      void __cdecl S_CopyBufferToScreen(void);
004522A0    000000FA    -R      BOOL __cdecl DecompPCX(LPCBYTE pcx, DWORD pcxSize, LPBYTE pic, RGB888 *pal);
004523A0    00000005    -R      sub_4523A0
004523B0    00000001    -R      sub_4523B0
004523C0    0000004E    -R      bool __cdecl OpenGameRegistryKey(LPCTSTR key);
00452410    00000005    -R      LONG __cdecl CloseGameRegistryKey(void);
00452420    00000262    -R      bool __cdecl SE_WriteAppSettings(APP_SETTINGS *settings);
00452690    00000348    -R      int32_t __cdecl SE_ReadAppSettings(APP_SETTINGS *settings);
004529E0    000000D7    -R      bool __cdecl SE_GraphicsTestStart(void);
00452AB0    00000014    -R      void __cdecl SE_GraphicsTestFinish(void);
00452AD0    00000003    -R      int32_t __cdecl SE_GraphicsTestExecute(void);
00452AE0    00000057    -R      int32_t __cdecl SE_GraphicsTest(void);
00452B40    000000C7    -R      bool __cdecl SE_SoundTestStart(void);
00452C00    00000005    -R      void __cdecl SE_SoundTestFinish(void);
00452C10    0000003D    -R      int32_t __cdecl SE_SoundTestExecute(void);
00452C50    00000057    -R      int32_t __cdecl SE_SoundTest(void);
00452CB0    0000003E    -R      int32_t __stdcall SE_PropSheetCallback(HWND hwndDlg, UINT uMsg, LPARAM lParam);
00452CF0    0000005D    -R      LRESULT __stdcall SE_NewPropSheetWndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
00452D50    000002DE    -R      bool __cdecl SE_ShowSetupDialog(HWND hParent, bool isDefault);
00453030    00000351    -R      INT_PTR __stdcall SE_GraphicsDlgProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
004533F0    000001DC    -R      void __cdecl SE_GraphicsDlgFullScreenModesUpdate(HWND hwndDlg);
004535E0    00000017    -R      void __cdecl SE_GraphicsAdapterSet(HWND hwndDlg, DISPLAY_ADAPTER_NODE *adapter);
00453600    00000735    -R      void __cdecl SE_GraphicsDlgUpdate(HWND hwndDlg);
00453D40    0000017C    -R      void __cdecl SE_GraphicsDlgInit(HWND hwndDlg);
00453EC0    00000149    -R      INT_PTR __stdcall SE_SoundDlgProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
00454050    0000000A    -R      void __cdecl SE_SoundAdapterSet(HWND hwndDlg, SOUND_ADAPTER_NODE *adapter);
00454060    0000011B    -R      void __cdecl SE_SoundDlgUpdate(HWND hwndDlg);
00454180    000000BE    -R      void __cdecl SE_SoundDlgInit(HWND hwndDlg);
00454240    00000106    -R      INT_PTR __stdcall SE_ControlsDlgProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
00454350    0000000A    -R      void __cdecl SE_ControlsJoystickSet(HWND hwndDlg, JOYSTICK_NODE *joystick);
00454360    00000068    -R      void __cdecl SE_ControlsDlgUpdate(HWND hwndDlg);
004543D0    000000BD    -R      void __cdecl SE_ControlsDlgInit(HWND hwndDlg);
00454490    0000008A    -R      INT_PTR __stdcall SE_OptionsDlgProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
00454520    00000234    -R      void __cdecl SE_OptionsDlgUpdate(HWND hwndDlg);
00454760    0000004B    -R      void __cdecl SE_OptionsStrCat(LPTSTR *dstString, bool isEnabled, bool *isNext, LPCTSTR srcString);
004547B0    000000DC    -R      INT_PTR __stdcall SE_AdvancedDlgProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
004548B0    00000093    -R      void __cdecl SE_AdvancedDlgUpdate(HWND hwndDlg);
00454950    0000000E    -R      void __cdecl SE_AdvancedDlgInit(HWND hwndDlg);
00454960    00000011    -R      HWND __cdecl SE_FindSetupDialog(void);
00454980    000002D0    -R      BOOL __cdecl GameMain(void);
00454C50    00000110    -R      int16_t __cdecl TitleSequence(void);
00454D60    0000032D    -R      void __cdecl CheckCheatMode(void);
004550C0    0000007D    -R      void __cdecl S_SaveSettings(void);
00455140    000000DB    -R      void __cdecl S_LoadSettings(void);
00455220    00000046    +       int32_t __cdecl S_Audio_Sample_OutPlay(int32_t sample_id, uint16_t volume, int32_t pitch, int32_t pan);
00455270    0000002A    +       int32_t __cdecl S_Audio_Sample_CalculateSampleVolume(int32_t volume);
004552A0    00000026    +       int32_t __cdecl S_Audio_Sample_CalculateSamplePan(int16_t pan);
004552D0    00000046    +       int32_t __cdecl S_Audio_Sample_OutPlayLooped(int32_t track_id, uint16_t volume, int32_t pitch, int32_t pan);
00455320    00000039    +       void __cdecl S_Audio_Sample_OutSetPanAndVolume(int32_t track_id, int32_t pan, uint16_t volume);
00455360    0000001C    +       void __cdecl S_Audio_Sample_OutSetPitch(int32_t track_id, int32_t pitch);
00455380    0000000A    +       void __cdecl Sound_SetMasterVolume(int32_t volume);
00455390    00000017    +       void __cdecl S_Audio_Sample_OutCloseTrack(int32_t track_id);
004553B0    0000003C    +       void __cdecl S_Audio_Sample_OutCloseAllTracks(void);
004553C0    0000001F    +       BOOL __cdecl S_Audio_Sample_OutIsTrackPlaying(int32_t track_id);
004553E0    00000077    +       bool __cdecl Music_Init(void);
00455460    00000051    +       void __cdecl Music_Shutdown(void);
00455500    0000006F    +       void __cdecl Music_Play(int16_t track_id, bool is_looped);
00455570    00000039    +       void __cdecl Music_Stop(void);
004555B0    00000084    +       bool __cdecl Music_PlaySynced(int32_t trackID);
00455640    00000061    +       int32_t __cdecl Music_GetFrames(void);
004556B0    00000092    +       void __cdecl Music_SetVolume(int32_t volume);
004557A0    00000137    -R      void __cdecl CopyBitmapPalette(RGB888 *srcPal, BYTE *srcBitmap, int32_t bitmapSize, RGB888 *destPal);
004558E0    000000C8    -R      BYTE __cdecl FindNearestPaletteEntry(RGB888 *palette, int32_t red, int32_t green, int32_t blue, bool ignoreSysPalette);
004559B0    000000AE    -R      void __cdecl SyncSurfacePalettes(void *srcData, int32_t width, int32_t height, int32_t srcPitch, RGB888 *srcPalette, void *dstData, int32_t dstPitch, RGB888 *dstPalette, bool preserveSysPalette);
00455A60    00000087    -R      int32_t __cdecl CreateTexturePalette(RGB888 *pal);
00455AF0    0000001C    -R      int32_t __cdecl GetFreePaletteIndex(void);
00455B10    00000023    -R      void __cdecl FreePalette(int32_t paletteIndex);
00455B40    00000012    -R      void __cdecl SafeFreePalette(int32_t paletteIndex);
00455B90    0000006A    -R      int32_t __cdecl CreateTexturePage(int32_t width, int32_t height, bool alpha);
00455C00    0000001C    -R      int32_t __cdecl GetFreeTexturePageIndex(void);
00455C20    00000098    -R      bool __cdecl CreateTexturePageSurface(TEXPAGE_DESC *desc);
00455CC0    00000174    -R      bool __cdecl TexturePageInit(TEXPAGE_DESC *page);
00455E40    00000025    -R      LPDIRECT3DTEXTURE2 __cdecl Create3DTexture(LPDDS surface);
00455E70    00000020    -R      void __cdecl SafeFreeTexturePage(int32_t pageIndex);
00455E90    00000032    -R      void __cdecl FreeTexturePage(int32_t pageIndex);
00455ED0    0000003B    -R      void __cdecl TexturePageReleaseVidMemSurface(TEXPAGE_DESC *page);
00455F10    00000026    -R      void __cdecl FreeTexturePages(void);
00455F40    000000A2    -R      bool __cdecl LoadTexturePage(int32_t pageIndex, bool reset);
00455FF0    00000035    -R      bool __cdecl ReloadTextures(bool reset);
00456030    0000003E    -R      HWR_TEXHANDLE __cdecl GetTexturePageHandle(int32_t pageIndex);
00456070    000000F5    -R      int32_t __cdecl AddTexturePage8(int32_t width, int32_t height, BYTE *pageBuffer, int32_t palIndex);
00456170    00000196    -R      int32_t __cdecl AddTexturePage16(int32_t width, int32_t height, BYTE *pageBuffer);
00456310    0000011A    -R      HRESULT __stdcall EnumTextureFormatsCallback(LPDDSDESC lpDdsd, LPVOID lpContext);
00456430    00000025    -R      HRESULT __cdecl EnumerateTextureFormats(void);
00456460    00000030    -R      void __cdecl CleanupTextures(void);
00456470    0000001F    -R      bool __cdecl InitTextures(void);
00456490    00000040    -R      void __cdecl UpdateTicks(void);
004564D0    00000051    -R      bool __cdecl TIME_Init(void);
00456530    00000058    -R      DWORD __cdecl Sync(void);
00456590    00000036    -R      LPVOID __cdecl UT_LoadResource(LPCTSTR lpName, LPCTSTR lpType);
004565D0    00000060    -R      void __cdecl UT_InitAccurateTimer(void);
00456630    0000004E    -R      double __cdecl UT_Microseconds(void);
00456680    0000006F    -R      BOOL __cdecl UT_CenterWindow(HWND hWnd);
004566F0    0000002C    -R      LPTSTR __cdecl UT_FindArg(LPCTSTR str);
00456720    00000018    -R      int32_t __cdecl UT_MessageBox(LPCTSTR lpText, HWND hWnd);
00456740    00000042    -R      int32_t __cdecl UT_ErrorBox(UINT uID, HWND hWnd);
00456790    00000051    -R      LPCTSTR __cdecl GuidBinaryToString(GUID *guid);
004567F0    000000AA    -R      bool __cdecl GuidStringToBinary(LPCTSTR lpString, GUID *guid);
004568A0    00000030    -R      BOOL __cdecl OpenRegistryKey(LPCTSTR lpSubKey);
004568D0    0000000F    -R      bool __cdecl IsNewRegistryKeyCreated(void);
004568E0    0000000D    -R      LONG __cdecl CloseRegistryKey(void);
004568F0    0000001E    -R      LONG __cdecl SetRegistryDwordValue(LPCTSTR lpValueName, DWORD value);
00456910    0000002A    -R      LONG __cdecl SetRegistryBoolValue(LPCTSTR lpValueName, bool value);
00456940    00000036    -R      LONG __cdecl SetRegistryFloatValue(LPCTSTR lpValueName, double value);
00456980    00000037    -R      LONG __cdecl SetRegistryBinaryValue(LPCTSTR lpValueName, LPBYTE value, DWORD valueSize);
004569C0    0000004A    -R      LONG __cdecl SetRegistryStringValue(LPCTSTR lpValueName, LPCTSTR value, int32_t length);
00456A10    00000013    -R      LONG __cdecl DeleteRegistryValue(LPCTSTR lpValueName);
00456A30    0000005E    -R      bool __cdecl GetRegistryDwordValue(LPCTSTR lpValueName, DWORD *pValue, DWORD defaultValue);
00456A90    00000076    -R      bool __cdecl GetRegistryBoolValue(LPCTSTR lpValueName, bool *pValue, bool defaultValue);
00456B10    0000005C    -R      bool __cdecl GetRegistryFloatValue(LPCTSTR lpValueName, double *value, double defaultValue);
00456B70    00000071    -R      bool __cdecl GetRegistryBinaryValue(LPCTSTR lpValueName, LPBYTE value, DWORD valueSize, LPBYTE defaultValue);
00456BF0    00000095    -R      bool __cdecl GetRegistryStringValue(LPCTSTR lpValueName, LPTSTR value, DWORD maxSize, LPCTSTR defaultValue);
00456C90    00000091    -R      bool __cdecl GetRegistryGuidValue(LPCTSTR lpValueName, GUID *value, GUID *defaultValue);
00456D30    00000037    -R      void __thiscall SE_ReleaseBitmapResource(BITMAP_RESOURCE *bmpRsrc);
00456D70    000000C4    -R      void __thiscall SE_LoadBitmapResource(BITMAP_RESOURCE *bmpRsrc, LPCTSTR lpName);
00456E40    00000064    -R      void __thiscall SE_DrawBitmap(BITMAP_RESOURCE *bmpRsrc, HDC hdc, int32_t x, int32_t y);
00456EB0    0000001C    -R      void __thiscall SE_UpdateBitmapPalette(BITMAP_RESOURCE *bmpRsrc, HWND hWnd, HWND hSender);
00456ED0    00000057    -R      void __thiscall SE_ChangeBitmapPalette(BITMAP_RESOURCE *bmpRsrc, HWND hWnd);
00456F30    00000061    -R      bool __cdecl SE_RegisterSetupWindowClass(void);
00456FA0    0000023A    -R      LRESULT __stdcall SE_SetupWindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
004571E0    00000026    -R      void __cdecl SE_PassMessageToImage(HWND hWnd, UINT uMsg, WPARAM wParam);
00457210    0000006E    -R      void __cdecl UT_MemBlt(BYTE *dstBuf, DWORD dstX, DWORD dstY, DWORD width, DWORD height, DWORD dstPitch, BYTE *srcBuf, DWORD srcX, DWORD srcY, DWORD srcPitch);
00457280    0000001E    +       void __cdecl Matrix_Push(void);
0045729E    00000033    +       void __cdecl Matrix_PushUnit(void);
004572D4    00000061    +       void __fastcall Output_FlatA(int32_t y1, int32_t y2, BYTE colorIdx); // actually, __watcall, which is esoteric and rarely supported
00457335    0000013A    +       void __fastcall Output_TransA(int32_t y1, int32_t y2, BYTE depthQ); // actually, __watcall, which is esoteric and rarely supported
0045746F    00000160    +       void __fastcall Output_GourA(int32_t y1, int32_t y2, BYTE colorIdx); // actually, __watcall, which is esoteric and rarely supported
004575CF    000002FD    +       void __fastcall Output_GTMapA(int32_t y1, int32_t y2, BYTE *texPage); // actually, __watcall, which is esoteric and rarely supported
004578CC    00000341    +       void __fastcall Output_WGTMapA(int32_t y1, int32_t y2, BYTE *texPage); // actually, __watcall, which is esoteric and rarely supported
00457C10    00000048    +       int32_t __fastcall Math_Atan(int32_t x, int32_t y);
00457C58    00000006    +       int32_t __fastcall Math_Cos(int16_t angle);
00457C5E    0000001B    +       int32_t __fastcall Math_Sin(int16_t angle);
00457C79    0000001A    +       int32_t __fastcall Math_SinImpl(int16_t angle);
00457C93    0000002C    +       uint32_t  __fastcall Math_Sqrt(uint32_t n);

# VARIABLES
#   Flags:
#   - to do
#   + decompiled
# Offset    Flags   Declaration

00464060    -       int32_t g_PerspectiveDistance;
00464068    -       void (*__cdecl g_PolyDrawRoutines[9])(const int16_t *);
0046408C    -       float g_RhwFactor;
004640BC    -       int16_t g_CD_TrackID;
004640C4    -       int32_t g_FlipEffect;
004641F8    -       void (*__cdecl g_EffectRoutines[32])(struct ITEM_INFO *item);
00465A60    -       int16_t g_OptionMusicVolume;
00465AD4    -       int32_t g_JumpPermitted = 1;
00465AD8    -       int16_t g_LaraOldSlideAngle = 1;
00465CD0    -       void (*__cdecl g_LaraControlRoutines[71])(struct ITEM_INFO *item, struct COLL_INFO *coll);
00465DF0    -       void (*__cdecl g_ExtraControlRoutines[11])(struct ITEM_INFO *item, struct COLL_INFO *coll);
00465E20    -       void (*__cdecl g_LaraCollisionRoutines[71])(struct ITEM_INFO *item, struct COLL_INFO *coll);
00466290    -       int8_t g_TextSpacing[80];
004662E0    -       int8_t g_TextASCIIMap[];
00467DD0    +       const int32_t g_AtanBaseTable[8];
00467DF0    +       const int16_t g_AtanAngleTable[0x800];
00468DF4    +       const int16_t g_SinTable[0x402];
0046C300    -       int32_t g_MidSort = 0;
0046C304    -       float g_ViewportAspectRatio = 0.0f;
0046C308    -       int32_t g_XGenY1;
0046C30C    -       int32_t g_XGenY2;
0046C310    -       struct GOURAUD_ENTRY g_GouraudTable[256];
0046E310    -       int32_t g_PhdWinTop;
00470318    -       int32_t g_LsAdder;
0047031C    -       float g_FltWinBottom;
00470320    -       float g_FltResZBuf;
00470324    -       float g_FltResZ;
00470328    -       void (*__cdecl g_Output_InsertTransQuad)(int32_t x, int32_t y, int32_t width, int32_t height, int32_t z);
0047032C    -       int32_t g_PhdWinHeight;
00470330    -       int32_t g_PhdWinCenterX;
00470334    -       int32_t g_PhdWinCenterY;
00470338    -       int16_t g_LsYaw;
0047033C    -       void (*__cdecl g_Output_InsertTrans8)(const struct PHD_VBUF *vbuf, int16_t shade);
00470340    -       float g_FltWinTop;
00470348    -       struct SORT_ITEM g_SortBuffer[4000];
00478048    -       float g_FltWinLeft;
0047804C    -       int16_t g_PhdWinMinY;
00478058    -       int32_t g_PhdFarZ;
0047805C    -       float g_FltRhwOPersp;
00478060    -       int32_t g_PhdWinBottom;
00478064    -       int32_t g_PhdPersp;
00478068    -       int32_t g_PhdWinLeft;
0047806C    -       void (*__cdecl g_Output_InsertFlatRect)(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t z, uint8_t color_idx);
00478070    -       int16_t g_Info3DBuffer[120000];
004B29F0    -       int32_t g_PhdWinMaxX;
004B29F4    -       int32_t g_PhdNearZ;
004B29F8    -       float g_FltResZORhw;
004B29FC    -       float g_FltFarZ;
004B2A00    -       float g_FltWinCenterX;
004B2A04    -       float g_FltWinCenterY;
004B2A08    -       int32_t g_PhdScreenHeight;
004B2A0C    -       uint8_t *g_PrintSurfacePtr;
004B2A10    -       int16_t g_PhdWinMinX;
004B2A14    -       float g_FltPerspONearZ;
004B2A18    -       float g_FltRhwONearZ;
004B2A1C    -       int32_t g_PhdWinMaxY;
004B2A20    -       void (*__cdecl g_Output_InsertSprite)(int32_t z, int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t sprite_idx, int16_t shade);
004B2A24    -       float g_FltNearZ;
004B2A28    -       struct MATRIX *g_MatrixPtr;
004B2A2C    -       const int16_t *(*__cdecl g_Output_DrawObjectGT3)(const int16_t*, int32_t, enum SORT_TYPE);
004B2A30    -       const int16_t *(*__cdecl g_Output_DrawObjectGT4)(const int16_t*, int32_t, enum SORT_TYPE);
004B2A38    -       int32_t g_RandomTable[32];
004B2AB8    -       float g_FltPersp;
004B2AC0    -       struct MATRIX g_W2VMatrix;
004B2AF0    -       int16_t *g_Info3DPtr;
004B2AF4    -       int32_t g_PhdWinWidth;
004B2AF8    -       void (*__cdecl g_Output_DrawLine)(int32_t, int32_t, int32_t, int32_t, int32_t, uint8_t);
004B2B00    -       struct PHD_TEXTURE g_PhdTextureInfo[0x800];
004BCB00    -       int32_t g_PhdViewDistance;
004BCB04    -       int16_t g_LsPitch;
004BCB08    -       const int16_t *(*__cdecl g_Output_DrawObjectG4)(const int16_t*,int32_t, enum SORT_TYPE);
004BCB10    -       int16_t g_ShadesTable[32];
004BCB50    -       const int16_t *(*__cdecl g_Output_DrawObjectG3)(const int16_t*,int32_t, enum SORT_TYPE);
004BCB58    -       struct MATRIX g_MatrixStack[];
004BD2D8    -       struct DEPTHQ_ENTRY g_DepthQTable[32];
004BF3D8    -       int32_t g_PhdScreenWidth;
004BF3DC    -       int32_t g_LsDivider;
004BF3E0    -       struct PHD_VBUF g_PhdVBuf[1500];
004CAF60    -       void *g_XBuffer;
004D6AE0    -       uint8_t *g_TexturePageBuffer8[32];
004D6B60    -       float g_FltWinRight;
004D6B68    -       struct PHD_VECTOR g_LsVectorView;
004D6B78    -       float g_WibbleTable[32];
004D6BF8    -       int32_t g_PhdWinRight;
004D6BFC    -       int32_t g_SurfaceCount;
004D6C00    -       struct SORT_ITEM *g_Sort3DPtr;
004D6C0C    -       int32_t g_WibbleOffset;
004D6C10    -       int32_t g_IsWibbleEffect;
004D6C14    -       int32_t g_IsWaterEffect;
004D6CD8    -       struct VERTEX_INFO g_VBuffer[20];
004D7380    -       PALETTEENTRY g_GamePalette16[256];
004D7780    -       int32_t g_CineFrameCurrent;
004D778C    -       int32_t g_IsChunkyCamera;
004D77A0    -       int32_t g_LOSNumRooms = 0;
004D77AC    -       int32_t g_IsDemoLevelType;
004D7C38    -       int32_t g_LevelItemCount;
004D7C80    -       int32_t g_SoundTrackIds[128];
004D7F10    -       HWND g_GameWindowHandle;
004D8378    -       uint8_t g_IsGameToExit;
004D8570    -       DWORD g_SampleFreqs[256];
004D8970    -       struct SOUND_ADAPTER_LIST g_SoundAdapterList;
004D8980    -       LPDIRECTSOUNDBUFFER g_SampleBuffers[256];
004D8D80    -       uint8_t g_IsSoundEnabled;
004D8D84    -       LPDIRECTSOUND g_DSound;
004D8D88    -       int32_t g_ChannelSamples[32];
004D8E08    -       LPDIRECTSOUNDBUFFER g_ChannelBuffers[32];
004D8E8C    -       struct SOUND_ADAPTER g_CurrentSoundAdapter;
004D8EAC    -       struct SOUND_ADAPTER_NODE *g_PrimarySoundAdapter;
004D8EB0    -       LPDDS g_RenderBufferSurface;
004D92B8    -       LPDDS g_ThirdBufferSurface;
004D92BC    -       LPDDS g_PictureBufferSurface;
004D92C0    -       LPDDS g_ZBufferSurface;
004D92C8    -       LPDDS g_PrimaryBufferSurface;
004D9EC4    -       int32_t g_LevelComplete;
004D9ED8    -       D3DTLVERTEX g_HWR_VertexBuffer[0x2000];
00519F60    -       D3DTLVERTEX *g_HWR_VertexPtr;
0051A208    -       int32_t g_Input;
0051B918    -       RECT g_PhdWinRect;
0051BCC0    -       struct APP_SETTINGS g_SavedAppSettings;
0051BD20    -       char g_ErrorMessage[128];
0051BDA8    -       int32_t g_MasterVolume;
0051BDAC    -       MCIDEVICEID g_MciDeviceID;
0051BDB0    -       int32_t g_CD_LoopTrack;
0051C820    -       struct TEXTSTRING g_TextstringTable[64];
0051D6A0    -       int16_t g_TextstringCount = 0;
0051D6C0    -       char g_TextstringBuffers[64][64];
0051E6C4    -       int32_t g_SoundIsActive;
0051E9E0    -       struct SAVEGAME_INFO g_SaveGame;
005206E0    -       struct LARA_INFO g_Lara;
005207BC    -       struct ITEM_INFO *g_LaraItem;
005207C0    -       struct FX_INFO *g_Effects;
005207C4    -       int16_t g_NextEffectFree;
005207C6    -       int16_t g_NextItemFree;
005207C8    -       int16_t g_NextItemActive;
005207CA    -       int16_t g_NextEffectActive;
005207CC    -       int16_t g_PrevItemActive;
00521FDC    -       int32_t g_SoundFxCount;
00522000    -       struct OBJECT_INFO g_Objects[265];
005252B0    -       int16_t **g_Meshes;
005252C0    -       struct MATRIX g_IMMatrixStack[256];
005258F0    -       int32_t g_IMFrac;
005258F4    -       struct ANIM_STRUCT *g_Anims;
00525BE8    -       int32_t *g_Bones;
00526180    -       int32_t g_RoomCount;
00526184    -       int32_t g_IMRate;
00526188    -       struct MATRIX *g_IMMatrixPtr;
0052618C    -       struct ROOM_INFO *g_Rooms;
00526240    -       int32_t g_FlipStatus;
00526288    -       int16_t *g_TriggerIndex;
005262A0    -       int32_t g_LOSRooms[20];
005262F0    -       struct ITEM_INFO *g_Items;
005262F6    -       int16_t g_NumCineFrames;
005262F8    -       CINE_FRAME *g_CineData = NULL;
00526300    -       struct PHD_3DPOS g_CinePos;
00526314    -       int16_t g_CineFrameIdx;
00526320    -       struct CAMERA_INFO g_Camera;
005263CC    -       struct BOX_INFO *g_Boxes;
