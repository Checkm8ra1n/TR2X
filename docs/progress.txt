# TYPES
typedef int16_t PHD_ANGLE;

typedef struct MATRIX {
    int32_t _00;
    int32_t _01;
    int32_t _02;
    int32_t _03;
    int32_t _10;
    int32_t _11;
    int32_t _12;
    int32_t _13;
    int32_t _20;
    int32_t _21;
    int32_t _22;
    int32_t _23;
} MATRIX;

typedef struct PHD_VECTOR {
    int32_t x;
    int32_t y;
    int32_t z;
} PHD_VECTOR;

typedef struct PHD_3DPOS {
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t x_rot;
    int16_t y_rot;
    int16_t z_rot;
} PHD_3DPOS;

typedef struct SPHERE {
    int32_t x;
    int32_t y;
    int32_t z;
    int32_t r;
} SPHERE;

typedef struct TEXTSTRING {
    uint32_t flags;
    uint16_t text_flags;
    uint16_t bgnd_flags;
    uint16_t outl_flags;
    int16_t xpos;
    int16_t ypos;
    int16_t zpos;
    int16_t letter_spacing;
    int16_t word_spacing;
    int16_t flash_rate;
    int16_t flash_count;
    int16_t bgnd_colour;
    uint16_t *bgnd_gour;
    int16_t outl_colour;
    uint16_t *outl_gour;
    int16_t bgnd_size_x;
    int16_t bgnd_size_y;
    int16_t bgnd_off_x;
    int16_t bgnd_off_y;
    int16_t bgnd_off_z;
    int32_t scale_h;
    int32_t scale_v;
    char *string;
} TEXTSTRING;

typedef struct PHD_VBUF {
    float xv;
    float yv;
    float zv;
    float rhw;
    float xs;
    float ys;
    int16_t clip;
    int16_t g;
    int16_t u;
    int16_t v;
} PHD_VBUF;

typedef struct PHD_UV {
    uint16_t u;
    uint16_t v;
} PHD_UV;

typedef struct PHD_TEXTURE {
    uint16_t draw_type;
    uint16_t tex_page;
    PHD_UV uv[4];
} PHD_TEXTURE;

typedef struct POINT_INFO {
    float xv;
    float yv;
    float zv;
    float rhw;
    float xs;
    float ys;
    float u;
    float v;
    float g;
} POINT_INFO;

typedef struct VERTEX_INFO {
    float x;
    float y;
    float rhw;
    float u;
    float v;
    float g;
} VERTEX_INFO;

typedef enum SORT_TYPE {
    ST_AVG_Z,
    ST_MAX_Z,
    ST_FAR_Z,
} SORT_TYPE;

typedef struct COLL_SIDE {
    int32_t floor;
    int32_t ceiling;
    int32_t type;
} COLL_SIDE;

typedef struct COLL_INFO {
    struct COLL_SIDE side_mid;
    struct COLL_SIDE side_front;
    struct COLL_SIDE side_left;
    struct COLL_SIDE side_right;
    int32_t radius;
    int32_t bad_pos;
    int32_t bad_neg;
    int32_t bad_ceiling;
    struct PHD_VECTOR shift;
    struct PHD_VECTOR old;
    int16_t old_anim_state;
    int16_t old_anim_num;
    int16_t old_frame_num;
    int16_t facing;
    int16_t quadrant;
    int16_t coll_type;
    int16_t *trigger;
    int8_t x_tilt;
    int8_t z_tilt;
    int8_t hit_by_baddie;
    int8_t hit_static;
    uint16_t flags;
} COLL_INFO;

typedef struct ITEM_INFO {
    int32_t floor;
    uint32_t touch_bits;
    uint32_t mesh_bits;
    int16_t object_num;
    int16_t current_anim_state;
    int16_t goal_anim_state;
    int16_t required_anim_state;
    int16_t anim_num;
    int16_t frame_num;
    int16_t room_num;
    int16_t next_item;
    int16_t next_active;
    int16_t speed;
    int16_t fall_speed;
    int16_t hit_points;
    int16_t box_num;
    int16_t timer;
    uint16_t flags;
    int16_t shade1;
    int16_t shade2;
    int16_t carried_item;
    void *data;
    struct PHD_3DPOS pos;
    uint16_t active : 1;
    uint16_t status : 2;
    uint16_t gravity : 1;
    uint16_t hit_status : 1;
    uint16_t collidable : 1;
    uint16_t looked_at : 1;
    uint16_t dynamic_light : 1;
    uint16_t clear_body : 1;
    uint16_t pad : 7;
} ITEM_INFO;

typedef struct FLOOR_INFO {
    int16_t idx;
    int16_t box;
    int8_t pit_room;
    int8_t floor;
    int8_t sky_room;
    int8_t ceiling;
} FLOOR_INFO;

typedef struct WEAPON_INFO {
    int16_t lock_angles[4];
    int16_t left_angles[4];
    int16_t right_angles[4];
    int16_t aim_speed;
    int16_t shot_accuracy;
    int32_t gun_height;
    int32_t damage;
    int32_t target_dist;
    int16_t recoil_frame;
    int16_t flash_time;
    int16_t sample_num;
} WEAPON_INFO;

typedef struct FX_INFO {
    struct PHD_3DPOS pos;
    int16_t room_num;
    int16_t object_num;
    int16_t next_fx;
    int16_t next_active;
    int16_t speed;
    int16_t fallspeed;
    int16_t frame_num;
    int16_t counter;
    int16_t shade;
} FX_INFO;

typedef struct AI_INFO {
    int16_t zone_num;
    int16_t enemy_zone;
    int32_t distance;
    int32_t ahead;
    int32_t bite;
    int16_t angle;
    int16_t enemy_facing;
} AI_INFO;

typedef struct BOX_NODE {
    int16_t exit_box;
    uint16_t search_num;
    int16_t next_expansion;
    int16_t box_num;
} BOX_NODE;

typedef struct LOT_INFO {
    struct BOX_NODE *node;
    int16_t head;
    int16_t tail;
    uint16_t search_num;
    uint16_t block_mask;
    int16_t step;
    int16_t drop;
    int16_t fly;
    int16_t zone_count;
    int16_t target_box;
    int16_t required_box;
    struct PHD_VECTOR target;
} LOT_INFO;

typedef enum MOOD_TYPE {
    MOOD_BORED = 0,
    MOOD_ATTACK = 1,
    MOOD_ESCAPE = 2,
    MOOD_STALK = 3,
} MOOD_TYPE;

typedef enum TARGET_TYPE {
    TARGET_NONE = 0,
    TARGET_PRIMARY = 1,
    TARGET_SECONDARY = 2,
} TARGET_TYPE;

typedef struct BITE_INFO {
    int32_t x;
    int32_t y;
    int32_t z;
    int32_t mesh_idx;
} BITE_INFO;

typedef struct ANIM_STRUCT {
    int16_t *frame_ptr;
    int16_t interpolation;
    int16_t current_anim_state;
    int32_t velocity;
    int32_t acceleration;
    int16_t frame_base;
    int16_t frame_end;
    int16_t jump_anim_num;
    int16_t jump_frame_num;
    int16_t num_changes;
    int16_t change_idx;
    int16_t num_commands;
    int16_t command_idx;
} ANIM_STRUCT;

typedef struct DOOR_INFO {
    int16_t room;
    int16_t x;
    int16_t y;
    int16_t z;
    struct POS_3D vertex[4];
} DOOR_INFO;

typedef struct DOOR_INFOS {
    int16_t count;
    struct DOOR_INFO door[];
} DOOR_INFOS;

typedef struct LIGHT_INFO {
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t intensity1;
    int16_t intensity2;
    int falloff1;
    int falloff2;
} LIGHT_INFO;

typedef struct MESH_INFO {
    int32_t x;
    int32_t y;
    int32_t z;
    int16_t y_rot;
    int16_t shade1;
    int16_t shade2;
    int16_t static_num;
} MESH_INFO;


typedef struct ROOM_INFO {
    int16_t *data;
    struct DOOR_INFOS *doors;
    struct FLOOR_INFO *floor;
    struct LIGHT_INFO *light;
    struct MESH_INFO *mesh;
    int32_t x;
    int32_t y;
    int32_t z;
    int32_t min_floor;
    int32_t max_ceiling;
    int16_t x_size;
    int16_t y_size;
    int16_t ambient1;
    int16_t ambient2;
    int16_t light_mode;
    int16_t num_lights;
    int16_t num_meshes;
    int16_t bound_left;
    int16_t bound_right;
    int16_t bound_top;
    int16_t bound_bottom;
    uint16_t bound_active;
    int16_t left;
    int16_t right;
    int16_t top;
    int16_t bottom;
    int16_t item_num;
    int16_t fx_num;
    int16_t flipped_room;
    uint16_t flags;
} ROOM_INFO;

typedef struct CREATURE_INFO {
    int16_t head_rotation;
    int16_t neck_rotation;
    int16_t maximum_turn;
    uint16_t flags;
    int16_t item_num;
    enum MOOD_TYPE mood;
    struct LOT_INFO lot;
    struct PHD_VECTOR target;
    struct ITEM_INFO *enemy;
} CREATURE_INFO;

# FUNCTIONS
#   Flags:
#   - to do
#   * to do, called by TR2X
#   x unused
#   + fully decompiled
# Offset    Size        Flags   Declaration
# 3dsystem/3d_gen.c
00401000    000001D0    +       void __cdecl Matrix_GenerateW2V(struct PHD_3DPOS *viewpos);
004011D0    00000072    +       void __cdecl Matrix_LookAt(int32_t xsrc, int32_t ysrc, int32_t zsrc, int32_t xtar, int32_t ytar, int32_t ztar, int16_t roll);
00401250    00000078    -       void __cdecl Math_GetVectorAngles(int32_t x, int32_t y, int32_t z, int16_t *dest);
004012D0    000000AA    +       void __cdecl Matrix_RotX(int16_t rx);
00401380    000000A8    +       void __cdecl Matrix_RotY(int16_t ry);
00401430    000000A8    +       void __cdecl Matrix_RotZ(int16_t rz);
004014E0    000001DC    +       void __cdecl Matrix_RotYXZ(int16_t ry, int16_t rx, int16_t rz);
004016C0    000001E7    +       void __cdecl Matrix_RotYXZpack(uint32_t rpack);
004018B0    000000AB    +       bool __cdecl Matrix_TranslateRel(int32_t x, int32_t y, int32_t z);
00401960    0000007A    -       void __cdecl Matrix_TranslateAbs(int32_t x, int32_t y, int32_t z);
004019E0    000000F3    -       void __cdecl Output_InsertPolygons(int16_t *obj_ptr, int32_t clip);
00401AE0    000000EA    -       void __cdecl Output_InsertRoom(const int16_t *obj_ptr);
00401BD0    00000032    -       int16_t *__cdecl Output_CalcBackgroundLight(const int16_t *obj_ptr);
00401C10    00000134    -       void __cdecl Output_InsertBackground(int16_t *obj_ptr);
00401D50    00000001    -       void __cdecl Output_InsertInventoryBackground(int16_t *obj_ptr);
00401D60    000001D5    -       const int16_t *Output_CalcObjectVertices(const int16_t *obj_ptr);
00401F40    0000016D    -       const int16_t *Output_CalcVerticeLight(const int16_t *obj_ptr);
004020B0    0000027D    -       const int16_t *Output_CalcRoomVertices(const int16_t *obj_ptr);
00402330    000000C7    -       void Output_RotateLight(int16_t pitch, int16_t yaw);
00402400    00000039    -       void __cdecl Output_InitPolyList(void);
00402430    00000033    -       void __cdecl Output_SortPolyList(void);
00402470    000000C5    -       void __cdecl Output_QuickSort(int32_t left, int32_t right);
00402540    00000036    -       void __cdecl Output_PrintPolyList(uint8_t *surface_ptr);
00402580    000000A1    -       void __cdecl Viewport_AlterFOV(int16_t fov);
00402690    00000095    -       void __cdecl Output_SetNearZ(int32_t near_z);
004026E0    0000006B    -       void __cdecl Output_SetFarZ(int32_t far_z);
00402700    00000266    -       void __cdecl Viewport_Init(int16_t x, int16_t y, int32_t width, int32_t height, int32_t near_z, int32_t far_z, int16_t view_angle, int32_t screen_width, int32_t screen_height);

# 3dsystem/3d_out.c
00402970    0000019F    -       void __cdecl Output_DrawPolyLine(int16_t *obj_ptr);
00402B10    00000035    -       void __cdecl Output_DrawPolyFlat(int16_t *obj_ptr);
00402B50    00000035    -       void __cdecl Output_DrawPolyTrans(int16_t *obj_ptr);
00402B90    00000035    -       void __cdecl Output_DrawPolyGouraud(int16_t *obj_ptr);
00402BD0    0000003C    -       void __cdecl Output_DrawPolyGTMap(int16_t *obj_ptr);
00402C10    0000003C    -       void __cdecl Output_DrawPolyWGTMap(int16_t *obj_ptr);
00402C50    000000D2    -       bool __cdecl Output_XGenX(int16_t *obj_ptr);
00402D30    00000146    -       bool __cdecl Output_XGenXG(int16_t *obj_ptr);
00402E80    00000219    -       bool __cdecl Output_XGenXGUV(int16_t *obj_ptr);
004030A0    00000284    -       bool __cdecl Output_XGen_XGUVPerspFP(int16_t *obj_ptr);
00403330    00000FC6    -       void __cdecl Output_GTMap_Persp32FP(int32_t y0, int32_t y1, uint8_t *tex_page);
00404300    000014C4    -       void __cdecl Output_WGTmap_Persp32FP(int32_t y0, int32_t y1, uint8_t *tex_page);
004057D0    00000037    -       void __cdecl Output_DrawPolyGTMapPersp(int16_t *obj_ptr);
00405810    00000037    -       void __cdecl Output_DrawPolyWGTMapPersp(int16_t *obj_ptr);

# 3dsystem/3dinsert.c
00405850    0000006C    -       bool __cdecl Output_VisibleZClip(struct PHD_VBUF *vtx0, struct PHD_VBUF *vtx1, struct PHD_VBUF *vtx2);
004058C0    00000140    -       int32_t __cdecl Output_ZedClipper(int32_t vtx_count, struct POINT_INFO *pts, struct VERTEX_INFO *vtx);
00405A00    00000511    -       int32_t __cdecl Output_XYGUVClipper(int32_t vtx_count, struct VERTEX_INFO *vtx);
00405F20    00000A5C    -       int16_t *__cdecl Output_InsertObjectGT4(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00406980    00000872    -       int16_t *__cdecl Output_InsertObjectGT3(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00407200    00000422    -       int32_t __cdecl Output_XYGClipper(int32_t vtx_count, struct VERTEX_INFO *vtx);
00407630    000003D1    -       int16_t *__cdecl Output_InsertObjectG4(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00407A10    0000031B    -       int16_t *__cdecl Output_InsertObjectG3(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00407D30    000002D0    -       int32_t __cdecl Output_XYClipper(int32_t vtx_count, struct VERTEX_INFO *vtx);
00408000    000004A4    -       void __cdecl Output_InsertTrans8(struct PHD_VBUF *vbuf, int16_t shade);
004084B0    000000D3    -       void __cdecl Output_InsertTransQuad(int32_t x, int32_t y, int32_t width, int32_t height, int32_t z);
00408590    000000CB    -       void __cdecl Output_InsertFlatRect(int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t z, uint8_t color_idx);
00408660    000000B5    -       void __cdecl Output_InsertLine(int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t z, uint8_t color_idx);
00408720    00000642    -       void __cdecl Output_InsertGT3_ZBuffered(struct PHD_VBUF *vtx0, struct PHD_VBUF *vtx1, struct PHD_VBUF *vtx2, struct PHD_TEXTURE *texture, struct PHD_UV *uv0, struct PHD_UV *uv1, struct PHD_UV *uv2);
00408D70    00000140    -       void __cdecl Output_DrawClippedPoly_Textured(int32_t vtx_count);
00408EB0    00000444    -       void __cdecl Output_InsertGT4_ZBuffered(struct PHD_VBUF *vtx0, struct PHD_VBUF *vtx1, struct PHD_VBUF *vtx2, struct PHD_VBUF *vtx3, struct PHD_TEXTURE *texture);
00409300    00000091    -       int16_t *__cdecl Output_InsertObjectGT4_ZBuffered(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
004093A0    000000AA    -       int16_t *__cdecl Output_InsertObjectGT3_ZBuffered(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00409450    0000039C    -       int16_t *__cdecl Output_InsertObjectG4_ZBuffered(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
004097F0    000000F7    -       void __cdecl Output_DrawPoly_Gouraud(int32_t vtx_count, int32_t red, int32_t green, int32_t blue);
004098F0    000002D3    -       int16_t *__cdecl Output_InsertObjectG3_ZBuffered(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
00409BD0    000001C9    -       void __cdecl Output_InsertFlatRect_ZBuffered(int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t z, uint8_t color_idx);
00409DA0    00000133    -       void __cdecl Output_InsertLine_ZBuffered(int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t z, uint8_t color_idx);
00409EE0    00000706    -       void __cdecl Output_InsertGT3_Sorted(struct PHD_VBUF *vtx0, struct PHD_VBUF *vtx1, struct PHD_VBUF *vtx2, struct PHD_TEXTURE *texture, struct PHD_UV *uv0, struct PHD_UV *uv1, struct PHD_UV *uv2, enum SORT_TYPE sort_type);
0040A5F0    000001AC    -       void __cdecl Output_InsertClippedPoly_Textured(int32_t vtx_count, float z, int16_t poly_type, int16_t tex_page);
0040A7A0    000004D7    -       void __cdecl Output_InsertGT4_Sorted(struct PHD_VBUF *vtx0, struct PHD_VBUF *vtx1, struct PHD_VBUF *vtx2, struct PHD_VBUF *vtx3, struct PHD_TEXTURE *texture, enum SORT_TYPE sort_type);
0040AC80    0000008C    -       int16_t *__cdecl Output_InsertObjectGT4_Sorted(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
0040AD10    0000009F    -       int16_t *__cdecl Output_InsertObjectGT3_Sorted(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
0040ADB0    0000043B    -       int16_t *__cdecl Output_InsertObjectG4_Sorted(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
0040B1F0    00000175    -       void __cdecl Output_InsertPoly_Gouraud(int32_t vtx_count, float z, int32_t red, int32_t green, int32_t blue, int16_t poly_type);
0040B370    00000343    -       int16_t *__cdecl Output_InsertObjectG3_Sorted(int16_t *obj_ptr, int32_t num, enum SORT_TYPE sort_type);
0040B6C0    00000347    -       void __cdecl Output_InsertSprite_Sorted(int32_t z, int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t sprite_idx, int16_t shade);
0040BA10    0000017F    -       void __cdecl Output_InsertFlatRect_Sorted(int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t z, uint8_t color_idx);
0040BB90    0000012B    -       void __cdecl Output_InsertLine_Sorted(int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t z, uint8_t color_idx);
0040BCC0    00000195    -       void __cdecl Output_InsertTrans8_Sorted(struct PHD_VBUF *vbuf, int16_t shade);
0040BE60    0000013D    -       void __cdecl Output_InsertTransQuad_Sorted(int32_t x, int32_t y, int32_t width, int32_t height, int32_t z);
0040BFA0    000000A7    -       void __cdecl Output_InsertSprite(int32_t z, int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t sprite_idx, int16_t shade);

# 3dsystem/scalespr.c
0040C050    000002C7    -       void __cdecl Output_DrawSprite(uint32_t flags, int32_t x, int32_t y, int32_t z, int16_t sprite_idx, int16_t shade, int16_t scale);
0040C320    00000085    -       void __cdecl Output_DrawPickup(int32_t sx, int32_t sy, int32_t scale, int16_t sprite_idx, int16_t shade);
0040C3B0    00000152    -       int16_t *__cdecl Output_InsertRoomSprite(int16_t *obj_ptr, int32_t vtx_count);
0040C510    00000096    -       void __cdecl Output_DrawScreenSprite2D(int32_t sx, int32_t sy, int32_t sz, int32_t scale_h, int32_t scale_v, int16_t sprite_idx, int16_t shade, uint16_t flags);
0040C5B0    0000009D    -       void __cdecl Output_DrawScreenSprite(int32_t sx, int32_t sy, int32_t sz, int32_t scale_h, int32_t scale_v, int16_t sprite_idx, int16_t shade, uint16_t flags);
0040C650    00000223    -       void __cdecl Output_DrawScaledSpriteC(int16_t *obj_ptr);

# game/bird.c
0040C880    00000089    -       void __cdecl Eagle_Initialise(int16_t item_num);
0040C910    00000200    -       void __cdecl Eagle_Control(int16_t item_num);

# game/boat.c
0040CB30    0000003C    -       void __cdecl Boat_Initialise(int16_t item_num);
0040CB70    00000170    -       int32_t __cdecl Boat_CheckGeton(int16_t item_num, struct COLL_INFO *coll);
0040CCE0    0000015E    -       void __cdecl Boat_Collision(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
0040CE40    000000F8    -       int32_t __cdecl Boat_TestWaterHeight(struct ITEM_INFO *item, int32_t z_off, int32_t x_off, struct PHD_VECTOR *pos);
0040CF40    000001C1    -       void __cdecl Boat_DoShift(int32_t boat_num);
0040D110    00000174    -       void __cdecl Boat_DoWakeEffect(struct ITEM_INFO *boat);
0040D290    0000004B    -       int32_t __cdecl Boat_DoDynamics(int32_t height, int32_t fallspeed, int32_t *y);
0040D2E0    000004DD    -       int32_t __cdecl Boat_Dynamics(int16_t boat_num);
0040D7C0    00000187    -       int32_t __cdecl Boat_UserControl(struct ITEM_INFO *boat);
0040D950    00000169    -       void __cdecl Boat_Animation(struct ITEM_INFO *boat, int32_t collide);
0040DAC0    0000062A    -       void __cdecl Boat_Control(int16_t item_num);
0040E0F0    000000B3    -       void __cdecl Gondola_Control(int16_t item_num);

# game/box.c
0040E1B0    0000002F    -       void __cdecl Creature_Initialise(int16_t item_num);
0040E1E0    00000047    -       int32_t __cdecl Creature_Activate(int16_t item_num);
0040E230    00000242    -       void __cdecl Creature_AIInfo(struct ITEM_INFO *item, struct AI_INFO *info);
0040E490    000001F3    -       int32_t __cdecl Box_SearchLOT(struct LOT_INFO *lot, int32_t expansion);
0040E690    0000006F    -       int32_t __cdecl Box_UpdateLOT(struct LOT_INFO *lot, int32_t expansion);
0040E700    00000095    -       void __cdecl Box_TargetBox(struct LOT_INFO *lot, int16_t box_num);
0040E7A0    000000F2    -       int32_t __cdecl Box_StalkBox(struct ITEM_INFO *item, struct ITEM_INFO *enemy, int16_t box_num);
0040E8A0    000000A4    -       int32_t __cdecl Box_EscapeBox(struct ITEM_INFO *item, struct ITEM_INFO *enemy, int16_t box_num);
0040E950    000000A7    -       int32_t __cdecl Box_ValidBox(struct ITEM_INFO *item, int16_t zone_num, int16_t box_num);
0040EA00    0000043F    -       void __cdecl CreatureMood(struct ITEM_INFO *item, struct AI_INFO *info, int32_t violent);
0040EE70    00000459    -       enum TARGET_TYPE __cdecl Box_CalculateTarget(struct PHD_VECTOR *target, struct ITEM_INFO *item, struct LOT_INFO *lot);
0040F2D0    000000F8    -       int32_t __cdecl Creature_CheckBaddieOverlap(int16_t item_num);
0040F3D0    0000008B    -       int32_t __cdecl Box_BadFloor(int32_t x, int32_t y, int32_t z, int32_t box_height, int32_t next_height, int16_t room_num, struct LOT_INFO *lot);
0040F460    000000B8    -       void __cdecl Creature_Die(int16_t item_num, int32_t explode);
0040F520    000008CC    -       int32_t __cdecl Creature_Animate(int16_t item_num, int16_t angle, int16_t tilt);
0040FDF0    000000D5    -       int16_t __cdecl Creature_Turn(struct ITEM_INFO *item, int16_t maximum_turn);
0040FED0    00000035    -       void __cdecl Creature_Tilt(struct ITEM_INFO *item, int16_t angle);
0040FF10    00000049    -       void __cdecl Creature_Head(struct ITEM_INFO *item, int16_t required);
0040FF60    0000004E    -       void __cdecl Creature_Neck(struct ITEM_INFO *item, int16_t required);
0040FFB0    000000A8    -       void __cdecl Creature_Float(int16_t item_num);
00410060    00000050    -       void __cdecl Creature_Underwater(struct ITEM_INFO *item, int32_t depth);
004100B0    0000005C    -       int16_t __cdecl Creature_Effect(struct ITEM_INFO *item, struct BITE_INFO *bite, int16_t (*spawn)(int32_t x, int32_t y, int32_t z, int16_t speed, int16_t y_rot, int16_t room_num));
00410110    00000131    -       int32_t __cdecl Creature_Vault(int16_t item_num, int16_t angle, int32_t vault, int32_t shift);
00410250    0000016F    -       void __cdecl Creature_Kill(struct ITEM_INFO *item, int32_t kill_anim, int32_t kill_state, int32_t lara_kill_state);
004103C0    000001DB    -       void __cdecl Creature_GetBaddieTarget(int16_t item_num, int32_t goody);

# game/camera.c
004105A0    000000B0    -       void __cdecl Camera_Initialise(void);
00410650    00000372    -       void __cdecl Camera_Move(struct GAME_VECTOR *ideal, int32_t speed);
004109D0    000000D7    -       void __cdecl Camera_Clip(int32_t *x, int32_t *y, int32_t *h, int32_t target_x, int32_t target_y, int32_t target_h, int32_t left, int32_t top, int32_t right, int32_t bottom);
00410AB0    00000154    -       void __cdecl Camera_Shift(int32_t *x, int32_t *y, int32_t *h, int32_t target_x, int32_t target_y, int32_t target_h, int32_t left, int32_t top, int32_t right, int32_t bottom);
00410C10    00000050    -       struct FLOOR_INFO __cdecl *Camera_GoodPosition(int32_t x, int32_t y, int32_t z, int16_t room_num);
00410C60    00000781    -       void __cdecl Camera_SmartShift(struct GAME_VECTOR *ideal, void (*shift)(int32_t *x, int32_t *y, int32_t *h, int32_t target_x, int32_t target_y, int32_t target_h, int32_t left, int32_t top, int32_t right, int32_t bottom));
004113F0    000000ED    -       void __cdecl Camera_Chase(struct ITEM_INFO *item);
004114E0    0000019E    -       int32_t __cdecl Camera_ShiftClamp(struct GAME_VECTOR *pos, int32_t clamp);
00411680    0000018E    -       void __cdecl Camera_Combat(struct ITEM_INFO *item);
00411810    000001E2    -       void __cdecl Camera_Look(struct ITEM_INFO *item);
00411A00    00000099    -       void __cdecl Camera_Fixed(void);
00411AA0    000004A9    -       void __cdecl Camera_Update(void);
00411F50    0000000A    -       void __cdecl Camera_SetCutsceneTrack(int32_t track);
00411F60    00000112    -       int32_t __cdecl Game_Cutscene_Start(int32_t level_num);
00412080    00000093    -R      void __cdecl Misc_InitCinematicRooms(void);
00412120    0000016F    -       int32_t __cdecl Game_Cutscene_Control(int32_t nframes);
00412290    00000138    -       void __cdecl Camera_UpdateCutscene(void);
004123D0    0000007F    -R      int32_t __cdecl GetCinematicRoom(int32_t x, int32_t y, int32_t z);
00412450    000000DC    -       void __cdecl CutscenePlayer_Control(int16_t item_num);
00412530    00000096    -       void __cdecl Lara_Control_Cutscene(int16_t item_num);
004125D0    0000008F    -R      void __cdecl CutscenePlayer1_Initialise(int16_t item_num);
00412660    00000033    -R      void __cdecl CutscenePlayerGen_Initialise(int16_t item_num);
004126A0    00000245    -       void __cdecl Camera_LoadCutsceneFrame(void);

# game/collide.c
004128F0    0000067C    -       void __cdecl Collide_GetCollisionInfo(struct COLL_INFO *coll, int32_t xpos, int32_t ypos, int32_t zpos, int16_t room_num, int32_t obj_height);
00412FB0    0000002F    -       int32_t __cdecl Room_FindGridShift(int32_t src, int32_t dst);
00412FE0    000003D2    -       int32_t __cdecl Collide_CollideStaticObjects(struct COLL_INFO *coll, int32_t x, int32_t y, int32_t z, int16_t room_num, int32_t hite);
004133D0    000000C8    -       void __cdecl Room_GetNearbyRooms(int32_t x, int32_t y, int32_t z, int32_t r, int32_t h, int16_t room_num);
004134A0    00000055    -       void __cdecl Room_GetNewRoom(int32_t x, int32_t y, int32_t z, int16_t room_num);
00413500    00000037    -       void __cdecl Item_ShiftCol(struct ITEM_INFO *item, struct COLL_INFO *coll);
00413540    0000005D    -       void __cdecl Item_UpdateRoom(struct ITEM_INFO *item, int32_t height);
004135A0    00000099    -       int16_t __cdecl Room_GetTiltType(struct FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
00413640    00000195    -       void __cdecl Lara_BaddieCollision(struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
004137E0    00000079    -R      void __cdecl Misc_EffectSpaz(struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
00413860    00000078    -       void __cdecl Creature_Collision(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
004138E0    00000055    -       void __cdecl Object_Collision(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
00413940    00000077    -       void __cdecl Door_Collision(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
004139C0    00000067    -       void __cdecl Object_CollisionTrap(int16_t item_num, struct ITEM_INFO *lara_item, struct COLL_INFO *coll);
00413A30    00000306    -       void __cdecl Lara_Push(struct ITEM_INFO *item, struct ITEM_INFO *lara_item, struct COLL_INFO *coll, int32_t spaz_on, int32_t big_push);
00413D40    000000CB    -       int32_t __cdecl Item_TestBoundsCollide(struct ITEM_INFO *src_item, struct ITEM_INFO *dst_item, int32_t radius);
00413E10    00000137    -       int32_t __cdecl Item_TestPosition(int16_t *bounds, struct ITEM_INFO *src_item, struct ITEM_INFO *dst_item);
00413F50    0000013B    -       void __cdecl Item_AlignPosition(struct PHD_VECTOR *vec, struct ITEM_INFO *src_item, struct ITEM_INFO *dst_item);
00414090    00000187    -       int32_t __cdecl Lara_MovePosition(struct PHD_VECTOR *vec, struct ITEM_INFO *item, struct ITEM_INFO *lara_item);
00414220    0000016E    -R      int32_t __cdecl Misc_Move3DPosTo3DPos(struct PHD_3DPOS *src_pos, struct PHD_3DPOS *dest_pos, int32_t velocity, PHD_ANGLE ang_add);

# game/control.c
00414390    00000356    -       int32_t __cdecl Game_Control(int32_t nframes, int32_t demo_mode);
004146F0    00000338    -       void __cdecl Item_Animate(struct ITEM_INFO *item);
00414A60    000000AB    -       int32_t __cdecl Item_GetAnimChange(struct ITEM_INFO *item, ANIM_STRUCT *anim);
00414B10    0000005F    -       void __cdecl Item_Translate(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z);
00414B70    00000198    -       struct FLOOR_INFO __cdecl *Room_GetFloor(int32_t x, int32_t y, int32_t z, int16_t *room_num);
00414D10    00000168    -       int32_t __cdecl Room_GetWaterHeight(int32_t x, int32_t y, int32_t z, int16_t room_num);
00414E80    00000265    -       int32_t __cdecl Room_GetHeight(struct FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
00415100    000000E7    -       void __cdecl Camera_RefreshFromTrigger(int16_t type, int16_t *data);
004151F0    00000690    -       void __cdecl Room_TestTriggers(int16_t *data, int32_t heavy);
004158D0    00000055    -       int32_t __cdecl Item_IsTriggerActive(struct ITEM_INFO *item);
00415930    0000023D    -       int32_t __cdecl Room_GetCeiling(struct FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
00415B90    0000004E    -       int16_t __cdecl Room_GetDoor(struct FLOOR_INFO *floor);
00415BE0    000000A0    -       int32_t __cdecl LOS_Check(struct GAME_VECTOR *start, struct GAME_VECTOR *target);
00415C80    000002EB    -       int32_t __cdecl LOS_CheckZ(struct GAME_VECTOR *start, struct GAME_VECTOR *target);
00415F70    000002EC    -       int32_t __cdecl LOS_CheckX(struct GAME_VECTOR *start, struct GAME_VECTOR *target);
00416260    000000DA    -       int32_t __cdecl LOS_ClipTarget(struct GAME_VECTOR *start, struct GAME_VECTOR *target, FLOOR_INFO *floor);
00416340    000002FE    -       int32_t __cdecl LOS_ObjectOnLOS(struct GAME_VECTOR *start, struct GAME_VECTOR *target);
00416640    000000B3    -       void __cdecl Room_FlipMap(void);
00416700    00000096    -       void __cdecl Room_RemoveFlipItems(struct ROOM_INFO *r);
004167A0    0000005C    -       void __cdecl Room_AddFlipItems(struct ROOM_INFO *r);
00416800    00000024    -       void __cdecl Control_TriggerMusicTrack(int16_t value, int16_t flags, int16_t type);
00416830    000000DA    -       void __cdecl Control_TriggerMusicNormalTrack(int16_t value, int16_t flags, int16_t type);

# game/demo.c
00416910    00000059    -       int32_t __cdecl Demo_Control(int32_t level_num);
00416970    000001B0    -       int32_t __cdecl Demo_Start(int32_t level_num);
00416B20    000000CD    -       void __cdecl Demo_LoadLaraPos(void);
00416BF0    0000002D    -       void __cdecl Demo_GetInput(void);

# game/diver.c
00416C20    0000007A    -       int16_t __cdecl Diver_Harpoon(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE y_rot, int16_t room_num);
00416CA0    00000106    -       int32_t __cdecl Diver_GetWaterSurface(int32_t x, int32_t y, int32_t z, int16_t room_num);
00416DB0    00000389    -       void __cdecl Diver_Control(int16_t item_num);

# game/dog.c
00417160    00000387    -       void __cdecl Dog_Control(int16_t item_num);
00417510    0000027E    -       void __cdecl Tiger_Control(int16_t item_num);

# game/dragon.c
004177B0    0000017F    -R      void __cdecl ControlTwinkle(int16_t fx_num);
00417930    000000D9    -R      void __cdecl CreateBartoliLight(int16_t item_num);
00417A10    000000AB    -R      int16_t __cdecl DragonFire(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
00417AC0    000002ED    -R      void __cdecl DragonCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00417DB0    000000D9    -R      void __cdecl DragonBones(int16_t item_num);
00417E90    00000519    -R      void __cdecl DragonControl(int16_t back_num);
004183E0    00000114    -R      void __cdecl InitialiseBartoli(int16_t item_num);
00418500    00000193    -R      void __cdecl BartoliControl(int16_t item_num);
004186A0    00000287    -R      void __cdecl DinoControl(int16_t item_num);

# game/draw.c
00418950    00000037    -R      int32_t __cdecl DrawPhaseCinematic(void);
00418990    00000037    -R      int32_t __cdecl DrawPhaseGame(void);
004189D0    000002B0    -R      void __cdecl DrawRooms(int16_t current_room);
00418C80    000001C6    -R      void __cdecl GetRoomBounds(void);
00418E50    0000037F    -R      void __cdecl SetRoomBounds(int16_t *objptr, int32_t room_num, ROOM_INFO *parent);
004191D0    000003D2    -R      void __cdecl ClipRoom(struct ROOM_INFO *r);
004195B0    000000B4    -R      void __cdecl PrintRooms(int16_t room_num);
00419670    00000218    -R      void __cdecl PrintObjects(int16_t room_num);
00419890    00000147    -R      void __cdecl DrawEffect(int16_t fx_num);
004199E0    00000083    -R      void __cdecl DrawSpriteItem(struct ITEM_INFO *item);
00419A70    00000378    -R      void __cdecl DrawAnimatingItem(struct ITEM_INFO *item);
00419DF0    00000D02    -R      void __cdecl DrawLara(struct ITEM_INFO *item);
0041AB20    00000BC6    -R      void __cdecl DrawLaraInt(struct ITEM_INFO *item, int16_t *frame1, int16_t *frame2, int32_t frac, int32_t rate);
0041B710    00000034    -R      void __cdecl InitInterpolate(int32_t frac, int32_t rate);
0041B750    00000022    -R      void __cdecl phd_PopMatrix_I(void);
0041B780    00000027    -R      void __cdecl phd_PushMatrix_I(void);
0041B7B0    00000031    -R      void __cdecl phd_RotY_I(int16_t ang);
0041B7F0    00000031    -R      void __cdecl phd_RotX_I(int16_t ang);
0041B830    00000031    -R      void __cdecl phd_RotZ_I(int16_t ang);
0041B870    00000041    -R      void __cdecl phd_TranslateRel_I(int32_t x, int32_t y, int32_t z);
0041B8C0    00000047    -R      void __cdecl phd_TranslateRel_ID(int32_t x, int32_t y, int32_t z, int32_t x2, int32_t y2, int32_t z2);
0041B910    00000041    -R      void __cdecl phd_RotYXZ_I(int16_t y, int16_t x, int16_t z);
0041B960    0000003D    -R      void __cdecl gar_RotYXZsuperpack_I(int16_t **pprot1, int16_t **pprot2, int32_t skip);
0041B9A0    000000A1    -R      void __cdecl gar_RotYXZsuperpack(int16_t **pprot, int32_t skip);
0041BA50    0000002A    -R      void __cdecl phd_PutPolygons_I(int16_t *ptr, int32_t clip);
0041BA80    000001A5    -R      void __cdecl InterpolateMatrix(void);
0041BC30    000000FC    -R      void __cdecl InterpolateArmMatrix(void);
0041BD30    0000014B    -R      void __cdecl DrawGunFlash(int32_t weapon_type, int32_t clip);
0041BEA0    000000E8    -R      void __cdecl CalculateObjectLighting(struct ITEM_INFO *item, int16_t *frame);
0041BF90    00000092    -R      int32_t __cdecl GetFrames(struct ITEM_INFO *item, int16_t *frmptr[], int32_t *rate);
0041C030    0000007C    -R      int16_t *__cdecl GetBoundsAccurate(struct ITEM_INFO *item);
0041C0B0    00000035    -R      int16_t *__cdecl GetBestFrame(struct ITEM_INFO *item);
0041C0F0    00000048    -R      void __cdecl AddDynamicLight(int32_t x, int32_t y, int32_t z, int32_t intensity, int32_t falloff);

# game/eel.c
0041C140    0000019D    -R      void __cdecl BigEelControl(int16_t item_num);
0041C2E0    000001E1    -R      void __cdecl EelControl(int16_t item_num);

# game/effects.c
0041C4D0    0000008C    -R      int32_t __cdecl ItemNearLara(struct PHD_3DPOS *pos, int32_t distance);
0041C560    00000068    -R      void __cdecl SoundEffects(void);
0041C5D0    00000059    -R      int16_t __cdecl DoBloodSplat(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE direction, int16_t room_num);
0041C630    000000A4    -R      void __cdecl DoLotsOfBlood(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE direction, int16_t room_num, int32_t num);
0041C6E0    00000082    -R      void __cdecl ControlBlood1(int16_t fx_num);
0041C770    0000007F    -R      void __cdecl ControlExplosion1(int16_t fx_num);
0041C7F0    00000072    -R      void __cdecl Richochet(struct GAME_VECTOR *pos);
0041C870    00000030    -R      void __cdecl ControlRichochet1(int16_t fx_num);
0041C8A0    00000064    -R      void __cdecl CreateBubble(struct PHD_3DPOS *pos, int16_t room_num);
0041C910    00000078    -R      void __cdecl LaraBubbles(struct ITEM_INFO *item);
0041C990    000000F3    -R      void __cdecl ControlBubble1(int16_t fx_num);
0041CA90    000000C2    -R      void __cdecl Splash(struct ITEM_INFO *item);
0041CB60    00000071    -R      void __cdecl ControlSplash1(int16_t fx_num);
0041CBE0    000000AE    -R      void __cdecl ControlWaterSprite(int16_t fx_num);
0041CD20    000000DE    -R      void __cdecl ControlHotLiquid(int16_t fx_num);
0041CF40    0000000B    -R      void __cdecl finish_level_effect(struct ITEM_INFO *item);
0041CF50    00000016    -R      void __cdecl turn180_effect(struct ITEM_INFO *item);
0041CF70    00000096    -R      void __cdecl floor_shake_effect(struct ITEM_INFO *item);
0041D010    00000040    -R      void __cdecl lara_normal_effect(struct ITEM_INFO *item);
0041D050    0000001C    -R      void __cdecl BoilerFX(struct ITEM_INFO *item);
0041D070    0000008F    -R      void __cdecl FloodFX(struct ITEM_INFO *item);
0041D100    00000023    -R      void __cdecl RubbleFX(struct ITEM_INFO *item);
0041D130    0000002C    -R      void __cdecl ChandelierFX(struct ITEM_INFO *item);
0041D160    00000023    -R      void __cdecl ExplosionFX(struct ITEM_INFO *item);
0041D190    0000001C    -R      void __cdecl PistonFX(struct ITEM_INFO *item);
0041D1B0    0000001C    -R      void __cdecl CurtainFX(struct ITEM_INFO *item);
0041D1D0    0000001C    -R      void __cdecl StatueFX(struct ITEM_INFO *item);
0041D1F0    0000001C    -R      void __cdecl SetChangeFX(struct ITEM_INFO *item);
0041D290    00000067    -R      void __cdecl ControlAlarmSound(int16_t item_num);
0041D300    0000005D    -R      void __cdecl ControlBirdTweeter(int16_t item_num);
0041D360    00000059    -R      void __cdecl DoChimeSound(struct ITEM_INFO *item);
0041D3C0    00000068    -R      void __cdecl ControlClockChimes(int16_t item_num);
0041D430    00000128    -R      void __cdecl SphereOfDoomCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
0041D560    000000F0    -R      void __cdecl SphereOfDoom(int16_t item_num);
0041D650    0000012D    -R      void __cdecl DrawSphereOfDoom(struct ITEM_INFO *item);
0041D780    0000000A    -R      void __cdecl lara_hands_free(struct ITEM_INFO *item);
0041D790    00000005    -R      void __cdecl flip_map_effect(struct ITEM_INFO *item);
0041D7A0    00000043    -R      void __cdecl draw_right_gun(struct ITEM_INFO *item);
0041D7F0    00000043    -R      void __cdecl draw_left_gun(struct ITEM_INFO *item);
0041D840    00000063    -R      void __cdecl swap_meshes_with_meshswap1(struct ITEM_INFO *item);
0041D8B0    00000063    -R      void __cdecl swap_meshes_with_meshswap2(struct ITEM_INFO *item);
0041D920    0000009A    -R      void __cdecl swap_meshes_with_meshswap3(struct ITEM_INFO *item);
0041D9C0    00000009    -R      void __cdecl invisibility_on(struct ITEM_INFO *item);
0041D9D0    00000016    -R      void __cdecl invisibility_off(struct ITEM_INFO *item);
0041D9F0    00000009    -R      void __cdecl dynamic_light_on(struct ITEM_INFO *item);
0041DA00    0000000B    -R      void __cdecl dynamic_light_off(struct ITEM_INFO *item);
0041DA10    00000005    -R      void __cdecl reset_hair(struct ITEM_INFO *item);
0041DA20    00000024    -R      void __cdecl AssaultStart(struct ITEM_INFO *item);
0041DA50    0000001F    -R      void __cdecl AssaultStop(struct ITEM_INFO *item);
0041DA70    00000017    -R      void __cdecl AssaultReset(struct ITEM_INFO *item);
0041DA90    000000B2    -R      void __cdecl AssaultFinished(struct ITEM_INFO *item);

# game/enemies.c
0041DB50    00000076    -R      int16_t __cdecl Knife(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
0041DBD0    0000040B    -R      void __cdecl Cult2Control(int16_t item_num);
0041E000    000004A1    -R      void __cdecl MonkControl(int16_t item_num);
0041E4D0    000005BD    -R      void __cdecl Worker3Control(int16_t item_num);
0041EAE0    000003F7    -R      void __cdecl DrawXianLord(struct ITEM_INFO *item);
0041EEE0    000000A8    -R      void __cdecl XianDamage(struct ITEM_INFO *item, CREATURE_INFO *xian, int32_t damage);
0041EF90    00000058    -R      void __cdecl InitialiseXianLord(int16_t item_num);
0041EFF0    00000590    -R      void __cdecl XianLordControl(int16_t item_num);
0041F5D0    00000098    -R      void __cdecl WarriorSparkleTrail(struct ITEM_INFO *item);
0041F670    000003BA    -R      void __cdecl WarriorControl(int16_t item_num);

# game/gameflow.c
0041FA60    000001E9    -R      int32_t __cdecl GF_LoadScriptFile(char *fname);
0041FC50    0000001F    -R      int32_t __cdecl GF_DoFrontEndSequence(void);
0041FC70    00000066    -R      int32_t __cdecl GF_DoLevelSequence(int32_t level, int32_t type);
0041FCE0    0000047C    -R      int32_t __cdecl GF_InterpretSequence(int16_t *ptr, int32_t type, int32_t seq_type);
004201C0    00000CD3    -R      void __cdecl GF_ModifyInventory(int32_t level, int32_t type);

# game/hair.c
00420EA0    00000074    -R      void __cdecl InitialiseHair(void);
00420F20    000009E5    -R      void __cdecl HairControl(int32_t in_cutscene);
00421920    00000076    -R      void __cdecl DrawHair(void);

# game/health.c
004219A0    0000002D    -R      int32_t __cdecl FlashIt(void);
004219D0    00000145    -R      void __cdecl DrawAssaultTimer(void);
00421B20    00000045    -R      void __cdecl DrawGameInfo(int32_t timed);
00421B70    000000AB    -R      void __cdecl DrawHealthBar(int32_t flash_state);
00421C20    00000097    -R      void __cdecl DrawAirBar(int32_t flash_state);
00421CC0    00000028    -R      void __cdecl MakeAmmoString(char *string);
00421CF0    00000132    -R      void __cdecl DrawAmmoInfo(void);
00421E40    00000015    -R      void __cdecl InitialisePickUpDisplay(void);
00421E60    000000FD    -R      void __cdecl DrawPickups(int32_t timed);
00421F60    0000006C    -R      void __cdecl AddDisplayPickup(int16_t obj_num);
00421FD0    0000007A    -R      void __cdecl DisplayModeInfo(char* string);
00422050    0000002C    -R      void __cdecl DrawModeInfo(void);

# game/inventory.c
00422080    0000119E    -R      int32_t __cdecl Display_Inventory(int32_t inventory_mode);
00423310    00000156    -R      void __cdecl Construct_Inventory(void);
00423470    00000089    -R      void __cdecl SelectMeshes(struct INVENTORY_ITEM *inv_item);
00423500    00000081    -R      int32_t __cdecl AnimateInventoryItem(struct INVENTORY_ITEM *inv_item);
00423590    0000041D    -R      void __cdecl DrawInventoryItem(struct INVENTORY_ITEM *inv_item);
004239C0    00000019    -R      int32_t __cdecl GetDebouncedInput(int32_t input);
004239E0    00000005    -R      void __cdecl DoInventoryPicture(void);
004239F0    00000132    -R      void __cdecl DoInventoryBackground(void);

# game/invfunc.c
00423B30    0000010A    -R      void __cdecl InitColours(void);
00423C40    00000167    -R      void __cdecl RingIsOpen(struct RING_INFO *ring);
00423DB0    00000081    -R      void __cdecl RingIsNotOpen(struct RING_INFO *ring);
00423E40    00000369    -R      void __cdecl RingNotActive(struct INVENTORY_ITEM *inv_item);
004242B0    00000032    -R      void __cdecl RingActive(void);
004242F0    000006BE    -R      int32_t __cdecl Inv_AddItem(int32_t itemNum);
00424B00    00000129    -R      void __cdecl Inv_InsertItem(struct INVENTORY_ITEM *inv_item);
00424C30    00000077    -R      int32_t __cdecl Inv_RequestItem(int32_t itemNum);
00424CB0    0000001B    -R      void __cdecl Inv_RemoveAllItems(void);
00424CD0    00000110    -R      int32_t __cdecl Inv_RemoveItem(int32_t itemNum);
00424DE0    000000C1    -R      int32_t __cdecl Inv_GetItemOption(int32_t itemNum);
00424FD0    00000024    -R      void __cdecl RemoveInventoryText(void);
00425000    0000010F    -R      void __cdecl Inv_RingInit(struct RING_INFO *ring, int16_t type, struct INVENTORY_ITEM **list, int16_t qty, int16_t current, struct IMOTION_INFO *imo);
00425110    00000060    -R      void __cdecl Inv_RingGetView(struct RING_INFO *ring, struct PHD_3DPOS *viewer);
00425170    00000040    -R      void __cdecl Inv_RingLight(struct RING_INFO *ring);
004251B0    0000002C    -R      void __cdecl Inv_RingCalcAdders(struct RING_INFO *ring, int16_t rotation_duration);
004251E0    0000013E    -R      void __cdecl Inv_RingDoMotions(struct RING_INFO *ring);
00425320    0000002F    -R      void __cdecl Inv_RingRotateLeft(struct RING_INFO *ring);
00425350    0000002F    -R      void __cdecl Inv_RingRotateRight(struct RING_INFO *ring);
00425380    00000063    -R      void __cdecl Inv_RingMotionInit(struct RING_INFO *ring, int16_t frames, int16_t status, int16_t status_target);
004253F0    0000002C    -R      void __cdecl Inv_RingMotionSetup(struct RING_INFO *ring, int16_t status, int16_t status_target, int16_t frames);
00425420    00000026    -R      void __cdecl Inv_RingMotionRadius(struct RING_INFO *ring, int16_t target);
00425450    00000022    -R      void __cdecl Inv_RingMotionRotation(struct RING_INFO *ring, int16_t rotation, int16_t target);
00425480    00000025    -R      void __cdecl Inv_RingMotionCameraPos(struct RING_INFO *ring, int16_t target);
004254B0    00000020    -R      void __cdecl Inv_RingMotionCameraPitch(struct RING_INFO *ring, int16_t target);
004254D0    0000005D    -R      void __cdecl Inv_RingMotionItemSelect(struct RING_INFO *ring, struct INVENTORY_ITEM *inv_item);
00425530    00000063    -R      void __cdecl Inv_RingMotionItemDeselect(struct RING_INFO *ring, struct INVENTORY_ITEM *inv_item);

# game/invtext.c
004255A0    00000082    -R      void __cdecl Init_Requester(struct REQUEST_INFO *req);
00425630    000000A3    -R      void __cdecl Remove_Requester(struct REQUEST_INFO *req);
004256E0    0000001B    -R      void __cdecl ReqItemCentreAlign(struct REQUEST_INFO *req, struct TEXTSTRING *txt);
00425700    00000054    -R      void __cdecl ReqItemLeftalign(struct REQUEST_INFO *req, struct TEXTSTRING *txt);
00425760    00000056    -R      void __cdecl ReqItemRightalign(struct REQUEST_INFO *req, struct TEXTSTRING *txt);
004257C0    00000866    -R      int32_t __cdecl Display_Requester(struct REQUEST_INFO *req, int32_t des, int32_t backgrounds);
00426030    000000AA    -R      void __cdecl SetRequesterHeading(struct REQUEST_INFO *req, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
004260E0    00000013    -R      void __cdecl RemoveAllReqItems(struct REQUEST_INFO *req);
00426100    000000C0    -R      void __cdecl ChangeRequesterItem(struct REQUEST_INFO *req, int32_t item, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
004261C0    000000AC    -R      void __cdecl AddRequesterItem(struct REQUEST_INFO *req, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
00426270    00000039    -R      void __cdecl SetPCRequesterSize(struct REQUEST_INFO *req, int32_t maxlines, int32_t ypos);
004262B0    00000081    -R      int32_t __cdecl AddAssaultTime(uint32_t time);
00426340    000001D6    -R      void __cdecl ShowGymStatsText(char *time_str, int32_t type);
00426520    00000397    -R      void __cdecl ShowStatsText(char *time_str, int32_t type);
004268C0    00000425    -R      void __cdecl ShowEndStatsText(void);

# game/items.c
00426CF0    00000052    -R      void __cdecl InitialiseItemArray(int32_t numitems);
00426D50    0000011E    -R      void __cdecl KillItem(int16_t item_num);
00426E70    00000039    -R      int16_t __cdecl CreateItem(void);
00426EB0    000001B3    -R      void __cdecl InitialiseItem(int16_t item_num);
00427070    0000008A    -       void __cdecl Item_RemoveActive(int16_t item_num);
00427100    0000006F    -R      void __cdecl RemoveDrawnItem(int16_t item_num);
00427170    0000005A    -R      void __cdecl AddActiveItem(int16_t item_num);
004271D0    0000009C    -R      void __cdecl ItemNewRoom(int16_t item_num, int16_t room_num);
00427270    0000007C    -R      int32_t __cdecl GlobalItemReplace(int32_t in_objnum, int32_t out_objnum);
004272F0    00000030    -R      void __cdecl InitialiseFXArray(void);
00427320    0000006C    -R      int16_t __cdecl CreateEffect(int16_t room_num);
00427390    000000E3    -R      void __cdecl KillEffect(int16_t fx_num);
00427480    00000093    -R      void __cdecl EffectNewRoom(int16_t fx_num, int16_t room_num);
00427520    00000058    -R      void __cdecl ClearBodyBag(void);

# game/lara.c
00427580    00000195    -R      void __cdecl LaraAboveWater(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427720    00000066    -R      void __cdecl LookUpDown(void);
00427790    00000072    -R      void __cdecl LookLeftRight(void);
00427810    00000089    -R      void __cdecl ResetLook(void);
004278A0    0000008B    -R      void __cdecl lara_as_walk(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427930    00000143    -R      void __cdecl lara_as_run(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427A80    00000148    -R      void __cdecl lara_as_stop(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427BD0    000000D3    -R      void __cdecl lara_as_forwardjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427CB0    00000057    -R      void __cdecl lara_as_fastback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427D10    0000008A    -R      void __cdecl lara_as_turn_r(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427DA0    00000089    -R      void __cdecl lara_as_turn_l(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427E30    00000014    -R      void __cdecl lara_as_death(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427E50    00000040    -R      void __cdecl lara_as_fastfall(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427E90    00000058    -R      void __cdecl lara_as_hang(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427EF0    0000001C    -R      void __cdecl lara_as_reach(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427F10    0000000A    -R      void __cdecl lara_as_splat(struct ITEM_INFO *item, struct COLL_INFO *coll);
00427F20    0000010C    -R      void __cdecl lara_as_compress(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428030    00000084    -R      void __cdecl lara_as_back(struct ITEM_INFO *item, struct COLL_INFO *coll);
004280C0    0000000B    -R      void __cdecl lara_as_null(struct ITEM_INFO *item, struct COLL_INFO *coll);
004280D0    0000004B    -R      void __cdecl lara_as_fastturn(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428120    0000007C    -R      void __cdecl lara_as_stepright(struct ITEM_INFO *item, struct COLL_INFO *coll);
004281A0    0000007C    -R      void __cdecl lara_as_stepleft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428220    0000002B    -R      void __cdecl lara_as_slide(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428250    0000004A    -R      void __cdecl lara_as_backjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
004282A0    00000033    -R      void __cdecl lara_as_rightjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
004282E0    00000033    -R      void __cdecl lara_as_leftjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428320    00000013    -R      void __cdecl lara_as_upjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428340    0000002C    -R      void __cdecl lara_as_fallback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428370    00000035    -R      void __cdecl lara_as_hangleft(struct ITEM_INFO *item, struct COLL_INFO *coll);
004283B0    00000035    -R      void __cdecl lara_as_hangright(struct ITEM_INFO *item, struct COLL_INFO *coll);
004283F0    00000018    -R      void __cdecl lara_as_slideback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428410    00000030    -R      void __cdecl lara_as_pushblock(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428440    00000027    -R      void __cdecl lara_as_ppready(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428470    00000030    -R      void __cdecl lara_as_pickup(struct ITEM_INFO *item, struct COLL_INFO *coll);
004284A0    00000058    -R      void __cdecl lara_as_pickupflare(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428500    00000039    -R      void __cdecl lara_as_switchon(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428540    00000030    -R      void __cdecl lara_as_usekey(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428570    0000001D    -R      void __cdecl lara_as_special(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428590    0000002F    -R      void __cdecl lara_as_swandive(struct ITEM_INFO *item, struct COLL_INFO *coll);
004285C0    00000054    -R      void __cdecl lara_as_fastdive(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428620    00000015    -R      void __cdecl lara_as_waterout(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428640    000000CA    -R      void __cdecl lara_as_wade(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428710    00000096    -R      void __cdecl lara_as_deathslide(struct ITEM_INFO *item, struct COLL_INFO *coll);
004287B0    0000004C    -R      void __cdecl extra_as_breath(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428800    00000047    -R      void __cdecl extra_as_yetikill(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428850    00000091    -R      void __cdecl extra_as_sharkkill(struct ITEM_INFO *item, struct COLL_INFO *coll);
004288F0    00000013    -R      void __cdecl extra_as_airlock(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428910    0000001D    -R      void __cdecl extra_as_gongbong(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428930    00000051    -R      void __cdecl extra_as_dinokill(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428990    000000BC    -R      void __cdecl extra_as_pulldagger(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428A50    0000004D    -R      void __cdecl extra_as_startanim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428AA0    000000A5    -R      void __cdecl extra_as_starthouse(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428B50    000000A3    -R      void __cdecl extra_as_finalanim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428C00    00000051    -R      int32_t __cdecl LaraFallen(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428C60    0000009B    -R      void __cdecl LaraCollideStop(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428D20    00000191    -R      void __cdecl lara_col_walk(struct ITEM_INFO *item, struct COLL_INFO *coll);
00428EC0    00000176    -R      void __cdecl lara_col_run(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429040    00000081    -R      void __cdecl lara_col_stop(struct ITEM_INFO *item, struct COLL_INFO *coll);
004290D0    000000D7    -R      void __cdecl lara_col_forwardjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
004291B0    000000B3    -R      void __cdecl lara_col_fastback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429270    00000095    -R      void __cdecl lara_col_turn_r(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429310    00000013    -R      void __cdecl lara_col_turn_l(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429330    00000068    -R      void __cdecl lara_col_death(struct ITEM_INFO *item, struct COLL_INFO *coll);
004293A0    00000099    -R      void __cdecl lara_col_fastfall(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429440    00000127    -R      void __cdecl lara_col_hang(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429570    00000090    -R      void __cdecl lara_col_reach(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429600    00000059    -R      void __cdecl lara_col_splat(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429660    00000013    -R      void __cdecl lara_col_compress(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429680    00000096    -R      void __cdecl lara_col_back( ITEM_INFO *item, COLL_INFO *coll );
00429720    000000FB    -R      void __cdecl lara_col_fastturn(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429820    000000BE    -R      void __cdecl lara_col_stepright(struct ITEM_INFO *item, struct COLL_INFO *coll);
004298E0    00000013    -R      void __cdecl lara_col_stepleft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429900    0000001E    -R      void __cdecl lara_col_slide(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429920    00000023    -R      void __cdecl lara_col_backjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429950    00000023    -R      void __cdecl lara_col_rightjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429980    00000023    -R      void __cdecl lara_col_leftjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
004299B0    0000011B    -R      void __cdecl lara_col_upjump(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429AD0    00000083    -R      void __cdecl lara_col_fallback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429B60    00000033    -R      void __cdecl lara_col_hangleft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429BA0    00000033    -R      void __cdecl lara_col_hangright(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429BE0    00000023    -R      void __cdecl lara_col_slideback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429C10    00000013    -R      void __cdecl lara_col_roll(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429C30    00000081    -R      void __cdecl lara_col_roll2(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429CC0    000000B3    -R      void __cdecl lara_col_special(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429D80    00000069    -R      void __cdecl lara_col_swandive(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429DF0    00000079    -R      void __cdecl lara_col_fastdive(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429E70    00000162    -R      void __cdecl lara_col_wade(struct ITEM_INFO *item, struct COLL_INFO *coll);
00429FE0    00000036    -R      void __cdecl lara_default_col(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A020    00000074    -R      void __cdecl lara_col_jumper(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A0A0    00000032    -R      void __cdecl GetLaraCollisionInfo(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A0E0    000000E2    -R      void __cdecl lara_slide_slope(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A1D0    00000067    -R      int32_t __cdecl LaraHitCeiling(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A240    0000007F    -R      int32_t __cdecl LaraDeflectEdge(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A2C0    00000136    -R      void __cdecl LaraDeflectEdgeJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A440    000000AB    -R      void __cdecl LaraSlideEdgeJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A530    000000E1    -R      int32_t __cdecl TestWall(struct ITEM_INFO *item, int32_t front, int32_t right, int32_t down);
0042A640    000000F5    -R      int32_t __cdecl LaraTestHangOnClimbWall(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A750    000000BE    -R      int32_t __cdecl LaraTestClimbStance(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042A810    0000033E    -R      void __cdecl LaraHangTest(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042AB70    000000AD    -R      int32_t __cdecl LaraTestEdgeCatch(struct ITEM_INFO *item, struct COLL_INFO *coll, int32_t *edge);
0042AC20    0000016D    -R      int32_t __cdecl LaraTestHangJumpUp(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042AD90    0000019E    -R      int32_t __cdecl LaraTestHangJump(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042AF30    000000B1    -R      int32_t __cdecl TestHangSwingIn(struct ITEM_INFO *item, PHD_ANGLE angle);
0042AFF0    000002E7    -R      int32_t __cdecl TestLaraVault(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042B2E0    00000130    -R      int32_t __cdecl TestLaraSlide(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042B410    00000075    -R      int16_t __cdecl LaraFloorFront(struct ITEM_INFO *item, PHD_ANGLE ang, int32_t dist);
0042B490    000000BB    -R      int32_t __cdecl LaraLandedBad(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042B550    0000038F    -R      void __cdecl GetLaraJointAbsPosition(struct PHD_VECTOR *vec, int32_t joint);
0042B8E0    0000031A    -R      void __cdecl GetLJAInt(struct ITEM_INFO *item, struct PHD_VECTOR *vec, int16_t *frame1, int16_t *frame2, int32_t frac, int32_t rate);

# game/lara1gun.c
0042BC00    00000033    -R      void __cdecl draw_shotgun_meshes(int32_t weapon_type);
0042BC40    0000002B    -R      void __cdecl undraw_shotgun_meshes(int32_t weapon_type);
0042BC70    00000070    -R      void __cdecl ready_shotgun(int32_t weapon_type);
0042BCE0    000000F5    -R      void __cdecl RifleHandler(int32_t weapon_type);
0042BDE0    000000F2    -R      void __cdecl FireShotgun(void);
0042BEE0    0000007B    -R      void __cdecl FireM16(int32_t running);
0042BF60    00000187    -R      void __cdecl FireHarpoon(void);
0042C0F0    00000344    -R      void __cdecl ControlHarpoonBolt(int16_t item_num);
0042C440    000000F0    -R      void __cdecl FireRocket(void);
0042C530    000003FD    -R      void __cdecl ControlRocket(int16_t item_num);
0042C930    00000166    -R      void __cdecl draw_shotgun(int32_t weapon_type);
0042CAA0    00000104    -R      void __cdecl undraw_shotgun(int32_t weapon_type);
0042CBB0    0000037E    -R      void __cdecl AnimateShotgun(int32_t weapon_type);

# game/lara2gun.c
0042CF60    0000004F    -R      void __cdecl set_arm_info(struct LARA_ARM *arm, int frame);
0042CFB0    0000007C    -R      void __cdecl draw_pistols(int32_t weapon_type);
0042D030    00000225    -R      void __cdecl undraw_pistols(int32_t weapon_type);
0042D260    0000005C    -R      void __cdecl ready_pistols(int32_t weapon_type);
0042D2C0    0000004E    -R      void __cdecl draw_pistol_meshes(int32_t weapon_type);
0042D310    0000003A    -R      void __cdecl undraw_pistol_mesh_left(int32_t weapon_type);
0042D350    0000003A    -R      void __cdecl undraw_pistol_mesh_right(int32_t weapon_type);
0042D390    0000018C    -R      void __cdecl PistolHandler(int32_t weapon_type);
0042D520    00000330    -R      void __cdecl AnimatePistols(int32_t weapon_type);

# game/laraclimb.c
0042D850    00000035    -R      void __cdecl lara_as_climbleft(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D890    00000035    -R      void __cdecl lara_as_climbright(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D8D0    00000075    -R      void __cdecl lara_as_climbstnc(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D950    00000014    -R      void __cdecl lara_as_climbing(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D970    0000001E    -R      void __cdecl lara_as_climbend(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D990    00000014    -R      void __cdecl lara_as_climbdown(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042D9B0    0000005D    -R      void __cdecl lara_col_climbleft(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DA10    00000059    -R      void __cdecl lara_col_climbright(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DA70    0000020D    -R      void __cdecl lara_col_climbstnc(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DC80    0000014D    -R      void __cdecl lara_col_climbing(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DDD0    0000019C    -R      void __cdecl lara_col_climbdown(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042DF70    000000AA    -R      int32_t __cdecl LaraCheckForLetGo(struct ITEM_INFO *item, struct COLL_INFO *coll);
0042E020    00000263    -R      int32_t __cdecl LaraTestClimb(int32_t x, int32_t y, int32_t z, int32_t xfront, int32_t zfront, int32_t item_height, int16_t item_room, int32_t *shift);
0042E290    000000BC    -R      int32_t __cdecl LaraTestClimbPos(struct ITEM_INFO *item, int32_t front, int32_t right, int32_t origin, int32_t height, int32_t *shift);
0042E360    000000EF    -R      void __cdecl LaraDoClimbLeftRight(struct ITEM_INFO *item, struct COLL_INFO *coll, int32_t result, int32_t shift);
0042E450    00000235    -R      int32_t __cdecl LaraTestClimbUpPos(struct ITEM_INFO *item, int32_t front, int32_t right, int32_t *shift, int32_t *ledge);

# game/larafire.c
0042E6A0    000004E8    -R      void __cdecl LaraGun(void);
0042EC10    0000003B    -R      int32_t __cdecl CheckForHoldingState(int32_t state);
0042EC50    0000011C    -R      void __cdecl InitialiseNewWeapon(void);
0042ED90    00000194    -R      void __cdecl LaraTargetInfo(struct WEAPON_INFO *winfo);
0042EF30    0000021C    -R      void __cdecl LaraGetNewTarget(struct WEAPON_INFO *winfo);
0042F150    000000AA    -R      void __cdecl find_target_point(struct ITEM_INFO *item, struct GAME_VECTOR *target);
0042F200    000000C1    -R      void __cdecl AimWeapon(struct WEAPON_INFO *winfo, struct LARA_ARM *arm);
0042F2D0    00000360    -R      int32_t __cdecl FireWeapon(int32_t weapon_type, struct ITEM_INFO *target, struct ITEM_INFO *src, PHD_ANGLE *angles);
0042F640    00000096    -R      void __cdecl HitTarget(struct ITEM_INFO *item, struct GAME_VECTOR *hitpos, int32_t damage);
0042F6E0    00000051    -R      void __cdecl SmashItem(int16_t item_num, int32_t weapon_type);
0042F740    0000003B    -R      int32_t __cdecl WeaponObject(int32_t weapon_type);

# game/laraflare.c
0042F7A0    0000009D    -R      int32_t __cdecl DoFlareLight(struct PHD_VECTOR *pos, int32_t flare_age);
0042F840    000000D3    -R      void __cdecl DoFlareInHand(int32_t flare_age);
0042F920    000000F8    -R      void __cdecl DrawFlareInAir(struct ITEM_INFO *item);
0042FA20    000001D7    -R      void __cdecl CreateFlare(int32_t thrown);
0042FC00    0000004B    -R      void __cdecl set_flare_arm(int32_t frame);
0042FC50    00000169    -R      void __cdecl draw_flare(void);
0042FDC0    00000221    -R      void __cdecl undraw_flare(void);
0042FFF0    00000018    -R      void __cdecl draw_flare_meshes(void);
00430010    00000018    -R      void __cdecl undraw_flare_meshes(void);
00430030    0000003E    -R      void __cdecl ready_flare(void);

# game/laramisc.c
004302E0    00000668    -R      void __cdecl LaraControl(int16_t item_num);
00430970    000002CD    -R      void __cdecl AnimateLara(struct ITEM_INFO *item);
00430C70    0000013F    -R      void __cdecl UseItem(int16_t object_num);
00430E30    000000BA    -R      void __cdecl LaraCheatGetStuff(void);
00430EF0    0000001B    -R      void __cdecl ControlLaraExtra(int16_t item_num);
00430F10    00000021    -R      void __cdecl InitialiseLaraLoad(int16_t item_num);
00430F40    000002BD    -R      void __cdecl InitialiseLara(int32_t type);
00431200    0000036C    -R      void __cdecl InitialiseLaraInventory(int32_t level_num);
00431570    000000FA    -R      void __cdecl LaraInitialiseMeshes(int32_t level_num);

# game/larasurf.c
00431670    00000158    -R      void __cdecl LaraSurface(struct ITEM_INFO *item, struct COLL_INFO *coll);
004317D0    00000070    -R      void __cdecl lara_as_surfswim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431840    0000005E    -R      void __cdecl lara_as_surfback(struct ITEM_INFO *item, struct COLL_INFO *coll);
004318A0    00000060    -R      void __cdecl lara_as_surfleft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431900    00000060    -R      void __cdecl lara_as_surfright(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431960    000000EB    -R      void __cdecl lara_as_surftread(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431A50    00000032    -R      void __cdecl lara_col_surfswim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431A90    00000023    -R      void __cdecl lara_col_surfback(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431AC0    00000023    -R      void __cdecl lara_col_surfleft(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431AF0    00000023    -R      void __cdecl lara_col_surfright(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431B20    0000001E    -R      void __cdecl lara_col_surftread(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431B40    000000F3    -R      void __cdecl LaraSurfaceCollision(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431C40    000000E7    -R      int32_t __cdecl LaraTestWaterStepOut(struct ITEM_INFO *item, struct COLL_INFO *coll);
00431D30    0000021C    -R      int32_t __cdecl LaraTestWaterClimbOut(struct ITEM_INFO *item, struct COLL_INFO *coll);

# game/laraswim.c
00431F50    00000223    -R      void __cdecl LaraUnderWater(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432180    00000086    -R      void __cdecl SwimTurn(struct ITEM_INFO *item);
00432210    0000006B    -R      void __cdecl lara_as_swim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432280    00000076    -R      void __cdecl lara_as_glide(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432300    00000085    -R      void __cdecl lara_as_tread(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432390    00000014    -R      void __cdecl lara_as_dive(struct ITEM_INFO *item, struct COLL_INFO *coll);
004323B0    00000053    -R      void __cdecl lara_as_uwdeath(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432410    0000000B    -R      void __cdecl lara_as_waterroll(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432420    00000013    -R      void __cdecl lara_col_swim(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432440    0000005B    -R      void __cdecl lara_col_uwdeath(struct ITEM_INFO *item, struct COLL_INFO *coll);
004324A0    00000192    -R      int32_t __cdecl GetWaterDepth(int32_t x, int32_t y, int32_t z, int16_t room_num);
00432640    000000CE    -R      void __cdecl LaraTestWaterDepth(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432710    0000015C    -R      void __cdecl LaraSwimCollision(struct ITEM_INFO *item, struct COLL_INFO *coll);
00432870    000001EC    -R      void __cdecl LaraWaterCurrent(struct COLL_INFO *coll);

# game/lot.c
00432A60    00000053    -R      void __cdecl InitialiseLOTarray(void);
00432AC0    0000004F    -R      void __cdecl DisableBaddieAI(int16_t item_num);
00432B10    000001B0    -       int32_t __cdecl LOT_EnableBaddieAI(int16_t item_num, int32_t always);
00432CC0    00000106    -R      void __cdecl InitialiseSlot(int16_t item_num, int32_t slot);
00432ED0    000000B8    -R      void __cdecl CreateZone(struct ITEM_INFO *item);
00432F90    00000049    -R      void __cdecl ClearLOT(LOT_INFO *LOT);

# game/missile.c
00432FE0    000002D0    -R      void __cdecl ControlMissile(int16_t fx_num);
004332B0    000000A7    -R      void __cdecl ShootAtLara(FX_INFO *fx);
00433360    00000386    -       int32_t __cdecl Effect_ExplodingDeath(int16_t item_num, int32_t mesh_bits, int16_t damage);
004336F0    00000200    -R      void __cdecl ControlBodyPart(int16_t fx_num);

# game/moveblock.c
004338F0    0000002C    -R      void __cdecl InitialiseMovingBlock(int16_t item_num);
00433920    00000148    -R      void __cdecl MovableBlock(int16_t item_num);
00433A70    00000239    -R      void __cdecl MovableBlockCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00433CD0    0000004E    -R      int32_t __cdecl TestBlockMovable(struct ITEM_INFO *item, int32_t blokhite);
00433D20    00000137    -R      int32_t __cdecl TestBlockPush(struct ITEM_INFO *item, int32_t blokhite, uint16_t quadrant);
00433E70    00000225    -R      int32_t __cdecl TestBlockPull(struct ITEM_INFO *item, int32_t blokhite, uint16_t quadrant);
004340B0    000000BB    -R      void __cdecl AlterFloorHeight(struct ITEM_INFO *item, int32_t height);
00434170    00000022    -R      void __cdecl DrawMovableBlock(struct ITEM_INFO *item);
004341A0    0000006B    -R      void __cdecl DrawUnclippedItem(struct ITEM_INFO *item);

# game/objects.c
00434210    000000DB    -R      void __cdecl EarthQuake(int16_t item_num);
004342F0    0000003C    -R      void __cdecl ControlCutShotgun(int16_t item_num);
00434330    0000009D    -R      void __cdecl InitialiseFinalLevel(void);
00434400    0000020F    -R      void __cdecl FinalLevelCounter(int16_t item_num);
00434610    000000D9    -R      void __cdecl MiniCopterControl(int16_t item_num);
004346F0    0000007C    -R      void __cdecl InitialiseDyingMonk(int16_t item_num);
00434800    000000BD    -R      void __cdecl ControlGongBonger(int16_t item_num);
00434980    0000028F    -R      void __cdecl ControlDeathSlide(int16_t item_num);
00434C10    000000E3    -R      void __cdecl BigBowlControl(int16_t item_num);
00434D00    0000007E    -R      void __cdecl BellControl(int16_t item_num);
00434E00    000000C4    -R      void __cdecl SmashWindow(int16_t item_num);
00434ED0    00000096    -R      void __cdecl WindowControl(int16_t item_num);
00434F70    000000DC    -R      void __cdecl SmashIceControl(int16_t item_num);
00435050    00000042    -R      void __cdecl ShutThatDoor(struct DOORPOS_DATA *d);
004350A0    00000032    -R      void __cdecl OpenThatDoor(struct DOORPOS_DATA *d);
004350E0    000003DC    -R      void __cdecl InitialiseDoor(int16_t item_num);
00435590    000000B1    -R      int32_t __cdecl OnDrawBridge(struct ITEM_INFO *item, int32_t x, int32_t y);
00435650    00000036    -R      void __cdecl DrawBridgeFloor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435690    0000003B    -R      void __cdecl DrawBridgeCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
004356D0    0000002C    -R      void __cdecl DrawBridgeCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00435740    000000D4    -R      void __cdecl LiftControl(int16_t item_num);
00435820    00000179    -R      void __cdecl LiftFloorCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *floor, int32_t *ceiling);
004359A0    00000035    -R      void __cdecl LiftFloor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
004359E0    00000035    -R      void __cdecl LiftCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435A20    00000016    -R      void __cdecl BridgeFlatFloor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435A40    0000001B    -R      void __cdecl BridgeFlatCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435A60    0000003B    -R      int32_t __cdecl GetOffset(struct ITEM_INFO *item, int32_t x, int32_t z);
00435AA0    00000030    -R      void __cdecl BridgeTilt1Floor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435AD0    00000035    -R      void __cdecl BridgeTilt1Ceiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435B10    0000002F    -R      void __cdecl BridgeTilt2Floor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00435B80    0000010C    -R      void __cdecl CopterControl(int16_t item_num);
00435C90    000000D2    -R      void __cdecl GeneralControl(int16_t item_num);
00435D70    0000008D    -R      void __cdecl DetonatorControl(int16_t item_num);

# game/people.c
00435E00    00000085    -R      int32_t __cdecl Targetable(struct ITEM_INFO *item, AI_INFO *info);
00435E90    0000003B    -R      void __cdecl ControlGlow(int16_t nFX);
00435ED0    0000004E    -R      void __cdecl ControlGunShot(int16_t fx_num);
00435F20    00000066    -R      int16_t __cdecl GunShot(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
00435F90    000000B9    -R      int16_t __cdecl GunHit(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
00436050    000000A7    -R      int16_t __cdecl GunMiss(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);
00436100    000001C4    -R      int32_t __cdecl ShotLara(struct ITEM_INFO *item, AI_INFO *info, struct BITE_INFO *gun, int16_t extra_rotation, int32_t damage);
004362D0    00000043    -R      void __cdecl InitialiseCult1(int16_t item_num);
00436320    00000401    -R      void __cdecl Cult1Control(int16_t item_num);
00436750    00000050    -R      void __cdecl InitialiseCult3(int16_t item_num);
004367A0    0000053C    -R      void __cdecl Cult3Control(int16_t item_num);
00436D10    000003CA    -R      void __cdecl Worker1Control(int16_t item_num);
00437110    0000042A    -R      void __cdecl Worker2Control(int16_t item_num);
00437570    0000030B    -R      void __cdecl BanditControl(int16_t item_num);
004378B0    00000408    -R      void __cdecl Bandit2Control(int16_t item_num);
00437CF0    00000172    -R      void __cdecl WinstonControl(int16_t item_num);

# game/pickup.c
00437E70    00000480    -R      void __cdecl PickUpCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
004382F0    0000020A    -R      void __cdecl SwitchCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00438500    000000FC    -R      void __cdecl SwitchCollision2(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00438840    00000223    -R      void __cdecl KeyHoleCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00438A80    00000294    -R      void __cdecl PuzzleHoleCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);
00438D40    00000039    -R      void __cdecl SwitchControl(int16_t item_num);
00438D80    000000BD    -R      int32_t __cdecl SwitchTrigger(int16_t item_num, int16_t timer);
00438E40    0000003D    -R      int32_t __cdecl KeyTrigger(int16_t item_num);
00438E80    00000033    -R      int32_t __cdecl PickupTrigger(int16_t item_num);
00438EC0    00000023    -R      void __cdecl SecretControl(int16_t item_num);

# game/rat.c
00438EF0    000001DC    -R      void __cdecl MouseControl(int16_t item_num);

# game/savegame.c
004390E0    00000062    -R      void __cdecl InitialiseStartInfo(void);
00439150    000000DB    -R      void __cdecl ModifyStartInfo(int32_t level_num);
00439230    00000201    -R      void __cdecl CreateStartInfo(int32_t level_num);
00439440    0000052B    -R      void __cdecl CreateSaveGameInfo(void);
00439970    0000085C    -R      void __cdecl ExtractSaveGameInfo(void);
0043A1D0    00000015    -R      void __cdecl ResetSG();
0043A1F0    0000004C    -R      void __cdecl WriteSG(void *pointer, int32_t size);
0043A240    00000035    -R      void __cdecl ReadSG(void *pointer, int32_t size);

# game/setup.c
0043A280    0000015F    -       int32_t __cdecl Level_Initialise(int32_t level_num, int32_t level_type);
0043A3E0    00000061    -R      void __cdecl InitialiseGameFlags(void);
0043A450    00000027    -R      void __cdecl InitialiseLevelFlags(void);
0043A480    0000103B    -R      void __cdecl BaddyObjects(void);
0043B4C0    000005FD    -R      void __cdecl TrapObjects(void);
0043BAC0    00000C4C    -R      void __cdecl ObjectObjects(void);
0043C710    00000068    -R      void __cdecl InitialiseObjects(void);
0043C780    000000CE    -R      void __cdecl GetCarriedItems(void);

# game/shark.c
0043C850    00000116    -R      void __cdecl JellyControl(int16_t item_num);
0043C970    0000021B    -R      void __cdecl BaracuddaControl(int16_t item_num);
0043CBA0    0000027C    -R      void __cdecl SharkControl(int16_t item_num);

# game/skidoo.c
0043CE30    00000040    -R      void __cdecl InitialiseSkidoo(int16_t item_num);
0043CE70    000000E1    -R      int32_t __cdecl SkidooCheckGeton(int16_t item_num, struct COLL_INFO *coll);
0043CF60    000000F8    -R      void __cdecl SkidooCollision(int16_t item_num, struct ITEM_INFO *litem, struct COLL_INFO *coll);
0043D060    000001F9    -R      void __cdecl SkidooBaddieCollision(struct ITEM_INFO *skidoo);
0043D260    000000B2    -R      int32_t __cdecl TestHeight(struct ITEM_INFO *item, int32_t z_off, int32_t x_off, struct PHD_VECTOR *pos);
0043D320    0000027C    -R      int32_t __cdecl DoShift(struct ITEM_INFO *skidoo, struct PHD_VECTOR *pos, struct PHD_VECTOR *old);
0043D5A0    00000054    -R      int32_t __cdecl DoDynamics(int32_t height, int32_t fallspeed, int32_t *y);
0043D600    00000090    -R      int32_t __cdecl GetCollisionAnim(struct ITEM_INFO *skidoo, struct PHD_VECTOR *moved);
0043D690    00000140    -R      void __cdecl DoSnowEffect(struct ITEM_INFO *skidoo);
0043D7D0    0000049E    -R      int32_t __cdecl SkidooDynamics(struct ITEM_INFO *skidoo);
0043DC70    000001B6    -R      int32_t __cdecl SkidooUserControl(struct ITEM_INFO *skidoo, int32_t height, int32_t *pitch);
0043DE30    00000106    -R      int32_t __cdecl SkidooCheckGetOffOK(int32_t direction);
0043DF40    000002B9    -R      void __cdecl SkidooAnimation(struct ITEM_INFO *skidoo, int32_t collide, int32_t dead);
0043E220    0000007C    -R      void __cdecl SkidooExplode(struct ITEM_INFO *skidoo);
0043E2A0    00000233    -R      int32_t __cdecl SkidooCheckGetOff(void);
0043E4E0    0000011B    -R      void __cdecl SkidooGuns(void);
0043E600    00000440    -R      int32_t __cdecl SkidooControl(void);
0043EA60    000002D5    -R      void __cdecl DrawSkidoo(struct ITEM_INFO *item);
0043ED40    0000007F    -R      void __cdecl InitialiseSkidman(int16_t item_num);
0043EDD0    000003E2    -R      void __cdecl SkidManControl(int16_t rider_num);
0043F1D0    00000119    -R      void __cdecl SkidmanPush(struct ITEM_INFO *item, struct ITEM_INFO *laraitem, int32_t radius);
0043F2F0    00000081    -R      void __cdecl SkidmanCollision(int16_t item_num, struct ITEM_INFO *laraitem, struct COLL_INFO *coll);

# game/sound.c
0043F380    00000031    -R      int32_t __cdecl GetRealTrack(int32_t track);
0043F3C0    00000484    -R      void __cdecl PlaySoundEffect(uint32_t, struct PHD_3DPOS *, uint32_t);
0043F860    0000005E    -R      void __cdecl StopSoundEffect(int32_t);
0043F8C0    00000086    -R      void __cdecl SOUND_EndScene(void);
0043F950    00000024    -R      void __cdecl SOUND_Stop(void);
0043F980    0000002A    -R      void __cdecl SOUND_Init(void);

# game/sphere.c
0043F9B0    00000128    -R      int32_t __cdecl TestCollision(struct ITEM_INFO *item, struct ITEM_INFO *laraitem);
0043FAE0    000002D8    -R      int32_t __cdecl GetSpheres(struct ITEM_INFO *item, struct SPHERE *ptr, int32_t WorldSpace);
0043FDC0    0000019A    -R      void __cdecl GetJointAbsPosition(struct ITEM_INFO *item, struct PHD_VECTOR *vec, int32_t joint);
0043FF60    0000005D    -R      void __cdecl BaddieBiteEffect(struct ITEM_INFO *item, struct BITE_INFO *bite);

# game/spider.c
0043FFC0    000000AC    -R      void __cdecl SpiderLeap(int16_t item_num, int16_t angle);
00440070    00000206    -R      void __cdecl SpiderControl(int16_t item_num);
00440290    000001A5    -R      void __cdecl BigSpiderControl(int16_t item_num);

# game/text.c
00440450    0000002C    -R      void __cdecl T_InitPrint(void);
00440480    00000105    -R      TEXTSTRING *__cdecl T_Print(int32_t xpos, int32_t ypos, int32_t zpos, char *string);
00440590    00000037    -R      void __cdecl T_ChangeText(struct TEXTSTRING *textstring, char *string);
004405D0    00000017    -R      void __cdecl T_SetScale(struct TEXTSTRING *textstring, int32_t scale_h, int32_t scaleV);
004405F0    0000002B    -R      void __cdecl T_FlashText(struct TEXTSTRING *textstring, int16_t enable, int16_t rate);
00440620    0000008C    -R      void __cdecl T_AddBackground(struct TEXTSTRING *textstring, int16_t xsize, int16_t ysize, int16_t xoff, int16_t yoff, int16_t zoff, int16_t colour, uint16_t *gourptr, uint16_t flags);
004406B0    00000010    -R      void __cdecl T_RemoveBackground(struct TEXTSTRING *textstring);
004406C0    00000029    -R      void __cdecl T_AddOutline(struct TEXTSTRING *textstring, int16_t enable, int16_t colour, uint16_t *gourptr, uint16_t flags);
004406F0    00000010    -R      void __cdecl T_RemoveOutline(struct TEXTSTRING *textstring);
00440700    0000001E    -R      void __cdecl T_CentreH(struct TEXTSTRING *textstring, int16_t enable);
00440720    0000001E    -R      void __cdecl T_CentreV(struct TEXTSTRING *textstring, int16_t enable);
00440740    0000001E    -R      void __cdecl T_RightAlign(struct TEXTSTRING *textstring, int16_t enable);
00440760    0000001E    -R      void __cdecl T_BottomAlign(struct TEXTSTRING *textstring, int16_t enable);
00440780    00000107    -R      int32_t __cdecl T_GetTextWidth(struct TEXTSTRING *textstring);
00440890    00000025    -R      int32_t __cdecl T_RemovePrint(struct TEXTSTRING *textstring);
004408C0    00000024    -R      int16_t __cdecl T_GetStringLen(char *string);
004408F0    00000027    -R      void __cdecl T_DrawText(void);
00440920    00000189    -R      void __cdecl T_draw_border(int32_t xpos, int32_t ypos, int32_t zpos, int32_t width, int32_t height);
00440AB0    000003D2    -R      void __cdecl T_DrawThisText(struct TEXTSTRING *textstring);
00440E90    00000037    -R      uint32_t __cdecl GetTextScaleH(uint32_t scale_h);
00440ED0    00000039    -R      uint32_t __cdecl GetTextScaleV(uint32_t scale_v);

# game/traps.c
00440F10    000001F4    -       void __cdecl MineControl(int16_t mine_num);
00441110    00000138    -       void __cdecl ControlSpikeWall(int16_t item_num);
00441250    00000115    -       void __cdecl ControlCeilingSpikes(int16_t item_num);
00441370    00000086    -       void __cdecl HookControl(int16_t item_num);
00441400    00000190    -       void __cdecl PropellerControl(int16_t item_num);
00441590    0000017B    -       void __cdecl SpinningBlade(int16_t item_num);
00441710    000000FE    -       void __cdecl IcicleControl(int16_t item_num);
004418F0    00000046    -       void __cdecl InitialiseKillerStatue(int16_t item_num);
00441940    00000109    -       void __cdecl KillerStatueControl(int16_t item_num);
00441A50    000000DB    -       void __cdecl SpringBoardControl(int16_t item_num);
00441B30    0000003C    -       void __cdecl InitialiseRollingBall(int16_t item_num);
00441B70    00000347    -       void __cdecl RollingBallControl(int16_t item_num);
00441EC0    0000024A    -       void __cdecl RollingBallCollision(int16_t item_num, struct ITEM_INFO *litem, struct COLL_INFO *coll);
00442110    00000155    -       void __cdecl SpikeCollision(int16_t item_num, struct ITEM_INFO *litem, struct COLL_INFO *coll);
00442270    0000004F    -       void __cdecl TrapDoorControl(int16_t item_num);
00442300    0000003F    -       void __cdecl TrapDoorCeiling(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
00442340    000000A3    -       int32_t __cdecl OnTrapDoor(struct ITEM_INFO *item, int32_t x, int32_t z);
004423F0    0000010A    -       void __cdecl Pendulum(int16_t item_num);
00442500    00000105    -       void __cdecl FallingBlock(int16_t item_num);
00442610    0000003E    -       void __cdecl FallingBlockFloor(struct ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
004426A0    000000BD    -       void __cdecl TeethTrap(int16_t item_num);
00442980    00000155    -       void __cdecl DartsControl(int16_t item_num);
00442AE0    0000004B    -       void __cdecl DartEffectControl(int16_t fx_num);
00442B30    00000090    -       void __cdecl FlameEmitterControl(int16_t item_num);
00442BC0    00000164    -       void __cdecl FlameControl(int16_t fx_num);
00442D30    00000049    -       void __cdecl LaraBurn(void);
00442D80    000000E6    -       void __cdecl LavaBurn(struct ITEM_INFO *item);
00442E70    000000C5    -       void __cdecl LavaSpray(int16_t item_num);
00442F40    0000010B    -       void __cdecl ControlLavaBlob(int16_t fx_num);

# game/yeti.c
00443050    000002CA    -       void __cdecl GiantYetiControl(int16_t item_num);
00443350    000005ED    -       void __cdecl YetiControl(int16_t item_num);

00443990    000001B8    -       sub_443990
00443B50    000000B9    -       sub_443B50
00443C10    00000032    -       sub_443C10
00443C50    0000005F    -       sub_443C50
00443CB0    000000DC    -       sub_443CB0
00443D90    00000220    -       sub_443D90
00443FB0    00000251    -       sub_443FB0
00444210    0000008B    -       sub_444210
004444C0    0000004D    -       sub_4444C0
00444510    00000030    -       sub_444510
00444540    0000003E    -       sub_444540
00444570    0000001F    -       sub_444570
004445B0    000000BD    -       sub_4445B0
00444670    00000037    -       sub_444670
004446B0    000000B9    -       sub_4446B0
00444770    000001B8    -       sub_444770
00444930    0000006A    -       sub_444930
00444980    00000006    -       sub_444980
00444990    00000018    -       sub_444990
004449A0    00000012    -       sub_4449A0
004449D0    000000C6    -       sub_4449D0
00444AA0    00000018    -       sub_444AA0
00444AB0    0000005F    -       sub_444AB0
00444B20    0000008C    -       sub_444B20
00444BB0    00000005    -       sub_444BB0
00444BC0    00000001    -       sub_444BC0
00444BD0    00000054    -       sub_444BD0
00444C30    00000033    -       sub_444C30
00444C70    00000073    -       sub_444C70
00444CF0    0000006A    -       sub_444CF0
00444D60    00000041    -       sub_444D60
00444DB0    00000008    -       sub_444DB0
00444DC0    00000041    -       sub_444DC0
00444E10    00000008    -       sub_444E10
00444E20    00000048    -       sub_444E20
00444E70    00000028    -       sub_444E70
00444EA0    00000104    -       sub_444EA0
00444FB0    00000011    -       sub_444FB0
00444FD0    000000E2    -       sub_444FD0
004450C0    00000043    -       sub_4450C0
00445110    0000003A    -       sub_445110
00445150    00000035    -       sub_445150
00445190    000000A7    -       sub_445190
00445240    00000087    -       sub_445240
004452D0    00000044    -       sub_4452D0
00445320    00000046    -       sub_445320
00445370    0000004D    -       sub_445370
004453C0    0000003D    -       sub_4453C0
00445400    00000025    -       sub_445400
00445430    00000090    -       sub_445430
004454C0    00000046    -       sub_4454C0
00445550    00000071    -       sub_445550
004455D0    00000044    -       sub_4455D0
00445620    00000061    -       sub_445620
00445690    0000008C    -       sub_445690
00445720    00000088    -       sub_445720
004457B0    0000010B    -       sub_4457B0
004458C0    000000D5    -       sub_4458C0
004459A0    00000045    -       sub_4459A0
004459F0    00000053    -       sub_4459F0
00445A50    000003B1    -       sub_445A50
00445E10    00000040    -       sub_445E10
00445E50    000000AF    -       sub_445E50
00445F00    00000013    -       sub_445F00
00445F20    0000001A    -       sub_445F20
00445F40    000001BE    -       sub_445F40
00446100    00000035    -       sub_446100
00446140    0000006A    -       sub_446140
004461B0    0000049F    -       sub_4461B0
004467C0    000001C0    -       sub_4467C0
004469A0    000000BC    -       sub_4469A0
00446A60    000000C6    -       sub_446A60
00446B30    00000022    -       sub_446B30
00446B60    0000004D    -       sub_446B60
00446BB0    00000048    -       sub_446BB0
00446C00    00000374    -       sub_446C00
00446F80    00000013    -       sub_446F80
00446FA0    0000000D    -       sub_446FA0
00446FB0    00000032    -       sub_446FB0
00446FF0    00000012    -       sub_446FF0
00447010    00000048    -       sub_447010
00447060    0000004A    -       sub_447060
004470B0    00000018    -       sub_4470B0
004470C0    00000012    -       sub_4470C0
004470F0    00000068    -       sub_4470F0
00447160    00000018    -       sub_447160
00447170    00000039    -       sub_447170
004471C0    0000002F    -       sub_4471C0
004471F0    00000022    -       sub_4471F0
00447220    0000001A    -       sub_447220
00447240    0000005A    -       sub_447240
004472A0    000000F3    -       sub_4472A0
004473A0    00000005    -       sub_4473A0
004473B0    0000007F    -       sub_4473B0
00447430    00000024    -       sub_447430
00447460    000000E8    -       sub_447460
00447550    0000001F    -       sub_447550
00447570    0000004E    -       sub_447570
004475C0    000000C9    -       sub_4475C0
00447690    00000029    -       sub_447690
004476C0    000000E4    -       sub_4476C0
004477B0    0000002D    -       sub_4477B0
004477E0    0000000F    -       sub_4477E0
004477F0    00000017    -       sub_4477F0
00447810    00000062    -       sub_447810
00447880    00000062    -       sub_447880
004478F0    0000009F    -       sub_4478F0
00447990    00000034    -       sub_447990
004479D0    00000039    -       sub_4479D0
00447A10    00000035    -       sub_447A10
00447A50    00000027    -       sub_447A50
00447A80    00000018    -       sub_447A80
00447A90    00000012    -       sub_447A90
00447AC0    00000068    -       sub_447AC0
00447B30    00000018    -       sub_447B30
00447B40    00000039    -       sub_447B40
00447B90    0000002F    -       sub_447B90
00447BC0    00000048    -       sub_447BC0
00447C10    0000002E    -       sub_447C10
00447C40    0000010E    -       sub_447C40
00447D50    00000045    -       sub_447D50
00447DA0    000000E7    -       sub_447DA0
00447E90    00000039    -       sub_447E90
00447ED0    0000002C    -       sub_447ED0
00447F00    00000031    -       sub_447F00
00447F40    0000002F    -       sub_447F40
00447FA0    00000005    -       sub_447FA0
00447FB0    0000009C    -       sub_447FB0
00448050    0000001A    -       sub_448050
00448070    000000E2    -       sub_448070
00448160    0000017C    -       sub_448160
004482E0    0000001C    -       sub_4482E0
00448300    000000C4    -       sub_448300
004483D0    0000002A    -       sub_4483D0
00448400    00000006    -       sub_448400
00448410    00000005    -       sub_448410
00448420    00000001    -       sub_448420
00448430    0000013B    -       sub_448430
00448570    00000094    -       sub_448570
00448610    00000098    -       sub_448610
004486B0    0000009D    -       sub_4486B0
00448750    000000D3    -       sub_448750
00448830    000000BC    -       sub_448830
004488F0    0000002B    -       sub_4488F0
00448920    000000A1    -       sub_448920
004489D0    00000070    -       sub_4489D0
00448A40    000001A4    -       sub_448A40
00448BF0    0000013C    -       sub_448BF0
00448D30    000000CF    -       sub_448D30
00448E00    0000003B    -       sub_448E00
00448E40    00000003    -       sub_448E40
00448E50    000003A5    -       sub_448E50
00449200    000000E6    -       sub_449200
004492F0    00000204    -       sub_4492F0
004494ED    00000006    -       sub_4494ED
00449500    00000105    -       sub_449500
004495F3    00000006    -       sub_4495F3
00449610    0000023A    -       sub_449610
00449850    00000067    -       sub_449850
004498C0    0000000C    -       sub_4498C0
004498D0    00000049    -       sub_4498D0
00449920    00000188    -       sub_449920
00449AB0    000003A0    -       sub_449AB0
00449E50    00000097    -       sub_449E50
00449EF0    0000057E    -       sub_449EF0
0044A470    00000135    -       sub_44A470
0044A5B0    000001D6    -       sub_44A5B0
0044A790    00000188    -       sub_44A790
0044A920    00000071    -       sub_44A920
0044A9A0    00000060    -       sub_44A9A0
0044AA00    00000060    -       sub_44AA00
0044AA60    00000221    -       sub_44AA60
0044AC90    00000055    -       sub_44AC90
0044ACF0    00000079    -       sub_44ACF0
0044AD70    0000008A    -       sub_44AD70
0044AE00    0000009A    -       sub_44AE00
0044AEA0    00000265    -       sub_44AEA0
0044B110    00000036    -       sub_44B110
0044B150    00000026    -       sub_44B150
0044B180    000000E0    -       sub_44B180
0044B260    0000024A    -       sub_44B260
0044B4B0    00000018    -       sub_44B4B0
0044B4D0    0000002A    -       sub_44B4D0
0044B500    00000014    -       sub_44B500
0044B520    000000C4    -       sub_44B520
0044B5F0    000000C6    -       sub_44B5F0
0044B6C0    000006D1    -       sub_44B6C0
0044BDA0    0000006B    -       sub_44BDA0
0044BE10    000002E0    -       sub_44BE10
0044C0F0    00000048    -       sub_44C0F0
0044C140    00000088    -       sub_44C140
0044C1D0    00000023    -       sub_44C1D0
0044C200    00000035    -       sub_44C200
0044C240    00000116    -       sub_44C240
0044C360    0000002E    -       sub_44C360
0044C390    0000000F    -       sub_44C390
0044C3A0    00000043    -       sub_44C3A0
0044C3F0    00000057    -       sub_44C3F0
0044C450    0000000E    -       sub_44C450
0044C460    00000013    -       sub_44C460
0044C480    00000144    -       sub_44C480
0044C5D0    0000009A    -       sub_44C5D0
0044C670    00000006    -       sub_44C670
0044C680    000001C2    -       sub_44C680
0044C850    00000113    -       sub_44C850
0044C970    0000001E    -       int32_t __cdecl Random_GetControl(void);
0044C990    0000000A    -       sub_44C990
0044C9A0    0000001E    -       sub_44C9A0
0044C9C0    0000000A    -       sub_44C9C0
0044C9D0    00000044    -       sub_44C9D0
0044CA20    0000004C    -       sub_44CA20
0044CA70    00000233    -       sub_44CA70
0044CCB0    00000165    -       sub_44CCB0
0044CE20    00000114    -       sub_44CE20
0044CF40    00000096    -       sub_44CF40
0044CFE0    00000128    -       sub_44CFE0
0044D110    00000029    -       sub_44D110
0044D140    0000002B    -       sub_44D140
0044D170    00000059    -       sub_44D170
0044D1D0    00000024    -       sub_44D1D0
0044D200    0000004A    -       sub_44D200
0044D250    00000082    -       void __cdecl HWR_EnableZBuffer(bool z_write_enable, bool z_enable);
0044D2E0    00000016    -       sub_44D2E0
0044D310    0000016C    -       sub_44D310
0044D490    0000008E    -       sub_44D490
0044D520    0000004A    -       sub_44D520
0044D570    00000035    -       sub_44D570
0044D5B0    00000019    -       sub_44D5B0
0044D5E0    00000022    -       sub_44D5E0
0044D610    0000005C    -       sub_44D610
0044D670    00000011    -       sub_44D670
0044D690    00000021    -       sub_44D690
0044D6C0    0000006C    -       sub_44D6C0
0044D740    00000034    -       sub_44D740
0044D780    000000E8    -       sub_44D780
0044D870    0000007F    -       sub_44D870
0044D8F0    00000120    -       sub_44D8F0
0044DA10    00000AC4    -       sub_44DA10
0044E4E0    0000003C    -       sub_44E4E0
0044E520    000001D6    -       int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
0044E6F0    00000001    -       sub_44E6F0
0044E700    00000064    -       sub_44E700
0044E770    00000055    -       sub_44E770
0044E7A0    0000007C    -       sub_44E7A0
0044E820    00000039    -       sub_44E820
0044E860    00000017    -       sub_44E860
0044E880    00000010    -       sub_44E880
0044E890    0000003C    -       sub_44E890
0044E8E0    0000010F    -       sub_44E8E0
0044E9F0    000000AE    -       sub_44E9F0
0044EAA0    000000D2    -       sub_44EAA0
0044EB80    0000003E    -       sub_44EB80
0044EBC0    000001F5    -       sub_44EBC0
0044EDC0    0000007F    -       sub_44EDC0
0044EED0    00000648    -       sub_44EED0
0044F520    000002DA    -       sub_44F520
0044F800    0000049D    -       sub_44F800
0044FCA0    000000C0    -       sub_44FCA0
0044FD60    0000007E    -       sub_44FD60
0044FDE0    00000040    -       sub_44FDE0
0044FE20    000006F4    -       sub_44FE20
00450530    000004D0    -       sub_450530
00450A00    00000096    -       sub_450A00
00450AA0    0000003B    -       sub_450AA0
00450AE0    00000006    -       sub_450AE0
00450AF0    00000006    -       sub_450AF0
00450B00    000000E4    -       sub_450B00
00450BF0    00000036    -       sub_450BF0
00450C30    0000000B    -       sub_450C30
00450C40    00000037    -       sub_450C40
00450C80    00000089    -       sub_450C80
00450CC0    00000270    -       sub_450CC0
00450F30    00000046    -       sub_450F30
00450F80    000001F1    -       sub_450F80
00451180    000002F6    -       sub_451180
00451480    00000031    -       sub_451480
004514C0    00000124    -       sub_4514C0
004515F0    00000206    -       sub_4515F0
00451800    000001CC    -       sub_451800
004519D0    000001F6    -       sub_4519D0
00451BD0    000000C0    -       sub_451BD0
00451C90    00000051    -       sub_451C90
00451CF0    00000021    -       sub_451CF0
00451D20    000000B1    -       sub_451D20
00451DE0    00000105    -       sub_451DE0
00451EF0    0000007E    -       sub_451EF0
00451F70    0000001C    -       sub_451F70
00451F80    0000000D    -       sub_451F80
00451F90    00000010    -       sub_451F90
00451FA0    000001C9    -       sub_451FA0
00452170    00000026    -       sub_452170
004521A0    000000AB    -       sub_4521A0
00452250    00000254    -       sub_452250
004522A0    000000FA    -       sub_4522A0
004523A0    00000005    -       sub_4523A0
004523B0    00000001    -       sub_4523B0
004523C0    0000004E    -       sub_4523C0
00452410    00000005    -       sub_452410
00452420    00000262    -       sub_452420
00452690    00000348    -       sub_452690
004529E0    000000D7    -       sub_4529E0
00452AB0    00000014    -       sub_452AB0
00452AD0    00000003    -       sub_452AD0
00452AE0    00000057    -       sub_452AE0
00452B40    000000C7    -       sub_452B40
00452C00    00000005    -       sub_452C00
00452C10    0000003D    -       sub_452C10
00452C50    00000057    -       sub_452C50
00452CB0    0000003E    -       sub_452CB0
00452CF0    0000005D    -       sub_452CF0
00452D50    000002DE    -       sub_452D50
004533F0    000001DC    -       sub_4533F0
004535E0    00000017    -       sub_4535E0
00453600    00000735    -       sub_453600
00453D40    0000017C    -       sub_453D40
00454050    0000000A    -       sub_454050
00454060    0000011B    -       sub_454060
00454180    000000BE    -       sub_454180
00454240    00000106    -       sub_454240
00454350    0000000A    -       sub_454350
00454360    00000068    -       sub_454360
004543D0    000000BD    -       sub_4543D0
00454520    00000234    -       sub_454520
00454760    0000004B    -       sub_454760
004547B0    000000DC    -       sub_4547B0
004548B0    00000093    -       sub_4548B0
00454950    0000000E    -       sub_454950
00454960    00000011    -       sub_454960
00454980    000002D0    -       sub_454980
00454C50    00000110    -       sub_454C50
00454D60    0000032D    -       sub_454D60
004550C0    0000007D    -       sub_4550C0
00455140    000000DB    -       sub_455140
00455220    00000046    -       sub_455220
00455270    0000002A    -       sub_455270
004552A0    00000026    -       sub_4552A0
004552D0    00000046    -       sub_4552D0
00455320    00000039    -       sub_455320
00455360    0000001C    -       sub_455360
00455380    0000000A    -       sub_455380
00455390    00000017    -       sub_455390
004553B0    0000003C    -       sub_4553B0
004553C0    0000001F    -       sub_4553C0
004553E0    00000077    -       sub_4553E0
00455460    00000051    -       sub_455460
00455500    0000006F    -       sub_455500
00455570    00000039    -       sub_455570
004555B0    00000084    -       sub_4555B0
00455640    00000061    -       sub_455640
004556B0    00000092    -       sub_4556B0
004557A0    00000137    -       sub_4557A0
004558E0    000000C8    -       sub_4558E0
004559B0    000000AE    -       sub_4559B0
00455A60    00000087    -       sub_455A60
00455AF0    0000001C    -       sub_455AF0
00455B10    00000023    -       sub_455B10
00455B40    00000012    -       sub_455B40
00455B90    0000006A    -       sub_455B90
00455C00    0000001C    -       sub_455C00
00455C20    00000098    -       sub_455C20
00455CC0    00000174    -       sub_455CC0
00455E40    00000025    -       sub_455E40
00455E70    00000020    -       sub_455E70
00455E90    00000032    -       sub_455E90
00455ED0    0000003B    -       sub_455ED0
00455F10    00000026    -       sub_455F10
00455F40    000000A2    -       sub_455F40
00455FF0    00000035    -       sub_455FF0
00456030    0000003E    -       sub_456030
00456070    000000F5    -       sub_456070
00456170    00000196    -       sub_456170
00456310    0000011A    -       sub_456310
00456430    00000025    -       sub_456430
00456460    00000030    -       sub_456460
00456470    0000001F    -       sub_456470
00456490    00000040    -       sub_456490
004564D0    00000051    -       sub_4564D0
00456530    00000058    -       sub_456530
00456590    00000036    -       sub_456590
004565D0    00000060    -       sub_4565D0
00456630    0000004E    -       sub_456630
00456680    0000006F    -       sub_456680
004566F0    0000002C    -       sub_4566F0
00456720    00000018    -       sub_456720
00456740    00000042    -       sub_456740
00456790    00000051    -       sub_456790
004567F0    000000AA    -       sub_4567F0
004568A0    00000030    -       sub_4568A0
004568D0    0000000F    -       sub_4568D0
004568E0    0000000D    -       sub_4568E0
004568F0    0000001E    -       sub_4568F0
00456910    0000002A    -       sub_456910
00456940    00000036    -       sub_456940
00456980    00000037    -       sub_456980
004569C0    0000004A    -       sub_4569C0
00456A10    00000013    -       sub_456A10
00456A30    0000005E    -       sub_456A30
00456A90    00000076    -       sub_456A90
00456B10    0000005C    -       sub_456B10
00456B70    00000071    -       sub_456B70
00456BF0    00000095    -       sub_456BF0
00456C90    00000091    -       sub_456C90
00456D30    00000037    -       sub_456D30
00456D70    000000C4    -       sub_456D70
00456E40    00000064    -       sub_456E40
00456EB0    0000001C    -       sub_456EB0
00456ED0    00000057    -       sub_456ED0
00456F30    00000061    -       sub_456F30
00456FA0    0000023A    -       sub_456FA0
004571E0    00000026    -       sub_4571E0
00457210    0000006E    -       sub_457210
00457280    0000001E    -       sub_457280
0045729E    00000033    -       sub_45729E
004572D4    00000061    -       sub_4572D4
00457335    0000013A    -       sub_457335
0045746F    00000160    -       sub_45746F
004575CF    000002FD    -       sub_4575CF
004578CC    00000341    -       sub_4578CC
00457C10    00000048    -       sub_457C10
00457C58    00000006    -       int32_t __fastcall Math_Cos(int16_t angle);
00457C5E    0000001B    -       int32_t __fastcall Math_Sin(int16_t angle);
00457C79    0000001A    -       sub_457C79
00457C93    0000002C    -       sub_457C93

# VARIABLES
# Offset    Declaration
0046C304    float g_ViewportAspectRatio = 0.0f;
0046E310    int32_t g_PhdWinTop;
0047031C    float g_FltWinBottom;
00470330    int32_t g_PhdWinCenterX;
00470334    int32_t g_PhdWinCenterY;
00470340    float g_FltWinTop;
00478048    float g_FltWinLeft;
0047804C    int16_t g_PhdWinMinY;
00478058    int32_t g_PhdFarZ;
00478060    int32_t g_PhdWinBottom;
00478068    int32_t g_PhdWinLeft;
004B2A00    float g_FltWinCenterX;
004B2A04    float g_FltWinCenterY;
004B2A10    int16_t g_PhdWinMinX;
004B2A28    struct MATRIX *g_MatrixPtr;
004B2A2C    int16_t *(__cdecl *g_Output_DrawObjectGT3)(int16_t*, int32_t, enum SORT_TYPE);
004B2A30    int16_t *(__cdecl *g_Output_DrawObjectGT4)(int16_t*, int32_t, enum SORT_TYPE);
004B2AC0    struct MATRIX g_W2VMatrix;
004B2AF8    void (__cdecl *g_Output_DrawLine)(int32_t, int32_t, int32_t, int32_t, int32_t, uint8_t);
004BCB08    int16_t *(__cdecl *g_Output_DrawObjectG4)(int16_t*,int32_t, enum SORT_TYPE);
004BCB50    int16_t *(__cdecl *g_Output_DrawObjectG3)(int16_t*,int32_t, enum SORT_TYPE);
004BCB58    struct MATRIX g_MatrixStack[];
004BF3E0    struct PHD_VBUF g_PhdVBuf[1500];
004D6B60    float g_FltWinRight;
004D6BF8    int32_t PhdWinRight;
005262F0    struct ITEM_INFO g_Items[];
